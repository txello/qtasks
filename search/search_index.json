{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QTasks \u2014 \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447","text":"<p>QTasks \u2014 \u044d\u0442\u043e \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u0441 \u0443\u043f\u043e\u0440\u043e\u043c \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443, \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c. \u041e\u043d \u043b\u0435\u0433\u043a\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u043b\u044e\u0431\u043e\u0433\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u043a \u043d\u043e\u0432\u0438\u0447\u043a\u0430\u043c, \u0442\u0430\u043a \u0438 \u043e\u043f\u044b\u0442\u043d\u044b\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c.</p>"},{"location":"#_1","title":"\u0421\u0441\u044b\u043b\u043a\u0438","text":"<ul> <li>PyPI: https://pypi.org/project/qtasks/</li> <li>GitHub: https://github.com/txello/qtasks/</li> </ul>"},{"location":"#_2","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u2014 \u041b\u0435\u0433\u043a\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f. \u0418\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u044b\u0439 API \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</li> <li>\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u2014 \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u043d\u0443\u0436\u0434\u044b. \u0412\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</li> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u2014 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043b\u0435\u0433\u043a\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</li> </ul>"},{"location":"ru/blog/","title":"\u0412 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435","text":""},{"location":"ru/changelog/","title":"\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439","text":""},{"location":"ru/changelog/#v160-2025-09-20","title":"v1.6.0 2025-09-20","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>(A)syncSocketBroker</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b <code>(A)syncStats</code>, <code>InspectStats</code> \u0438 <code>UtilsInspectStats</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u043b\u0430\u0433\u0438\u043d <code>(A)StatePlugin</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b <code>description</code> \u0438 <code>max_time</code> \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f <code>autodiscover_tasks()</code> \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Django.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 <code>result_time_interval</code> \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f <code>(A)syncResult</code>.</li> <li>\u0412 \u0442\u0435\u0441\u0442\u0430\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 <code>HTTP+QTasks</code> \u0447\u0435\u0440\u0435\u0437 <code>Locust+FastAPI \u043f\u043b\u0430\u0433\u0438\u043d</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 <code>tox</code> \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 <code>py310</code>, <code>py311</code>, <code>py312</code> \u0438 <code>py313</code> \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0430\u0445.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u0430\u043c\u0438.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 <code>add_task</code> \u0441 <code>args=()</code> \u0438 <code>kwargs={}</code> \u043d\u0430 <code>*args</code> \u0438 <code>**kwargs</code>.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>middlewares</code> \u043d\u0430 <code>middlewares_before</code> \u0438 <code>middlewares_after</code>.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>logs_default_level</code> \u043d\u0430 <code>logs_default_level_server</code> \u0438 <code>logs_default_level_client</code>.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>app.init_*</code> \u043d\u0430 <code>app.events.on.*</code>.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043a\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 <code>warning</code> \u043d\u0430 <code>error</code>.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 <code>unittest</code> \u043d\u0430 <code>pytest</code>.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d \u0431\u0440\u043e\u043a\u0435\u0440 \u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 Redis \u043d\u0430 Socket.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0445\u0435\u043c.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d <code>(A)syncDependsPlugin</code>.</li> <li>\u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043a\u043e\u0434\u0430.</li> </ul>"},{"location":"ru/changelog/#v151-2025-07-17","title":"v1.5.1 2025-07-17","text":"<ul> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c <code>pydantic</code>.</li> </ul>"},{"location":"ru/changelog/#v150-2025-07-16","title":"v1.5.0 2025-07-16","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>AsyncPluginMixin</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0441\u0442\u0430\u0442\u0443\u0441 <code>Retry</code> \u0447\u0435\u0440\u0435\u0437 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u0433\u0438\u043d <code>(A)syncRetryPlugin</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b <code>**kwargs</code> \u043a\u0430\u043a <code>extra</code> \u0434\u043b\u044f <code>@app.task()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b <code>tags</code> \u0438 <code>decode</code> \u0434\u043b\u044f <code>@app.task()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>pydantic</code> \u0447\u0435\u0440\u0435\u0437 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u0433\u0438\u043d <code>(A)syncPydanticWrapperPlugin</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>ArgMeta</code> \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>(A)syncTestPlugin</code> \u043a\u0430\u043a \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0430\u0433\u0438\u043d.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432 <code>examples/</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 <code>_plugin_trigger()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>TaskPluginTriggerError</code>.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f <code>(A)syncRedisCommandQueue</code>.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438.</li> <li>\u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043a\u043e\u0434\u0430.</li> </ul>"},{"location":"ru/changelog/#v140-2025-06-12","title":"v1.4.0 2025-06-12","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0441\u0442\u0430\u0442\u0443\u0441 <code>Cancel</code> \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0432 \u043a\u043e\u0434\u0435.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b <code>SyncContext</code> \u0438 <code>AsyncContext</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b <code>SyncRetryPlugin</code> \u0438 <code>AsyncRetryPlugin</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>BaseQueueTasks</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b <code>retry=</code>, <code>retry_on_exc=</code>, <code>generate_handler=</code>, <code>executor=</code>, <code>middlewares=</code> \u0434\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0437\u0430\u0434\u0430\u0447 <code>task()</code>  \u0438 <code>shared_task()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>extra=</code> \u0434\u043b\u044f <code>broker.add</code> \u0438 <code>storage.add</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>broker.default_sleep</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f dataclass.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u0430\u043c\u0438.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>subcribe</code> \u0432 <code>QueueConfig</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432 <code>examples/</code>.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d <code>Router</code>.</li> <li>\u0423\u0431\u0440\u0430\u043d <code>ConfigObserver</code> \u0438\u0437 <code>QueueTasks.config</code>, \u0431\u044b\u043b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d <code>QueueConfig</code>.</li> </ul>"},{"location":"ru/changelog/#v130-2025-05-30","title":"v1.3.0 2025-05-30","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>Logger</code> \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u0432\u044b\u0432\u043e\u0434\u044b <code>print()</code> \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>SyncTaskExecutor</code> \u0438 <code>AsyncTaskExecutor</code> \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Worker</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b <code>SyncRedisCommandQueue</code>  \u0438 <code>AsyncRedisCommandQueue</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>SyncKafkaBroker</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>ConfigObserver</code> \u0438 \u0431\u044b\u043b \u0437\u0430\u043c\u0435\u043d\u0435\u043d \u0432 <code>QueueTasks.config</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>BaseMiddleware</code> \u0438 <code>TaskMiddleware</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>ping()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>flush_all()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>echo=</code> \u0434\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0437\u0430\u0434\u0430\u0447 [<code>task()</code>](/qtasks/ru/api/queuetasks/#qtasks.qtasks.QueueTasks.task  \u0438 <code>shared_task()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>awaiting=</code> \u0434\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0437\u0430\u0434\u0430\u0447 <code>shared_task()</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>log=</code> \u0434\u043b\u044f <code>QueueTasks</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>broker_url=</code> \u0434\u043b\u044f <code>QueueTasks</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f <code>storage.start()</code>  \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 TTL. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u043a\u043b\u0430\u0441\u0441\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0432\u044b\u0437\u043e\u0432\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</li> </ul>"},{"location":"ru/changelog/#v120-2025-05-20","title":"v1.2.0 2025-05-20","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b <code>SyncResult</code>/<code>AsyncResult</code>  \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 real-time.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b <code>SyncTask</code>/<code>AsyncTask</code>  \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>qtasks._state.app_main</code>  \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f <code>QueueTasks</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>SyncRedisGlobalConfig</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432 <code>examples/</code>.</li> <li>\u0417\u0430\u043c\u0435\u043d\u0435\u043d <code>aiounittest</code> \u043d\u0430 <code>unittest.IsolatedAsyncioTestCase</code>.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</li> </ul>"},{"location":"ru/changelog/#v110-2025-04-21","title":"v1.1.0 - 2025-04-21","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>TestCase</code>/<code>AsyncTestCase</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>global_config</code> \u0434\u043b\u044f <code>BaseStorage</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d <code>TaskStatusEnum</code>.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 <code>QueueConfig</code>.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d <code>BaseWorker</code>.</li> </ul>"},{"location":"ru/changelog/#v101-2025-04-15","title":"v1.0.1 \u2013 2025-04-15","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435.</li> <li>\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 mkdocs.</li> </ul>"},{"location":"ru/changelog/#v100-2025-04-15","title":"v1.0.0 \u2013 2025-04-15","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u0435\u0440\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f <code>QTasks</code>.</li> </ul>"},{"location":"ru/components/","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b <code>QueueTasks</code>","text":"<p>\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a <code>QTasks</code> \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u043f\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 \u2014 \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0441\u0432\u043e\u044e \u0447\u0430\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0451\u043d \u0438\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d.</p>"},{"location":"ru/components/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":""},{"location":"ru/components/#queuetasks_1","title":"<code>QueueTasks</code>","text":"<p>\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks import QueueTasks\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\napp = QueueTasks()\n\n@app.task(name=\"test\")\ndef sample_task(id: int):\n    return f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {id} \u0437\u0430\u043f\u0438\u0441\u0430\u043d\"\n</code></pre>"},{"location":"ru/components/#broker","title":"Broker (\u0411\u0440\u043e\u043a\u0435\u0440)","text":"<p>\u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043f\u0440\u0438\u0451\u043c \u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0437\u0430\u0434\u0430\u0447. \u041f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks.asyncio import QueueTasks\nfrom qtasks.brokers import AsyncRedisBroker\n\n# Broker \u2014 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447\nbroker = AsyncRedisBroker(\n    url=\"redis://localhost:6379/2\"\n)\n\napp = QueueTasks(\n    broker=broker\n)\n</code></pre>"},{"location":"ru/components/#worker","title":"Worker (\u0412\u043e\u0440\u043a\u0435\u0440)","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0443\u044e (\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442).</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks.asyncio import QueueTasks\nfrom qtasks.workers import AsyncWorker\nfrom qtasks.brokers import AsyncRedisBroker\n\nbroker = AsyncRedisBroker(\n    url=\"redis://localhost:6379/2\"\n)\n\n# Worker \u2014 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u0447\nworker = AsyncWorker(\n    broker=broker\n)\n\napp = QueueTasks(\n    broker=broker,\n    worker=worker\n)\n</code></pre>"},{"location":"ru/components/#storage","title":"Storage (\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435)","text":"<p>\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 (\u0441\u0442\u0430\u0442\u0443\u0441, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u0434\u0440.). \u042f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0431\u0440\u043e\u043a\u0435\u0440\u0430, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks.asyncio import QueueTasks\nfrom qtasks.workers import AsyncWorker\nfrom qtasks.brokers import AsyncRedisBroker\nfrom qtasks.storages import AsyncRedisStorage\n\n\n# Storage \u2014 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0437\u0430\u0434\u0430\u0447\nstorage = AsyncRedisStorage(\n    url=\"redis://localhost:6379/2\"\n)\n\nbroker = AsyncRedisBroker(\n    url=\"redis://localhost:6379/2\",\n    storage=storage\n)\n\nworker = AsyncWorker(\n    broker=broker\n)\n\napp = QueueTasks(\n    broker=broker,\n    worker=worker\n)\n</code></pre>"},{"location":"ru/components/#starter","title":"Starter (\u0421\u0442\u0430\u0440\u0442\u0435\u0440)","text":"<p>\u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u043c \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks.asyncio import QueueTasks\nfrom qtasks.workers import AsyncWorker\nfrom qtasks.brokers import AsyncRedisBroker\nfrom qtasks.starters import AsyncStarter\n\nbroker = AsyncRedisBroker(\n    url=\"redis://localhost:6379/2\"\n)\n\nworker = AsyncWorker(\n    broker=broker\n)\n\napp = QueueTasks(\n    broker=broker,\n    worker=worker\n)\n\nif __name__ == \"__main__\":\n    # Starter - \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n    starter = AsyncStarter(\n        worker=worker,\n        broker=broker\n    )\n    app.run_forever(starter=starter)\n</code></pre>"},{"location":"ru/components/#_2","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":""},{"location":"ru/components/#globalconfig","title":"GlobalConfig (\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f)","text":"<p>\u0425\u0440\u0430\u043d\u0438\u0442 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c. \u041e\u0431\u044b\u0447\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks.asyncio import QueueTasks\nfrom qtasks.workers import AsyncWorker\nfrom qtasks.brokers import AsyncRedisBroker\nfrom qtasks.storages import AsyncRedisStorage\nfrom qtasks.configs import AsyncRedisGlobalConfig\n\n\n# GlobalConfig \u2014 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\nglobal_config = AsyncRedisGlobalConfig(\n    url=\"redis://localhost:6379/2\"\n)\n\n\nstorage = AsyncRedisStorage(\n    url=\"redis://localhost:6379/2\",\n    global_config=global_config\n)\n\nbroker = AsyncRedisBroker(\n    url=\"redis://localhost:6379/2\",\n    storage=storage\n)\n\nworker = AsyncWorker(\n    broker=broker\n)\n\napp = QueueTasks(\n    broker=broker,\n    worker=worker\n)\n</code></pre>"},{"location":"ru/components/#plugins","title":"Plugins (\u041f\u043b\u0430\u0433\u0438\u043d\u044b)","text":"<p>\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430. \u041c\u043e\u0433\u0443\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u043a \u043b\u044e\u0431\u043e\u043c\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u0438 \u0442.\u043f.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks import QueueTasks\n\napp = QueueTasks()\n\n# \u041f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 `**kwargs` \u0432 `@app.task`\nclass TestPlugin(BasePlugin):\n    def __init__(self, name=None):\n        super().__init__(name)\n\n        self.handlers = {\n            \"task_executor_args_replace\": self.task_executor_args_replace\n        }\n\n    async def start(self, *args, **kwargs):\n        return super().start(*args, **kwargs)\n\n    async def stop(self, *args, **kwargs):\n        return super().stop(*args, **kwargs)\n\n    async def trigger(self, name, **kwargs):\n        handler = self.handlers.get(name)\n        if handler:\n            return handler(**kwargs)\n        return None\n\n    def task_executor_args_replace(self, **kwargs):\n        print(kwargs)\n        return None\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u0430 \u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e\napp.add_plugin(TestPlugin(), trigger_names=[\"task_executor_args_replace\"], component=\"worker\")\n\n\n@app.task(test=\"test\")\ndef sample_task(id: int):\n    return f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {id} \u0437\u0430\u043f\u0438\u0441\u0430\u043d\"\n</code></pre>"},{"location":"ru/components/#timer","title":"Timer (\u0422\u0430\u0439\u043c\u0435\u0440)","text":"<p>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e (\u0430\u043d\u0430\u043b\u043e\u0433 cron).</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>from qtasks import QueueTasks\nfrom qtasks.timers import AsyncTimer\n\napp = QueueTasks()\n\n@app.task\ndef test():\n    print(\"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438\")\n\n\ntimer = AsyncTimer(app=app)\n\ntrigger = CronTrigger(second=\"*/10\") # \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u0430\u0436\u0434\u044b\u0435 10 \u0441\u0435\u043a\u0443\u043d\u0434\ntimer.add_task(task_name=\"test\", trigger=trigger)\n\ntimer.run_forever()\n</code></pre>"},{"location":"ru/components/#webview","title":"WebView (\u0412 \u0441\u0442\u0430\u0434\u0438\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438...)","text":"<p>\u041e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0437\u0430\u0434\u0430\u0447.</p> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430:</p> <pre><code>pip install qtasks_webview\n</code></pre>"},{"location":"ru/components/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0443\u0447\u043d\u0443\u044e","text":"<pre><code>import asyncio\nfrom qtasks.asyncio import QueueTasks\nfrom qtasks.configs import AsyncRedisGlobalConfig\nfrom qtasks.storages import AsyncRedisStorage\nfrom qtasks.brokers import AsyncRedisBroker\nfrom qtasks.workers import AsyncWorker\nfrom qtasks.starters import AsyncStarter\n\n# GlobalConfig \u2014 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\nglobal_config = AsyncRedisGlobalConfig(\n    name=\"QueueTasks\",\n    url=\"redis://localhost:6379/2\"\n)\n\n# Storage \u2014 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0437\u0430\u0434\u0430\u0447\nstorage = AsyncRedisStorage(\n    name=\"QueueTasks\",\n    global_config=global_config,\n    url=\"redis://localhost:6379/2\"\n)\n\n# Broker \u2014 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447\nbroker = AsyncRedisBroker(\n    name=\"QueueTasks\",\n    storage=storage,\n    url=\"redis://localhost:6379/2\"\n)\n\n# Worker \u2014 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u0447\nworker = AsyncWorker(\n    name=\"QueueTasks\",\n    broker=broker\n)\n\n# QueueTasks \u2014 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\napp = QueueTasks(\n    name=\"QueueTasks\",\n    broker=broker,\n    worker=worker\n)\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\napp.config.max_tasks_process = 10\napp.config.running_older_tasks = True\napp.config.delete_finished_tasks = True\n\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438\n@app.task(name=\"test\")\nasync def sample_task(id: int):\n    result = f\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {id} \u0437\u0430\u043f\u0438\u0441\u0430\u043d\"\n    await asyncio.sleep(id)\n    return result\n\n# \u0417\u0430\u043f\u0443\u0441\u043a \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Starter\nif __name__ == \"__main__\":\n    starter = AsyncStarter(\n        name=\"QueueTasks\",\n        worker=worker,\n        broker=broker\n    )\n    app.run_forever(starter=starter)\n</code></pre>"},{"location":"ru/console/","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u044e \u0447\u0435\u0440\u0435\u0437 <code>qtasks.__main__</code>","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c <code>qtasks.__main__</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c <code>QTasks</code> \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438. \u042d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438.</p>"},{"location":"ru/console/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438</li> <li>\u0423\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>-A</code> \u0438\u043b\u0438 <code>-app</code></li> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0440\u0442\u0430 \u0434\u043b\u044f \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430</li> </ul>"},{"location":"ru/console/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>qtasks [\u043e\u043f\u0446\u0438\u0438] &lt;\u043a\u043e\u043c\u0430\u043d\u0434\u0430&gt; [\u043e\u043f\u0446\u0438\u0438]\n</code></pre>"},{"location":"ru/console/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434","text":"<ul> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435:</p> <pre><code>qtasks -A &lt;\u043f\u0443\u0442\u044c_\u043a_\u043c\u043e\u0434\u0443\u043b\u044e:\u0438\u043c\u044f_\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f&gt; run\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>qtasks -A based_async_app:app run\n</code></pre> </li> <li> <p>\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 <code>(A)syncStats</code> \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>json</code>:</p> <pre><code>qtasks -A &lt;\u043f\u0443\u0442\u044c_\u043a_\u043c\u043e\u0434\u0443\u043b\u044e:\u0438\u043c\u044f_\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f&gt; stats &lt;\u043a\u043e\u043c\u0430\u043d\u0434\u0430&gt; [\u043e\u043f\u0446\u0438\u0438]\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>qtasks -A based_async_app:app stats inspect app json=true\n</code></pre> </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 (\u0412 \u0441\u0442\u0430\u0434\u0438\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438...):</p> <pre><code>qtasks web -A &lt;\u043f\u0443\u0442\u044c_\u043a_\u043c\u043e\u0434\u0443\u043b\u044e:\u0438\u043c\u044f_\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f&gt; --port &lt;\u043f\u043e\u0440\u0442&gt;\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>qtasks -A based_async_app:app web --port 8000\n</code></pre> </li> </ul>"},{"location":"ru/console/#_4","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","text":"<ul> <li><code>-A</code>, <code>-app</code> \u2014 \u043f\u0443\u0442\u044c \u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>\u043c\u043e\u0434\u0443\u043b\u044c:\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f</code></li> <li><code>--port</code> \u2014 \u043f\u043e\u0440\u0442 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 8000)</li> </ul>"},{"location":"ru/console/#_5","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0444\u043b\u0430\u0433 <code>--help</code>:</p> <pre><code>qtasks --help\n</code></pre>"},{"location":"ru/getting_started/","title":"\u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 <code>QTasks</code>","text":""},{"location":"ru/getting_started/#queuetasks","title":"\u041a\u0430\u043a \u0437\u0430 \u043f\u0430\u0440\u0443 \u043c\u0438\u043d\u0443\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>QueueTasks</code>","text":""},{"location":"ru/getting_started/#1","title":"1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>from qtasks import QueueTasks\n# \u0438\u043b\u0438 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430:\n# from qtasks.asyncio import QueueTasks\n\napp = QueueTasks()\n</code></pre> <p>Info</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Redis \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>redis://localhost:6379/0</code>.</p>"},{"location":"ru/getting_started/#2","title":"2. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@app.task</code>.</p> <pre><code>@app.task(name=\"mytest\") # \u041e\u0431\u044b\u0447\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \ndef mytest(text: str):\n    print(text)\n    return text\n\n@app.task(name=\"error_zero\") # \u0417\u0430\u0434\u0430\u0447\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439\ndef error_zero():\n    result = 1/0\n    return\n</code></pre> <p>Info</p> <p>\u0415\u0441\u043b\u0438 \u0438\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0443\u0436\u0435 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0438\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438</p> <p>Tip</p> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u044b\u043c, \u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435</p>"},{"location":"ru/getting_started/#3-queuetasks","title":"3. \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c <code>QueueTasks</code>","text":"<pre><code>if __name__ == \"__main__\":\n    app.run_forever()\n</code></pre>"},{"location":"ru/getting_started/#4","title":"4. \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code># file: app.py\nfrom qtasks import QueueTasks\n\n\napp = QueueTasks()\n\n\n@app.task(name=\"mytest\") # \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u044b\u0447\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438\ndef mytest(text: str):\n    print(text)\n    return text\n\n\n@app.task(name=\"error_zero\") # \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439\ndef error_zero():\n    result = 1/0\n    return\n\n\nif __name__ == \"__main__\":\n    app.run_forever()\n</code></pre>"},{"location":"ru/getting_started/#5","title":"5. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0437\u0430\u0434\u0430\u0447, \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 Python:</p> <pre><code># file: add_tasks.py\nfrom app import app, mytest\n\napp.add_task(task_name=\"mytest\", \"\u0422\u0435\u0441\u0442\")\nmytest.add_task(\"\u0422\u0435\u0441\u0442\")\napp.add_task(task_name=\"error_zero\")\n</code></pre>"},{"location":"ru/install/","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<p><code>QTasks</code> \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u0430\u043a \u0447\u0435\u0440\u0435\u0437 PyPI, \u0442\u0430\u043a \u0438 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043d\u0430 GitHub. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f Redis (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e), RabbitMQ \u0438 Kafka.</p>"},{"location":"ru/install/#pypi","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 PyPI","text":""},{"location":"ru/install/#redis","title":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 (Redis \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)","text":"<pre><code>pip install qtasks\n</code></pre>"},{"location":"ru/install/#webview","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 WebView (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430)","text":"<pre><code>pip install qtasks_webview\n</code></pre>"},{"location":"ru/install/#_2","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0434\u0440\u0443\u0433\u0438\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432","text":"<p>Info</p> <p>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043d\u0430 \u0432\u0430\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0435.</p>"},{"location":"ru/install/#rabbitmq","title":"RabbitMQ","text":"<pre><code>pip install qtasks[rabbitmq]\n</code></pre>"},{"location":"ru/install/#kafka","title":"Kafka","text":"<pre><code>pip install qtasks[kafka]\n</code></pre>"},{"location":"ru/install/#github","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 (GitHub)","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438\u043b\u0438 \u0432\u043d\u0435\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:</p> <pre><code>git clone https://github.com/txello/qtasks.git\ncd qtasks/\npip install .\n</code></pre>"},{"location":"ru/next/","title":"\u0427\u0442\u043e \u0434\u0430\u043b\u044c\u0448\u0435?","text":"<ul> <li> <p> \u0418\u0437\u0443\u0447\u0430\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438</p> <p>\u0423\u0437\u043d\u0430\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 \u0437\u0430\u0434\u0430\u0447 QTasks.</p> <p> \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438</p> </li> <li> <p> \u041f\u0438\u0448\u0435\u043c \u043f\u043b\u0430\u0433\u0438\u043d\u044b</p> <p>\u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044f\u0433\u043a\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443.</p> <p> \u041a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u044b</p> </li> <li> <p> \u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u043c</p> <p>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438 \u043a\u043e\u0434\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u043c QTasks \u0432 \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442.</p> <p> \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f</p> </li> <li> <p> \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c</p> <p>\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0432 \u0441\u0432\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u0435.</p> <p> \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430</p> </li> </ul>"},{"location":"ru/schemas/","title":"\u0421\u0445\u0435\u043c\u044b","text":""},{"location":"ru/schemas/#background-","title":"Background-\u0441\u0445\u0435\u043c\u0430 \u0441\u0432\u044f\u0437\u0435\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430","text":"<pre><code>sequenceDiagram\n  autonumber\n  Participant QueueTasks\n  Participant Starter\n  Participant Worker\n  Participant Broker\n  Participant Storage\n  Participant GlobalConfig\n  QueueTasks-&gt;&gt;Starter: (\u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u043b\u043e\u0433\u0438\u043a\u0438)\n  Starter-&gt;&gt;Worker: \u0417\u0430\u043f\u0443\u0441\u043a\n  Starter-&gt;&gt;Broker: \u0417\u0430\u043f\u0443\u0441\u043a\n  Broker&lt;&lt;-&gt;&gt;Storage: \u0417\u0430\u043f\u0443\u0441\u043a \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n  Storage&lt;&lt;-&gt;&gt;GlobalConfig: \u0417\u0430\u043f\u0443\u0441\u043a \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430</code></pre> <p>\u041d\u0430 \u044d\u0442\u043e\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0441\u0432\u044f\u0437\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</p>"},{"location":"ru/schemas/#_2","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c","text":"<pre><code>sequenceDiagram\n  autonumber\n  Participant Storage\n  Participant Broker\n  Participant Worker\n  Participant TaskExecutor\n  Broker-&gt;&gt;Storage: \u041d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430\n  Broker-&gt;&gt;Worker: \u0417\u0430\u0434\u0430\u0447\u0430\n  Worker&lt;&lt;-&gt;&gt;TaskExecutor: \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n  Worker-&gt;&gt;Storage: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</code></pre> <p>\u042d\u0442\u0430\u043f\u044b:</p> <ol> <li>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435</li> <li>\u0417\u0430\u0442\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0412\u043e\u0440\u043a\u0435\u0440\u043e\u0432, \u0438 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u0412\u043e\u0440\u043a\u0435\u0440(\u0441\u0430\u0431\u0432\u043e\u0440\u043a\u0435\u0440) \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043d\u0435\u0439</li> <li>\u0412\u043e\u0440\u043a\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 TaskExecutor \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</li> <li>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435</li> </ol>"},{"location":"ru/schemas/#_3","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c","text":"<pre><code>sequenceDiagram\n  autonumber\n  Participant (A)syncTask.add_task()\n  Participant QueueTasks.add_task()\n  Participant Broker\n  (A)syncTask.add_task()-&gt;&gt;QueueTasks.add_task(): (\u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u043b\u043e\u0433\u0438\u043a\u0438)\n  QueueTasks.add_task()-&gt;&gt;Broker: \u041d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430</code></pre> <p>\u042d\u0442\u0430\u043f\u044b:</p> <ol> <li>\u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f (A)syncTask.add_task(), \u0442\u043e \u043e\u043d \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 QueueTasks.add_task()</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0411\u0440\u043e\u043a\u0435\u0440\u0443(\u0430 \u0442\u043e\u0447\u043d\u0435\u0435 \u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0443)</li> </ol>"},{"location":"ru/schemas/#_4","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c","text":"<pre><code>sequenceDiagram\n  autonumber\n  Participant (A)syncTask.add_task()\n  Participant (A)syncResult.result()\n  Participant QueueTasks.get()\n  Participant Storage\n  (A)syncTask.add_task()-&gt;&gt;(A)syncResult.result(): (\u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u043b\u043e\u0433\u0438\u043a\u0438)\n  (A)syncResult.result()-&gt;&gt;QueueTasks.get(): \u0417\u0430\u043f\u0440\u043e\u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n  QueueTasks.get()&lt;&lt;-&gt;&gt;Storage: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n  QueueTasks.get()-&gt;&gt;(A)syncResult.result(): \u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430</code></pre> <p>\u042d\u0442\u0430\u043f\u044b:</p> <ol> <li>\u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f (A)syncTask.add_task(), \u0442\u043e \u043e\u043d \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 (A)syncResult.result()</li> <li>\u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0435 \u044f\u0434\u0440\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0435\u0441\u0442\u044c \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435</li> <li>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442 \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0434\u0430\u043d\u043d\u044b\u0435</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</li> </ol>"},{"location":"ru/tests/","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p><code>QTasks</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043a\u0430\u043a \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c, \u0442\u0430\u043a \u0438 \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b Python, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a <code>unittest</code>, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>aiounittest</code> \u0438 <code>pytest-asyncio</code>.</p>"},{"location":"ru/tests/#_2","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432 \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438","text":"<pre><code>py tests/main.py\n</code></pre>"},{"location":"ru/tests/#_3","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0438","text":"<ul> <li>\u2705 <code>unittest</code> \u2014 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b.</li> <li>\u2705 <code>aiounittest</code> \u2014 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</li> <li>\u2705 <code>pytest</code> + <code>pytest-asyncio</code> \u2014 \u0434\u043b\u044f \u0433\u0438\u0431\u043a\u043e\u0433\u043e \u0438 \u043c\u043e\u0449\u043d\u043e\u0433\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u2705 <code>SyncTestCase</code>/<code>AsyncTestCase</code> \u2014 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u043a\u0435\u0439\u0441\u044b QTasks \u0434\u043b\u044f \u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</li> </ul>"},{"location":"ru/tests/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":""},{"location":"ru/tests/#unittest","title":"<code>unittest</code> (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e)","text":"<pre><code>import unittest\nfrom app import app\n\nclass TestTasks(unittest.TestCase):\n    def setUp(self):\n        self._result = app.add_task(task_name=\"test\", 5)\n\n    def test_task_get_result(self):\n        uuid = self._result.uuid\n        result = app.get(uuid=uuid)\n        self.assertIsNotNone(result)\n</code></pre>"},{"location":"ru/tests/#unittest_1","title":"<code>unittest</code> (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e)","text":"<pre><code>import unittest\n\nfrom qtasks.schemas.task import Task\nfrom app import app\n\nclass TestAsyncTasks(unittest.IsolatedAsyncioTestCase):\n    async def _add_task(self) -&gt; Task | None:\n        return await app.add_task(task_name=\"test\", 5)\n\n    async def test_task_get_result(self):\n        uuid = (await self._add_task()).uuid\n        result = await app.get(uuid=uuid)\n        self.assertIsNotNone(result)\n</code></pre>"},{"location":"ru/tests/#synctestcase-asynctestcase","title":"<code>SyncTestCase</code> / <code>AsyncTestCase</code>","text":"<pre><code>import unittest\n\nfrom qtasks.tests import SyncTestCase\nfrom qtasks.schemas.test import TestConfig\nfrom app import app\n\nclass TestTasks(unittest.TestCase):\n    def setUp(self):\n        self.test_case = SyncTestCase(app=app)\n\n    def test_task_add(self):\n        self.test_case.settings(TestConfig.full())\n        result = self.test_case.add_task(task_name=\"test\", 5)\n        self.assertIsNotNone(result)\n</code></pre> <pre><code>import unittest\n\nfrom qtasks.tests import AsyncTestCase\nfrom qtasks.schemas.test import TestConfig\nfrom qtasks.schemas.task import Task\nfrom app import app\n\nclass TestAsyncQTasks(unittest.IsolatedAsyncioTestCase):\n    def setUp(self):\n        self.test_case = AsyncTestCase(app=app)\n\n    async def _add_task(self) -&gt; Task | None:\n        return await self.test_case.add_task(\"test\", args=(5,), timeout=10)\n\n    async def test_add_task(self):\n        self.test_case.settings(TestConfig.full())\n        result = await self._add_task()\n        self.assertIsNotNone(result)\n</code></pre>"},{"location":"ru/tests/#pytest","title":"<code>pytest</code>","text":""},{"location":"ru/tests/#_5","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code>pip install pytest pytest-asyncio\n</code></pre>"},{"location":"ru/tests/#teststest_async_taskpy","title":"<code>tests/test_async_task.py</code>","text":"<pre><code>import pytest\nfrom uuid import uuid4\n\nfrom qtasks.tests import AsyncTestCase\nfrom qtasks.schemas.test import TestConfig\nfrom qtasks.enums.task_status import TaskStatusEnum\n\nfrom tests.apps.app_async import app\n\n@pytest.fixture()\ndef test_case():\n    case = AsyncTestCase(app=app)\n    case.settings(TestConfig.full())\n    return case\n\n@pytest.mark.asyncio\nasync def test_task_get_result(test_case):\n    task = await test_case.add_task(\"test\", args=(5,))\n    result = await app.get(uuid=task.uuid)\n    assert result is not None\n\n@pytest.mark.asyncio\nasync def test_task_returns_expected_result(test_case):\n    task = await test_case.add_task(\"test\", args=(5,), timeout=10)\n    assert task.returning == \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c 5 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\"\n\n@pytest.mark.asyncio\nasync def test_task_error_handling(test_case):\n    task = await test_case.add_task(\"error_task\", timeout=10)\n    assert task.status == TaskStatusEnum.ERROR.value\n\n@pytest.mark.asyncio\nasync def test_task_not_found():\n    result = await app.get(uuid=str(uuid4()))\n    assert result is None\n</code></pre>"},{"location":"ru/tests/#_6","title":"\u0417\u0430\u043f\u0443\u0441\u043a","text":"<pre><code>pytest tests/test_async_task.py -v\n</code></pre>"},{"location":"ru/api/exceptions/","title":"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f","text":"<p>Task exceptions.</p> <p>Plugins exceptions.</p>"},{"location":"ru/api/exceptions/#qtasks.exc.task.TaskCancelError","title":"<code>TaskCancelError</code>","text":"<p>               Bases: <code>RuntimeError</code></p> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>\u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0447\u0435\u043d\u043e \u0432 \u0412\u043e\u0440\u043a\u0435\u0440\u0435 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447.</p> Source code in <code>src/qtasks/exc/task.py</code> <pre><code>class TaskCancelError(RuntimeError):\n    \"\"\"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0447\u0435\u043d\u043e \u0432 \u0412\u043e\u0440\u043a\u0435\u0440\u0435 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447.\n    \"\"\"\n\n    def __init__(self, *args):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.\"\"\"\n        super().__init__(*args)\n</code></pre>"},{"location":"ru/api/exceptions/#qtasks.exc.task.TaskCancelError.__init__","title":"<code>__init__(*args)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/exc/task.py</code> <pre><code>def __init__(self, *args):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.\"\"\"\n    super().__init__(*args)\n</code></pre>"},{"location":"ru/api/exceptions/#qtasks.exc.plugins.TaskPluginTriggerError","title":"<code>TaskPluginTriggerError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</p> <p>\u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0447\u0435\u043d\u043e \u0432 \u0412\u043e\u0440\u043a\u0435\u0440\u0435 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432.</p> Source code in <code>src/qtasks/exc/plugins.py</code> <pre><code>class TaskPluginTriggerError(Exception):\n    \"\"\"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n    \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0447\u0435\u043d\u043e \u0432 \u0412\u043e\u0440\u043a\u0435\u0440\u0435 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.\"\"\"\n        super().__init__(*args)\n        self.kwargs = kwargs\n</code></pre>"},{"location":"ru/api/exceptions/#qtasks.exc.plugins.TaskPluginTriggerError.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/exc/plugins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.\"\"\"\n    super().__init__(*args)\n    self.kwargs = kwargs\n</code></pre>"},{"location":"ru/api/logs/","title":"\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.</p>"},{"location":"ru/api/logs/#qtasks.logs.Logger","title":"<code>Logger</code>","text":"<p><code>Logger</code> - \u041a\u043b\u0430\u0441\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u043c\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438.</p>"},{"location":"ru/api/logs/#qtasks.logs.Logger--example","title":"Example","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.logs import Logger\n\nlogger = Logger(name=\"QueueTasks\", subname=\"Global\")\napp = QueueTasks(log=logger)\n\napp.log.debug(\"\u0422\u0435\u0441\u0442\") # asctime [QueueTasks: DEBUG] (QueueTasks) \u0422\u0435\u0441\u0442\n</code></pre> Source code in <code>src/qtasks/logs.py</code> <pre><code>class Logger:\n    \"\"\"\n    `Logger` - \u041a\u043b\u0430\u0441\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u043c\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438.\n\n    ## Example\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.logs import Logger\n\n    logger = Logger(name=\"QueueTasks\", subname=\"Global\")\n    app = QueueTasks(log=logger)\n\n    app.log.debug(\"\u0422\u0435\u0441\u0442\") # asctime [QueueTasks: DEBUG] (QueueTasks) \u0422\u0435\u0441\u0442\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 `%(name)s`.\n                    \"\"\"\n            ),\n        ],\n        subname: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n                    \"\"\"\n            ),\n        ] = None,\n        default_level: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    Level \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `logging.INFO`.\n                    \"\"\"\n            ),\n        ] = logging.INFO,\n        format: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0424\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 Logger.\n\n        Args:\n            name (str): \u0418\u043c\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 `%(name)s`.\n            subname (str, optional): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            default_level (int, optional): Level \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `logging.DEBUG`.\n            format (str, optional): \u0424\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s`.\n        \"\"\"\n        self.name = name\n        self.name = name\n        self.subname = subname or \"-\"\n        self.format = format\n        self.default_level = default_level\n        self.logger = logging.getLogger(name)\n\n        formatter = logging.Formatter(\n            self.format or \"%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s\"\n        )\n\n        if not self.logger.handlers:\n            handler = logging.StreamHandler()\n            handler.setFormatter(formatter)\n            self.logger.addHandler(handler)\n\n        self.logger.setLevel(default_level)\n\n    def critical(self, *args, **kwargs):\n        \"\"\"Critical.\"\"\"\n        self._log(logging.CRITICAL, *args, **kwargs)\n\n    def error(self, *args, **kwargs):\n        \"\"\"Error.\"\"\"\n        self._log(logging.ERROR, *args, **kwargs)\n\n    def warning(self, *args, **kwargs):\n        \"\"\"Warning.\"\"\"\n        self._log(logging.WARNING, *args, **kwargs)\n\n    def info(self, *args, **kwargs):\n        \"\"\"Info.\"\"\"\n        self._log(logging.INFO, *args, **kwargs)\n\n    def debug(self, *args, **kwargs):\n        \"\"\"Debug.\"\"\"\n        self._log(logging.DEBUG, *args, **kwargs)\n\n    def with_subname(\n        self,\n        new_subname: str,\n        default_level: Union[int, None] = None,\n        format: Union[str, None] = None,\n    ) -&gt; \"Logger\":\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c `subname`.\n\n        Args:\n            new_subname (str): \u041d\u043e\u0432\u044b\u0439 `subname`.\n            default_level (int, optional): \u041d\u043e\u0432\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            format (str, optional): \u041d\u043e\u0432\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n\n        Returns:\n            Logger: \u041d\u043e\u0432\u044b\u0439 `Logger`.\n        \"\"\"\n        return Logger(\n            self.name, new_subname, default_level=default_level or self.default_level, format=format or self.format\n        )\n\n    def update_logger(self, **kwargs) -&gt; \"Logger\":\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c `Logger`.\n\n        Args:\n            kwargs (dict): \u041d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Logger: \u041d\u043e\u0432\u044b\u0439 `Logger`.\n        \"\"\"\n        name = kwargs.get(\"name\") or self.name\n        subname = kwargs.get(\"subname\") or self.subname\n        default_level = kwargs.get(\"default_level\") or self.default_level\n        format = kwargs.get(\"format\") or self.format\n        return Logger(\n            name=name, subname=subname, default_level=default_level, format=format\n        )\n\n    def _log(self, level, msg, *args, **kwargs):\n        extra = kwargs.pop(\"extra\", {})\n        if \"subname\" not in extra:\n            extra[\"subname\"] = self.subname\n        self.logger.log(level, msg, *args, extra=extra, **kwargs)\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.__init__","title":"<code>__init__(name, subname=None, default_level=logging.INFO, format=None)</code>","text":"<p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 Logger.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 <code>%(name)s</code>.</p> required <code>subname</code> <code>str</code> <p>\u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>default_level</code> <code>int</code> <p>Level \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>logging.DEBUG</code>.</p> <code>INFO</code> <code>format</code> <code>str</code> <p>\u0424\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s</code>.</p> <code>None</code> Source code in <code>src/qtasks/logs.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 `%(name)s`.\n                \"\"\"\n        ),\n    ],\n    subname: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n                \"\"\"\n        ),\n    ] = None,\n    default_level: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                Level \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `logging.INFO`.\n                \"\"\"\n        ),\n    ] = logging.INFO,\n    format: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0424\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 Logger.\n\n    Args:\n        name (str): \u0418\u043c\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 `%(name)s`.\n        subname (str, optional): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        default_level (int, optional): Level \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `logging.DEBUG`.\n        format (str, optional): \u0424\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s`.\n    \"\"\"\n    self.name = name\n    self.name = name\n    self.subname = subname or \"-\"\n    self.format = format\n    self.default_level = default_level\n    self.logger = logging.getLogger(name)\n\n    formatter = logging.Formatter(\n        self.format or \"%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s\"\n    )\n\n    if not self.logger.handlers:\n        handler = logging.StreamHandler()\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n\n    self.logger.setLevel(default_level)\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.critical","title":"<code>critical(*args, **kwargs)</code>","text":"<p>Critical.</p> Source code in <code>src/qtasks/logs.py</code> <pre><code>def critical(self, *args, **kwargs):\n    \"\"\"Critical.\"\"\"\n    self._log(logging.CRITICAL, *args, **kwargs)\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.debug","title":"<code>debug(*args, **kwargs)</code>","text":"<p>Debug.</p> Source code in <code>src/qtasks/logs.py</code> <pre><code>def debug(self, *args, **kwargs):\n    \"\"\"Debug.\"\"\"\n    self._log(logging.DEBUG, *args, **kwargs)\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.error","title":"<code>error(*args, **kwargs)</code>","text":"<p>Error.</p> Source code in <code>src/qtasks/logs.py</code> <pre><code>def error(self, *args, **kwargs):\n    \"\"\"Error.\"\"\"\n    self._log(logging.ERROR, *args, **kwargs)\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.info","title":"<code>info(*args, **kwargs)</code>","text":"<p>Info.</p> Source code in <code>src/qtasks/logs.py</code> <pre><code>def info(self, *args, **kwargs):\n    \"\"\"Info.\"\"\"\n    self._log(logging.INFO, *args, **kwargs)\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.update_logger","title":"<code>update_logger(**kwargs)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c <code>Logger</code>.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u041d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Logger</code> <code>Logger</code> <p>\u041d\u043e\u0432\u044b\u0439 <code>Logger</code>.</p> Source code in <code>src/qtasks/logs.py</code> <pre><code>def update_logger(self, **kwargs) -&gt; \"Logger\":\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c `Logger`.\n\n    Args:\n        kwargs (dict): \u041d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Logger: \u041d\u043e\u0432\u044b\u0439 `Logger`.\n    \"\"\"\n    name = kwargs.get(\"name\") or self.name\n    subname = kwargs.get(\"subname\") or self.subname\n    default_level = kwargs.get(\"default_level\") or self.default_level\n    format = kwargs.get(\"format\") or self.format\n    return Logger(\n        name=name, subname=subname, default_level=default_level, format=format\n    )\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.warning","title":"<code>warning(*args, **kwargs)</code>","text":"<p>Warning.</p> Source code in <code>src/qtasks/logs.py</code> <pre><code>def warning(self, *args, **kwargs):\n    \"\"\"Warning.\"\"\"\n    self._log(logging.WARNING, *args, **kwargs)\n</code></pre>"},{"location":"ru/api/logs/#qtasks.logs.Logger.with_subname","title":"<code>with_subname(new_subname, default_level=None, format=None)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c <code>subname</code>.</p> <p>Parameters:</p> Name Type Description Default <code>new_subname</code> <code>str</code> <p>\u041d\u043e\u0432\u044b\u0439 <code>subname</code>.</p> required <code>default_level</code> <code>int</code> <p>\u041d\u043e\u0432\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>format</code> <code>str</code> <p>\u041d\u043e\u0432\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Logger</code> <code>Logger</code> <p>\u041d\u043e\u0432\u044b\u0439 <code>Logger</code>.</p> Source code in <code>src/qtasks/logs.py</code> <pre><code>def with_subname(\n    self,\n    new_subname: str,\n    default_level: Union[int, None] = None,\n    format: Union[str, None] = None,\n) -&gt; \"Logger\":\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c `subname`.\n\n    Args:\n        new_subname (str): \u041d\u043e\u0432\u044b\u0439 `subname`.\n        default_level (int, optional): \u041d\u043e\u0432\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        format (str, optional): \u041d\u043e\u0432\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n\n    Returns:\n        Logger: \u041d\u043e\u0432\u044b\u0439 `Logger`.\n    \"\"\"\n    return Logger(\n        self.name, new_subname, default_level=default_level or self.default_level, format=format or self.format\n    )\n</code></pre>"},{"location":"ru/api/queuetasks/","title":"QueueTasks sync","text":"<p>qtasks.py - Main module for the QueueTasks framework.</p>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks","title":"<code>QueueTasks</code>","text":"<p>               Bases: <code>BaseQueueTasks</code>, <code>SyncPluginMixin</code></p> <p><code>QueueTasks</code> - \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.</p> <p>\u0427\u0438\u0442\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435: \u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438.</p>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\n\napp = QueueTasks()\n</code></pre> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>class QueueTasks(BaseQueueTasks, SyncPluginMixin):\n    \"\"\"\n    `QueueTasks` - \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.\n\n    \u0427\u0438\u0442\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435:\n    [\u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438](https://txello.github.io/qtasks/ru/getting_started/).\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n\n    app = QueueTasks()\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438(\u0412\u043e\u0440\u043a\u0435\u0440, \u0411\u0440\u043e\u043a\u0435\u0440 \u0438 \u0442.\u043f.)\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        broker_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.SyncRedisBroker`.\n                    \"\"\"\n            ),\n        ] = None,\n        worker: Annotated[\n            Optional[\"BaseWorker\"],\n            Doc(\n                \"\"\"\n                    \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.SyncWorker`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\n        \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f QueueTasks.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n            broker_url (str, optional): URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            broker (Type[BaseBroker], optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n            worker (Type[BaseWorker], optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(\n            name=name, broker=broker, worker=worker, log=log, config=config, events=events\n        )\n        self._method = \"sync\"\n        self.events = self.events or SyncEvents()\n\n        self.broker: \"BaseBroker\" = broker or SyncRedisBroker(\n            name=name, url=broker_url, log=self.log, config=self.config, events=self.events\n        )\n        self.worker: \"BaseWorker\" = worker or SyncThreadWorker(\n            name=name, broker=self.broker, log=self.log, config=self.config, events=self.events\n        )\n        self.starter: Union[\"BaseStarter\", None] = None\n\n        self._registry_tasks()\n\n        self._set_state()\n\n        self.init_plugins()\n\n    def add_task(\n        self,\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncResult`.\n\n        Returns:\n            Task|None: `schemas.task.Task` \u0438\u043b\u0438 `None`.\n        \"\"\"\n        if priority is None:\n            priority = self.tasks.get(task_name, 0)\n            priority = priority.priority if isinstance(priority, TaskExecSchema) else 0\n\n        args, kwargs = args or (), kwargs or {}\n        extra = None\n\n        new_args = self._plugin_trigger(\n            \"qtasks_add_task_before_broker\",\n            qtasks=self,\n            broker=self.broker,\n            task_name=task_name,\n            priority=priority,\n            args=args,\n            kw=kwargs,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            priority = new_args.get(\"priority\", priority)\n            extra = new_args.get(\"extra\", extra)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n\n        task = self.broker.add(\n            task_name=task_name, priority=priority, extra=extra, args=args, kwargs=kwargs\n        )\n\n        self._plugin_trigger(\n            \"qtasks_add_task_after_broker\",\n            qtasks=self,\n            broker=self.broker,\n            task_name=task_name,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            return_last=True\n        )\n        if timeout is not None:\n            return SyncResult(uuid=task.uuid, app=self, log=self.log).result(\n                timeout=timeout\n            )\n        return task\n\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        result = self.broker.get(uuid=uuid)\n        new_result = self._plugin_trigger(\"qtasks_get\", qtasks=self, broker=self.broker, task=result, return_last=True)\n        if new_result:\n            result = new_result.get(\"task\", result)\n        return result\n\n    def run_forever(\n        self,\n        starter: Annotated[\n            Optional[\"BaseStarter\"],\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0421\u0442\u0430\u0440\u0442\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n\n        Args:\n            starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.SyncStarter`.\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        \"\"\"\n        self.starter = starter or SyncStarter(\n            name=self.name,\n            worker=self.worker,\n            broker=self.broker,\n            log=self.log,\n            config=self.config,\n            events=self.events\n        )\n\n        plugins_hash = {}\n        for plugins in [\n            self.plugins,\n            self.worker.plugins,\n            self.broker.plugins,\n            self.broker.storage.plugins,\n        ]:\n            plugins_hash.update(plugins)\n\n        self._set_state()\n\n        self.starter.start(\n            num_workers=num_workers, reset_config=reset_config, plugins=plugins_hash\n        )\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n        self._plugin_trigger(\"qtasks_stop\", qtasks=self, starter=self.starter)\n        self.starter.stop()\n\n    def ping(self, server: bool = True) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\n\n        Args:\n            server (bool, optional): \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `True`.\n\n        Returns:\n            bool: True - \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442, False - \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\n        \"\"\"\n        self._plugin_trigger(\"qtasks_ping\", qtasks=self, global_config=self.broker.storage.global_config)\n        if server:\n            status = self.broker.storage.global_config.get(\"main\", \"status\")\n            return status is not None\n        return True\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        self._plugin_trigger(\"qtasks_flush_all\", qtasks=self)\n        self.broker.flush_all()\n\n    @overload\n    def task(\n        self,\n        name: Union[str, None] = None,\n        *,\n        priority: Union[int, None] = None,\n        echo: bool = False,\n        max_time: Union[float, None] = None,\n        retry: Union[int, None] = None,\n        retry_on_exc: Union[List[Type[Exception]], None] = None,\n        decode: Union[Callable, None] = None,\n        tags: Union[List[str], None] = None,\n        description: Union[str, None] = None,\n        generate_handler: Union[Callable, None] = None,\n        executor: Union[Type[\"BaseTaskExecutor\"], None] = None,\n        middlewares_before: Union[List[\"TaskMiddleware\"], None] = None,\n        middlewares_after: Union[List[\"TaskMiddleware\"], None] = None,\n        **kwargs\n    ) -&gt; Callable[[Callable[P, R]], SyncTask[P, R]]:\n        \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n            max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n        Raises:\n            ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n            ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n        Returns:\n            SyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        ...\n\n    @overload\n    def task(\n        self,\n        func: Callable[P, R],\n    ) -&gt; SyncTask[P, R]:\n        ...\n\n    def task(self, *args, **kwargs):\n        \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n            max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n        Raises:\n            ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n            ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n        Returns:\n            SyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        return super().task(*args, **kwargs)\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.__init__","title":"<code>__init__(name='QueueTasks', broker_url=None, broker=None, worker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f QueueTasks.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>QueueTasks</code>.</p> <code>'QueueTasks'</code> <code>broker_url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>broker</code> <code>Type[BaseBroker]</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.brokers.AsyncRedisBroker</code>.</p> <code>None</code> <code>worker</code> <code>Type[BaseWorker]</code> <p>\u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.workers.AsyncWorker</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438(\u0412\u043e\u0440\u043a\u0435\u0440, \u0411\u0440\u043e\u043a\u0435\u0440 \u0438 \u0442.\u043f.)\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    broker_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.SyncRedisBroker`.\n                \"\"\"\n        ),\n    ] = None,\n    worker: Annotated[\n        Optional[\"BaseWorker\"],\n        Doc(\n            \"\"\"\n                \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.SyncWorker`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\n    \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f QueueTasks.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n        broker_url (str, optional): URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        broker (Type[BaseBroker], optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n        worker (Type[BaseWorker], optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(\n        name=name, broker=broker, worker=worker, log=log, config=config, events=events\n    )\n    self._method = \"sync\"\n    self.events = self.events or SyncEvents()\n\n    self.broker: \"BaseBroker\" = broker or SyncRedisBroker(\n        name=name, url=broker_url, log=self.log, config=self.config, events=self.events\n    )\n    self.worker: \"BaseWorker\" = worker or SyncThreadWorker(\n        name=name, broker=self.broker, log=self.log, config=self.config, events=self.events\n    )\n    self.starter: Union[\"BaseStarter\", None] = None\n\n    self._registry_tasks()\n\n    self._set_state()\n\n    self.init_plugins()\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.add_task","title":"<code>add_task(*args, task_name, priority=None, timeout=None, **kwargs)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>{}</code>.</p> <code>{}</code> <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>qtasks.results.SyncResult</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: <code>schemas.task.Task</code> \u0438\u043b\u0438 <code>None</code>.</p> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def add_task(\n    self,\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n        kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncResult`.\n\n    Returns:\n        Task|None: `schemas.task.Task` \u0438\u043b\u0438 `None`.\n    \"\"\"\n    if priority is None:\n        priority = self.tasks.get(task_name, 0)\n        priority = priority.priority if isinstance(priority, TaskExecSchema) else 0\n\n    args, kwargs = args or (), kwargs or {}\n    extra = None\n\n    new_args = self._plugin_trigger(\n        \"qtasks_add_task_before_broker\",\n        qtasks=self,\n        broker=self.broker,\n        task_name=task_name,\n        priority=priority,\n        args=args,\n        kw=kwargs,\n        return_last=True\n    )\n    if new_args:\n        task_name = new_args.get(\"task_name\", task_name)\n        priority = new_args.get(\"priority\", priority)\n        extra = new_args.get(\"extra\", extra)\n        args = new_args.get(\"args\", args)\n        kwargs = new_args.get(\"kw\", kwargs)\n\n    task = self.broker.add(\n        task_name=task_name, priority=priority, extra=extra, args=args, kwargs=kwargs\n    )\n\n    self._plugin_trigger(\n        \"qtasks_add_task_after_broker\",\n        qtasks=self,\n        broker=self.broker,\n        task_name=task_name,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        return_last=True\n    )\n    if timeout is not None:\n        return SyncResult(uuid=task.uuid, app=self, log=self.log).result(\n            timeout=timeout\n        )\n    return task\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    self._plugin_trigger(\"qtasks_flush_all\", qtasks=self)\n    self.broker.flush_all()\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.get","title":"<code>get(uuid)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0417\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    result = self.broker.get(uuid=uuid)\n    new_result = self._plugin_trigger(\"qtasks_get\", qtasks=self, broker=self.broker, task=result, return_last=True)\n    if new_result:\n        result = new_result.get(\"task\", result)\n    return result\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.ping","title":"<code>ping(server=True)</code>","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>bool</code> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>True</code>.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True - \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442, False - \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.</p> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def ping(self, server: bool = True) -&gt; bool:\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\n\n    Args:\n        server (bool, optional): \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `True`.\n\n    Returns:\n        bool: True - \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442, False - \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\n    \"\"\"\n    self._plugin_trigger(\"qtasks_ping\", qtasks=self, global_config=self.broker.storage.global_config)\n    if server:\n        status = self.broker.storage.global_config.get(\"main\", \"status\")\n        return status is not None\n    return True\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.run_forever","title":"<code>run_forever(starter=None, num_workers=4, reset_config=True)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>starter</code> <code>BaseStarter</code> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.starters.SyncStarter</code>.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def run_forever(\n    self,\n    starter: Annotated[\n        Optional[\"BaseStarter\"],\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0421\u0442\u0430\u0440\u0442\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n\n    Args:\n        starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.SyncStarter`.\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n    \"\"\"\n    self.starter = starter or SyncStarter(\n        name=self.name,\n        worker=self.worker,\n        broker=self.broker,\n        log=self.log,\n        config=self.config,\n        events=self.events\n    )\n\n    plugins_hash = {}\n    for plugins in [\n        self.plugins,\n        self.worker.plugins,\n        self.broker.plugins,\n        self.broker.storage.plugins,\n    ]:\n        plugins_hash.update(plugins)\n\n    self._set_state()\n\n    self.starter.start(\n        num_workers=num_workers, reset_config=reset_config, plugins=plugins_hash\n    )\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n    self._plugin_trigger(\"qtasks_stop\", qtasks=self, starter=self.starter)\n    self.starter.stop()\n</code></pre>"},{"location":"ru/api/queuetasks/#qtasks.qtasks.QueueTasks.task","title":"<code>task(*args, **kwargs)</code>","text":"<pre><code>task(name: Union[str, None] = None, *, priority: Union[int, None] = None, echo: bool = False, max_time: Union[float, None] = None, retry: Union[int, None] = None, retry_on_exc: Union[List[Type[Exception]], None] = None, decode: Union[Callable, None] = None, tags: Union[List[str], None] = None, description: Union[str, None] = None, generate_handler: Union[Callable, None] = None, executor: Union[Type[BaseTaskExecutor], None] = None, middlewares_before: Union[List[TaskMiddleware], None] = None, middlewares_after: Union[List[TaskMiddleware], None] = None, **kwargs) -&gt; Callable[[Callable[P, R]], SyncTask[P, R]]\n</code></pre><pre><code>task(func: Callable[P, R]) -&gt; SyncTask[P, R]\n</code></pre> <p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>func.__name__</code>.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>config.default_task_priority</code>.</p> required <code>max_time</code> <code>float</code> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>echo</code> <code>bool</code> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> required <code>retry</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>retry_on_exc</code> <code>List[Type[Exception]]</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>decode</code> <code>Callable</code> <p>\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>tags</code> <code>List[str]</code> <p>\u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>description</code> <code>str</code> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>generate_handler</code> <code>Callable</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>executor</code> <code>Type[BaseTaskExecutor]</code> <p>\u041a\u043b\u0430\u0441\u0441 <code>BaseTaskExecutor</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>SyncTaskExecutor</code>.</p> required <code>middlewares_before</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> required <code>middlewares_after</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.</p> <code>ValueError</code> <p>\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.</p> <p>Returns:</p> Name Type Description <code>SyncTask</code> <p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/qtasks.py</code> <pre><code>def task(self, *args, **kwargs):\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n        max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n        retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n        middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n    Raises:\n        ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n        ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n    Returns:\n        SyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    return super().task(*args, **kwargs)\n</code></pre>"},{"location":"ru/api/router/","title":"\u0420\u043e\u0443\u0442\u0435\u0440","text":"<p>Router for task execution.</p>"},{"location":"ru/api/router/#qtasks.routers.router.Router","title":"<code>Router</code>","text":"<p>               Bases: <code>SyncPluginMixin</code></p> <p>\u0420\u043e\u0443\u0442\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a \u0441\u0435\u0431\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 <code>QueueTasks</code>.</p>"},{"location":"ru/api/router/#qtasks.routers.router.Router--example","title":"Example","text":"<pre><code>from qtasks import QueueTasks, Router\n\napp = QueueTasks()\n\nrouter = Router()\n\n@router.task()\nasync def test():\n    pass\n\napp.include_router(router)\n</code></pre> Source code in <code>src/qtasks/routers/router.py</code> <pre><code>class Router(SyncPluginMixin):\n    \"\"\"\n    \u0420\u043e\u0443\u0442\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a \u0441\u0435\u0431\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 `QueueTasks`.\n\n    ## Example\n\n    ```python\n    from qtasks import QueueTasks, Router\n\n    app = QueueTasks()\n\n    router = Router()\n\n    @router.task()\n    async def test():\n        pass\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    @overload\n    def __init__(self, method: Literal[\"sync\"] = None) -&gt; None:\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.\"\"\"\n        ...\n\n    @overload\n    def __init__(self, method: Literal[\"async\"] = None) -&gt; None:\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.\"\"\"\n        ...\n\n    def __init__(self, method: Literal[\"sync\", \"async\"] = None):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u0430.\n\n        Args:\n            method (Literal[\"sync\", \"async\"], optional): \u041c\u0435\u0442\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self._method = method\n        self.tasks: Annotated[\n            Dict[str, TaskExecSchema],\n            Doc(\n                \"\"\"\n                \u0417\u0430\u0434\u0430\u0447\u0438, \u0442\u0438\u043f `{task_name:qtasks.schemas.TaskExecSchema}`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n                \"\"\"\n            ),\n        ] = {}\n\n        self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n    def task(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                    \"\"\"\n            ),\n        ] = None,\n        *,\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                    \"\"\"\n            ),\n        ] = None,\n        echo: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                    \"\"\"\n            ),\n        ] = False,\n        max_time: Annotated[\n            Union[float, None],\n            Doc(\n                \"\"\"\n                    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            )\n        ] = None,\n        retry: Annotated[\n            Union[int, None],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        retry_on_exc: Annotated[\n            Union[List[Type[Exception]], None],\n            Doc(\n                \"\"\"\n                    \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        decode: Annotated[\n            Union[Callable, None],\n            Doc(\n                \"\"\"\n                    \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        tags: Annotated[\n            Union[List[str], None],\n            Doc(\n                \"\"\"\n                    \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        description: Annotated[\n            Union[str, None],\n            Doc(\n                \"\"\"\n                    \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        generate_handler: Annotated[\n            Union[Callable, None],\n            Doc(\n                \"\"\"\n                    \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        executor: Annotated[\n            Type[\"BaseTaskExecutor\"],\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_before: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_after: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs\n    ) -&gt; Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]:\n        \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n        Raises:\n            ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n            ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n        Returns:\n            SyncTask | AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n\n        def wrapper(func):\n            nonlocal priority, middlewares_before, middlewares_after\n\n            task_name = name or func.__name__\n            if task_name in self.tasks:\n                raise ValueError(f\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c {task_name} \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430!\")\n\n            if priority is None:\n                priority = 0\n\n            generating = False\n            if inspect.isgeneratorfunction(func):\n                generating = \"sync\"\n            if inspect.isasyncgenfunction(func):\n                generating = \"async\"\n\n            middlewares_before = middlewares_before or []\n            middlewares_after = middlewares_after or []\n\n            model = TaskExecSchema(\n                name=task_name,\n                priority=priority,\n                func=func,\n                awaiting=inspect.iscoroutinefunction(func),\n                generating=generating,\n                echo=echo,\n                max_time=max_time,\n                retry=retry,\n                retry_on_exc=retry_on_exc,\n                decode=decode,\n                tags=tags,\n                description=description,\n                generate_handler=generate_handler,\n                executor=executor,\n                middlewares_before=middlewares_before,\n                middlewares_after=middlewares_after,\n                extra=kwargs\n            )\n\n            self.tasks[task_name] = model\n            if self._method not in [\"async\", \"sync\"]:\n                raise ValueError(f\"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}\")\n\n            method = AsyncTask if self._method == \"async\" else SyncTask\n            return method(\n                app=self,\n                task_name=model.name,\n                priority=model.priority,\n                echo=model.echo,\n                max_time=model.max_time,\n                retry=model.retry,\n                retry_on_exc=model.retry_on_exc,\n                decode=model.decode,\n                tags=model.tags,\n                description=model.description,\n                generate_handler=model.generate_handler,\n                executor=model.executor,\n                middlewares_before=model.middlewares_before,\n                middlewares_after=model.middlewares_after,\n            )\n\n        return wrapper\n</code></pre>"},{"location":"ru/api/router/#qtasks.routers.router.Router.__init__","title":"<code>__init__(method=None)</code>","text":"<pre><code>__init__(method: Literal['sync'] = None) -&gt; None\n</code></pre><pre><code>__init__(method: Literal['async'] = None) -&gt; None\n</code></pre> <p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>Literal['sync', 'async']</code> <p>\u041c\u0435\u0442\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/routers/router.py</code> <pre><code>def __init__(self, method: Literal[\"sync\", \"async\"] = None):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u0430.\n\n    Args:\n        method (Literal[\"sync\", \"async\"], optional): \u041c\u0435\u0442\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self._method = method\n    self.tasks: Annotated[\n        Dict[str, TaskExecSchema],\n        Doc(\n            \"\"\"\n            \u0417\u0430\u0434\u0430\u0447\u0438, \u0442\u0438\u043f `{task_name:qtasks.schemas.TaskExecSchema}`.\n\n            \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n            \"\"\"\n        ),\n    ] = {}\n\n    self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n</code></pre>"},{"location":"ru/api/router/#qtasks.routers.router.Router.task","title":"<code>task(name=None, *, priority=None, echo=False, max_time=None, retry=None, retry_on_exc=None, decode=None, tags=None, description=None, generate_handler=None, executor=None, middlewares_before=None, middlewares_after=None, **kwargs)</code>","text":"<p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>func.__name__</code>.</p> <code>None</code> <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>config.default_task_priority</code>.</p> <code>None</code> <code>echo</code> <code>bool</code> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> <code>False</code> <code>max_time</code> <code>float</code> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>retry</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>retry_on_exc</code> <code>List[Type[Exception]]</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>decode</code> <code>Callable</code> <p>\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>tags</code> <code>List[str]</code> <p>\u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>description</code> <code>str</code> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>generate_handler</code> <code>Callable</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>executor</code> <code>Type[BaseTaskExecutor]</code> <p>\u041a\u043b\u0430\u0441\u0441 <code>BaseTaskExecutor</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>SyncTaskExecutor</code>.</p> <code>None</code> <code>middlewares_before</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <code>middlewares_after</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.</p> <code>ValueError</code> <p>\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.</p> <p>Returns:</p> Type Description <code>Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]</code> <p>SyncTask | AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/routers/router.py</code> <pre><code>def task(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                \"\"\"\n        ),\n    ] = None,\n    *,\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                \"\"\"\n        ),\n    ] = None,\n    echo: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                \"\"\"\n        ),\n    ] = False,\n    max_time: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n                \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        )\n    ] = None,\n    retry: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    retry_on_exc: Annotated[\n        Union[List[Type[Exception]], None],\n        Doc(\n            \"\"\"\n                \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    decode: Annotated[\n        Union[Callable, None],\n        Doc(\n            \"\"\"\n                \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    tags: Annotated[\n        Union[List[str], None],\n        Doc(\n            \"\"\"\n                \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    description: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n                \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    generate_handler: Annotated[\n        Union[Callable, None],\n        Doc(\n            \"\"\"\n                \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    executor: Annotated[\n        Type[\"BaseTaskExecutor\"],\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_before: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_after: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs\n) -&gt; Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]:\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n        echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n        max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n        middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n    Raises:\n        ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n        ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n    Returns:\n        SyncTask | AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n\n    def wrapper(func):\n        nonlocal priority, middlewares_before, middlewares_after\n\n        task_name = name or func.__name__\n        if task_name in self.tasks:\n            raise ValueError(f\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c {task_name} \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430!\")\n\n        if priority is None:\n            priority = 0\n\n        generating = False\n        if inspect.isgeneratorfunction(func):\n            generating = \"sync\"\n        if inspect.isasyncgenfunction(func):\n            generating = \"async\"\n\n        middlewares_before = middlewares_before or []\n        middlewares_after = middlewares_after or []\n\n        model = TaskExecSchema(\n            name=task_name,\n            priority=priority,\n            func=func,\n            awaiting=inspect.iscoroutinefunction(func),\n            generating=generating,\n            echo=echo,\n            max_time=max_time,\n            retry=retry,\n            retry_on_exc=retry_on_exc,\n            decode=decode,\n            tags=tags,\n            description=description,\n            generate_handler=generate_handler,\n            executor=executor,\n            middlewares_before=middlewares_before,\n            middlewares_after=middlewares_after,\n            extra=kwargs\n        )\n\n        self.tasks[task_name] = model\n        if self._method not in [\"async\", \"sync\"]:\n            raise ValueError(f\"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}\")\n\n        method = AsyncTask if self._method == \"async\" else SyncTask\n        return method(\n            app=self,\n            task_name=model.name,\n            priority=model.priority,\n            echo=model.echo,\n            max_time=model.max_time,\n            retry=model.retry,\n            retry_on_exc=model.retry_on_exc,\n            decode=model.decode,\n            tags=model.tags,\n            description=model.description,\n            generate_handler=model.generate_handler,\n            executor=model.executor,\n            middlewares_before=model.middlewares_before,\n            middlewares_after=model.middlewares_after,\n        )\n\n    return wrapper\n</code></pre>"},{"location":"ru/api/states/","title":"\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","text":""},{"location":"ru/api/states/#qtasks._state.app_main","title":"<code>app_main = None</code>  <code>module-attribute</code>","text":"<p><code>app_main</code> - \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 <code>QueueTasks</code>.</p> <p>\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>QueueTasks</code> \u0438/\u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u0437\u043e\u0432\u043e\u043c <code>self.starter.start()</code> \u0432\u043d\u0443\u0442\u0440\u0438 <code>app.run_forever()</code>.</p>"},{"location":"ru/api/states/#qtasks._state.log_main","title":"<code>log_main = Logger(name='QueueTasks', subname='_state')</code>  <code>module-attribute</code>","text":"<p><code>log_main</code> - \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f <code>Logger</code>. \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <code>QueueTasks</code>.</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: Logger(name=\"QueueTasks\", subname=\"_state\")</p>"},{"location":"ru/api/webview/","title":"\u0412 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435","text":""},{"location":"ru/api/asyncio/queuetasks/","title":"QueueTasks async","text":"<p>qtasks.py - Main asyncio module for the QueueTasks framework.</p>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks","title":"<code>QueueTasks</code>","text":"<p>               Bases: <code>BaseQueueTasks</code>, <code>AsyncPluginMixin</code></p> <p><code>QueueTasks</code> - \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.</p> <p>\u0427\u0438\u0442\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435: \u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438.</p>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\n\napp = QueueTasks()\n</code></pre> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>class QueueTasks(BaseQueueTasks, AsyncPluginMixin):\n    \"\"\"\n    `QueueTasks` - \u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.\n\n    \u0427\u0438\u0442\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435:\n    [\u041f\u0435\u0440\u0432\u044b\u0435 \u0448\u0430\u0433\u0438](https://txello.github.io/qtasks/ru/getting_started/).\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n\n    app = QueueTasks()\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438(\u0412\u043e\u0440\u043a\u0435\u0440, \u0411\u0440\u043e\u043a\u0435\u0440 \u0438 \u0442.\u043f.)\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        broker_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n                    \"\"\"\n            ),\n        ] = None,\n        worker: Annotated[\n            Optional[\"BaseWorker\"],\n            Doc(\n                \"\"\"\n                    \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\n        \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f QueueTasks.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n            broker_url (str, optional): URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            broker (Type[BaseBroker], optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n            worker (Type[BaseWorker], optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(\n            name=name, broker=broker, worker=worker, log=log, config=config, events=events\n        )\n        self._method = \"async\"\n        self.events = self.events or AsyncEvents()\n\n        self.broker: \"BaseBroker\" = self.broker or AsyncRedisBroker(\n            name=name, url=broker_url, log=self.log, config=self.config, events=self.events\n        )\n        self.worker: \"BaseWorker\" = self.worker or AsyncWorker(\n            name=name, broker=self.broker, log=self.log, config=self.config, events=self.events\n        )\n        self.starter: Union[\"BaseStarter\", None] = None\n\n        self._global_loop: Annotated[\n            Optional[asyncio.AbstractEventLoop],\n            Doc(\n                \"\"\"\n                \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            ),\n        ] = None\n\n        self._registry_tasks()\n\n        self._set_state()\n\n        self.init_plugins()\n\n    async def add_task(\n        self,\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncResult`.\n\n        Returns:\n            Task|None: `schemas.task.Task` \u0438\u043b\u0438 `None`.\n        \"\"\"\n        if priority is None:\n            priority = self.tasks.get(task_name, 0)\n            priority = priority.priority if isinstance(priority, TaskExecSchema) else 0\n\n        args, kwargs = args or (), kwargs or {}\n        extra = None\n\n        new_args = await self._plugin_trigger(\n            \"qtasks_add_task_before_broker\",\n            qtasks=self,\n            broker=self.broker,\n            task_name=task_name,\n            priority=priority,\n            args=args,\n            kw=kwargs,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            priority = new_args.get(\"priority\", priority)\n            extra = new_args.get(\"extra\", extra)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n\n        task = await self.broker.add(\n            task_name=task_name, priority=priority, extra=extra, args=args, kwargs=kwargs\n        )\n\n        await self._plugin_trigger(\n            \"qtasks_add_task_after_broker\",\n            qtasks=self,\n            broker=self.broker,\n            task_name=task_name,\n            priority=priority,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if timeout is not None:\n            return await AsyncResult(uuid=task.uuid, app=self, log=self.log).result(\n                timeout=timeout\n            )\n        return task\n\n    async def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n\n        result = await self.broker.get(uuid=uuid)\n        new_result = await self._plugin_trigger(\"qtasks_get\", qtasks=self, broker=self.broker, task=result, return_last=True)\n        if new_result:\n            result = new_result.get(\"task\", result)\n        return result\n\n    def run_forever(\n        self,\n        loop: Annotated[\n            Optional[asyncio.AbstractEventLoop],\n            Doc(\n                \"\"\"\n                    \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        starter: Annotated[\n            Optional[\"BaseStarter\"],\n            Doc(\n                \"\"\"\n                    \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                    \"\"\"\n            ),\n        ] = None,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n\n        Args:\n            loop (asyncio.AbstractEventLoop, optional): \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        \"\"\"\n        self.starter = starter or AsyncStarter(\n            name=self.name,\n            worker=self.worker,\n            broker=self.broker,\n            log=self.log,\n            config=self.config,\n            events=self.events\n        )\n\n        plugins_hash = {}\n        for plugins in [\n            self.plugins,\n            self.worker.plugins,\n            self.broker.plugins,\n            self.broker.storage.plugins,\n        ]:\n            plugins_hash.update(plugins)\n\n        self._set_state()\n\n        self.starter.start(\n            loop=loop,\n            num_workers=num_workers,\n            reset_config=reset_config,\n            plugins=plugins_hash,\n        )\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n        await self._plugin_trigger(\"qtasks_stop\", qtasks=self, starter=self.starter)\n        await self.starter.stop()\n\n    async def ping(self, server: bool = True) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\n\n        Args:\n            server (bool, optional): \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `True`.\n\n        Returns:\n            bool: True - \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442, False - \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\n        \"\"\"\n        await self._plugin_trigger(\"qtasks_ping\", qtasks=self, global_config=self.broker.storage.global_config)\n        if server:\n            loop = asyncio.get_running_loop()\n            asyncio_atexit.register(self.broker.storage.global_config.stop, loop=loop)\n\n            status = await self.broker.storage.global_config.get(\"main\", \"status\")\n            return status is not None\n        return True\n\n    async def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        await self._plugin_trigger(\"qtasks_flush_all\", qtasks=self, broker=self.broker)\n        await self.broker.flush_all()\n\n    @overload\n    def task(\n        self,\n        name: Union[str, None] = None,\n        *,\n        priority: Union[int, None] = None,\n        echo: bool = False,\n        max_time: Union[float, None] = None,\n        retry: Union[int, None] = None,\n        retry_on_exc: Union[List[Type[Exception]], None] = None,\n        decode: Union[Callable, None] = None,\n        tags: Union[List[str], None] = None,\n        description: Union[str, None] = None,\n        generate_handler: Union[Callable, None] = None,\n        executor: Union[Type[\"BaseTaskExecutor\"], None] = None,\n        middlewares_before: Union[List[\"TaskMiddleware\"], None] = None,\n        middlewares_after: Union[List[\"TaskMiddleware\"], None] = None,\n        **kwargs\n    ) -&gt; Callable[[Callable[P, R]], AsyncTask[P, R]]:\n        \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n        Raises:\n            ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n            ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n        Returns:\n            AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        ...\n\n    @overload\n    def task(\n        self,\n        func: Callable[P, R],\n    ) -&gt; AsyncTask[P, R]:\n        ...\n\n    def task(self, *args, **kwargs):\n        \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n        Raises:\n            ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n            ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n        Returns:\n            AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        return super().task(*args, **kwargs)\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.__init__","title":"<code>__init__(name='QueueTasks', broker_url=None, broker=None, worker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f QueueTasks.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>QueueTasks</code>.</p> <code>'QueueTasks'</code> <code>broker_url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>broker</code> <code>Type[BaseBroker]</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.brokers.AsyncRedisBroker</code>.</p> <code>None</code> <code>worker</code> <code>Type[BaseWorker]</code> <p>\u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.workers.AsyncWorker</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438(\u0412\u043e\u0440\u043a\u0435\u0440, \u0411\u0440\u043e\u043a\u0435\u0440 \u0438 \u0442.\u043f.)\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    broker_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n                \"\"\"\n        ),\n    ] = None,\n    worker: Annotated[\n        Optional[\"BaseWorker\"],\n        Doc(\n            \"\"\"\n                \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\n    \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f QueueTasks.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n        broker_url (str, optional): URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        broker (Type[BaseBroker], optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n        worker (Type[BaseWorker], optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(\n        name=name, broker=broker, worker=worker, log=log, config=config, events=events\n    )\n    self._method = \"async\"\n    self.events = self.events or AsyncEvents()\n\n    self.broker: \"BaseBroker\" = self.broker or AsyncRedisBroker(\n        name=name, url=broker_url, log=self.log, config=self.config, events=self.events\n    )\n    self.worker: \"BaseWorker\" = self.worker or AsyncWorker(\n        name=name, broker=self.broker, log=self.log, config=self.config, events=self.events\n    )\n    self.starter: Union[\"BaseStarter\", None] = None\n\n    self._global_loop: Annotated[\n        Optional[asyncio.AbstractEventLoop],\n        Doc(\n            \"\"\"\n            \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d.\n\n            \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        ),\n    ] = None\n\n    self._registry_tasks()\n\n    self._set_state()\n\n    self.init_plugins()\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.add_task","title":"<code>add_task(*args, task_name, priority=None, timeout=None, **kwargs)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>{}</code>.</p> <code>{}</code> <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>qtasks.results.AsyncResult</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: <code>schemas.task.Task</code> \u0438\u043b\u0438 <code>None</code>.</p> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>async def add_task(\n    self,\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n        kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncResult`.\n\n    Returns:\n        Task|None: `schemas.task.Task` \u0438\u043b\u0438 `None`.\n    \"\"\"\n    if priority is None:\n        priority = self.tasks.get(task_name, 0)\n        priority = priority.priority if isinstance(priority, TaskExecSchema) else 0\n\n    args, kwargs = args or (), kwargs or {}\n    extra = None\n\n    new_args = await self._plugin_trigger(\n        \"qtasks_add_task_before_broker\",\n        qtasks=self,\n        broker=self.broker,\n        task_name=task_name,\n        priority=priority,\n        args=args,\n        kw=kwargs,\n        return_last=True\n    )\n    if new_args:\n        task_name = new_args.get(\"task_name\", task_name)\n        priority = new_args.get(\"priority\", priority)\n        extra = new_args.get(\"extra\", extra)\n        args = new_args.get(\"args\", args)\n        kwargs = new_args.get(\"kw\", kwargs)\n\n    task = await self.broker.add(\n        task_name=task_name, priority=priority, extra=extra, args=args, kwargs=kwargs\n    )\n\n    await self._plugin_trigger(\n        \"qtasks_add_task_after_broker\",\n        qtasks=self,\n        broker=self.broker,\n        task_name=task_name,\n        priority=priority,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if timeout is not None:\n        return await AsyncResult(uuid=task.uuid, app=self, log=self.log).result(\n            timeout=timeout\n        )\n    return task\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.flush_all","title":"<code>flush_all()</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>async def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    await self._plugin_trigger(\"qtasks_flush_all\", qtasks=self, broker=self.broker)\n    await self.broker.flush_all()\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.get","title":"<code>get(uuid)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0417\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>async def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n\n    result = await self.broker.get(uuid=uuid)\n    new_result = await self._plugin_trigger(\"qtasks_get\", qtasks=self, broker=self.broker, task=result, return_last=True)\n    if new_result:\n        result = new_result.get(\"task\", result)\n    return result\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.ping","title":"<code>ping(server=True)</code>  <code>async</code>","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>bool</code> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>True</code>.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True - \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442, False - \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.</p> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>async def ping(self, server: bool = True) -&gt; bool:\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\n\n    Args:\n        server (bool, optional): \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `True`.\n\n    Returns:\n        bool: True - \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442, False - \u041d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\n    \"\"\"\n    await self._plugin_trigger(\"qtasks_ping\", qtasks=self, global_config=self.broker.storage.global_config)\n    if server:\n        loop = asyncio.get_running_loop()\n        asyncio_atexit.register(self.broker.storage.global_config.stop, loop=loop)\n\n        status = await self.broker.storage.global_config.get(\"main\", \"status\")\n        return status is not None\n    return True\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.run_forever","title":"<code>run_forever(loop=None, starter=None, num_workers=4, reset_config=True)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>loop</code> <code>AbstractEventLoop</code> <p>\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>starter</code> <code>BaseStarter</code> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.starters.AsyncStarter</code>.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>def run_forever(\n    self,\n    loop: Annotated[\n        Optional[asyncio.AbstractEventLoop],\n        Doc(\n            \"\"\"\n                \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    starter: Annotated[\n        Optional[\"BaseStarter\"],\n        Doc(\n            \"\"\"\n                \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                \"\"\"\n        ),\n    ] = None,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n\n    Args:\n        loop (asyncio.AbstractEventLoop, optional): \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n    \"\"\"\n    self.starter = starter or AsyncStarter(\n        name=self.name,\n        worker=self.worker,\n        broker=self.broker,\n        log=self.log,\n        config=self.config,\n        events=self.events\n    )\n\n    plugins_hash = {}\n    for plugins in [\n        self.plugins,\n        self.worker.plugins,\n        self.broker.plugins,\n        self.broker.storage.plugins,\n    ]:\n        plugins_hash.update(plugins)\n\n    self._set_state()\n\n    self.starter.start(\n        loop=loop,\n        num_workers=num_workers,\n        reset_config=reset_config,\n        plugins=plugins_hash,\n    )\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n    await self._plugin_trigger(\"qtasks_stop\", qtasks=self, starter=self.starter)\n    await self.starter.stop()\n</code></pre>"},{"location":"ru/api/asyncio/queuetasks/#qtasks.asyncio.qtasks.QueueTasks.task","title":"<code>task(*args, **kwargs)</code>","text":"<pre><code>task(name: Union[str, None] = None, *, priority: Union[int, None] = None, echo: bool = False, max_time: Union[float, None] = None, retry: Union[int, None] = None, retry_on_exc: Union[List[Type[Exception]], None] = None, decode: Union[Callable, None] = None, tags: Union[List[str], None] = None, description: Union[str, None] = None, generate_handler: Union[Callable, None] = None, executor: Union[Type[BaseTaskExecutor], None] = None, middlewares_before: Union[List[TaskMiddleware], None] = None, middlewares_after: Union[List[TaskMiddleware], None] = None, **kwargs) -&gt; Callable[[Callable[P, R]], AsyncTask[P, R]]\n</code></pre><pre><code>task(func: Callable[P, R]) -&gt; AsyncTask[P, R]\n</code></pre> <p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>func.__name__</code>.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>config.default_task_priority</code>.</p> required <code>echo</code> <code>bool</code> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> required <code>max_time</code> <code>float</code> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>retry</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>retry_on_exc</code> <code>List[Type[Exception]]</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>decode</code> <code>Callable</code> <p>\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>tags</code> <code>List[str]</code> <p>\u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>description</code> <code>str</code> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>generate_handler</code> <code>Callable</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>executor</code> <code>Type[BaseTaskExecutor]</code> <p>\u041a\u043b\u0430\u0441\u0441 <code>BaseTaskExecutor</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>SyncTaskExecutor</code>.</p> required <code>middlewares_before</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> required <code>middlewares_after</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>\u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.</p> <code>ValueError</code> <p>\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.</p> <p>Returns:</p> Name Type Description <code>AsyncTask</code> <p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/asyncio/qtasks.py</code> <pre><code>def task(self, *args, **kwargs):\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n        echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n        max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n        middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n    Raises:\n        ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n        ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n    Returns:\n        AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    return super().task(*args, **kwargs)\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/","title":"AsyncKafkaBroker","text":"<p>Async Kafka Broker.</p>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker","title":"<code>AsyncKafkaBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>AsyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Kafka \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks.asyncio import QueueTasks\nfrom qtasks.brokers import AsyncKafkaBroker\n\nbroker = AsyncKafkaBroker(name=\"QueueTasks\", url=\"localhost:9092\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>class AsyncKafkaBroker(BaseBroker, AsyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Kafka \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks.asyncio import QueueTasks\n    from qtasks.brokers import AsyncKafkaBroker\n\n    broker = AsyncKafkaBroker(name=\"QueueTasks\", url=\"localhost:9092\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `localhost:9092`.\n                    \"\"\"\n            ),\n        ] = None,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        topic: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0422\u043e\u043f\u0438\u043a Kafka.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                    \"\"\"\n            ),\n        ] = \"task_queue\",\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncKafkaBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            topic (str, optional): \u0422\u043e\u043f\u0438\u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"localhost:9092\"\n        self.topic = f\"{self.name}_{topic}\"\n        self.events = self.events or AsyncEvents()\n\n        self.consumer = AIOKafkaConsumer(\n            self.topic,\n            loop=asyncio.get_event_loop(),\n            bootstrap_servers=self.url,\n            group_id=f\"{self.name}_group\",\n            auto_offset_reset=\"earliest\",\n            enable_auto_commit=True,\n            value_deserializer=lambda m: m.decode(\"utf-8\"),\n        )\n        self.producer = AIOKafkaProducer(\n            loop=asyncio.get_event_loop(),\n            bootstrap_servers=self.url,\n            auto_offset_reset=\"earliest\",\n            enable_auto_commit=True,\n            value_deserializer=lambda m: m.decode(\"utf-8\"),\n        )\n\n        self.storage = storage or SyncRedisStorage(\n            name=self.name, log=self.log, config=config\n        )\n\n        self.running = False\n\n    async def listen(self, worker: \"BaseWorker\"):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 Kafka \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        await self._consumer_start()\n        self.running = True\n        try:\n            async for msg in self.consumer:\n                task_data = msg.value\n                task_name, uuid, priority = task_data.split(\":\")\n                model_get = await self.get(uuid=uuid)\n                args, kwargs, created_at = (\n                    model_get.args or (),\n                    model_get.kwargs or {},\n                    model_get.created_at.timestamp(),\n                )\n                self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n                new_args = await self._plugin_trigger(\n                    \"broker_add_worker\",\n                    broker=self,\n                    worker=worker,\n\n                    task_name=task_name,\n                    uuid=uuid,\n                    priority=int(priority),\n                    args=args,\n                    kw=kwargs,\n                    created_at=created_at,\n                    return_last=True\n                )\n                if new_args:\n                    task_name = new_args.get(\"task_name\", task_name)\n                    uuid = new_args.get(\"uuid\", uuid)\n                    priority = new_args.get(\"priority\", priority)\n                    args = new_args.get(\"args\", args)\n                    kwargs = new_args.get(\"kw\", kwargs)\n                    created_at = new_args.get(\"created_at\", created_at)\n\n                await worker.add(\n                    name=task_name,\n                    uuid=uuid,\n                    priority=int(priority),\n                    args=args,\n                    kwargs=kwargs,\n                    created_at=created_at,\n                )\n        finally:\n            await self.consumer.stop()\n\n    async def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        args, kwargs = args or (), kwargs or {}\n\n        uuid = str(uuid4())\n        created_at = time()\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = await self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        await self.storage.add(uuid=uuid, task_status=model)\n\n        task_data = f\"{task_name}:{uuid}:{priority}\"\n        await self._producer_start()\n        await self.producer.send_and_wait(self.topic, task_data)\n        await self.producer.stop()\n\n        await self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    async def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = await self.storage.get(uuid=uuid)\n        new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    async def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return await self.storage.update(**kwargs)\n\n    async def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        await self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            await self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            await self.storage._running_older_tasks(worker)\n\n        await self.listen(worker)\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        await self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n        await self.consumer.stop()\n        await self.producer.stop()\n\n    async def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = await self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        await self.storage.remove_finished_task(task_broker, model)\n\n    async def _running_older_tasks(self, worker):\n        await self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return await self.storage._running_older_tasks(worker)\n\n    async def _consumer_start(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 Kafka Consumer.\"\"\"\n        loop = asyncio.get_running_loop()\n        self.consumer = AIOKafkaConsumer(\n            self.topic, bootstrap_servers=self.url, loop=loop\n        )\n        await self.consumer.start()\n\n    async def _producer_start(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 Kafka Producer.\"\"\"\n        loop = asyncio.get_running_loop()\n        self.producer = AIOKafkaProducer(\n            bootstrap_servers=self.url,\n            loop=loop,\n        )\n        await self.producer.start()\n\n    async def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        await self._plugin_trigger(\"broker_flush_all\", broker=self)\n        await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, storage=None, topic='task_queue', log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncKafkaBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>topic</code> <code>str</code> <p>\u0422\u043e\u043f\u0438\u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".</p> <code>'task_queue'</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `localhost:9092`.\n                \"\"\"\n        ),\n    ] = None,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    topic: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0422\u043e\u043f\u0438\u043a Kafka.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                \"\"\"\n        ),\n    ] = \"task_queue\",\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncKafkaBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        topic (str, optional): \u0422\u043e\u043f\u0438\u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"localhost:9092\"\n    self.topic = f\"{self.name}_{topic}\"\n    self.events = self.events or AsyncEvents()\n\n    self.consumer = AIOKafkaConsumer(\n        self.topic,\n        loop=asyncio.get_event_loop(),\n        bootstrap_servers=self.url,\n        group_id=f\"{self.name}_group\",\n        auto_offset_reset=\"earliest\",\n        enable_auto_commit=True,\n        value_deserializer=lambda m: m.decode(\"utf-8\"),\n    )\n    self.producer = AIOKafkaProducer(\n        loop=asyncio.get_event_loop(),\n        bootstrap_servers=self.url,\n        auto_offset_reset=\"earliest\",\n        enable_auto_commit=True,\n        value_deserializer=lambda m: m.decode(\"utf-8\"),\n    )\n\n    self.storage = storage or SyncRedisStorage(\n        name=self.name, log=self.log, config=config\n    )\n\n    self.running = False\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    args, kwargs = args or (), kwargs or {}\n\n    uuid = str(uuid4())\n    created_at = time()\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = await self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    await self.storage.add(uuid=uuid, task_status=model)\n\n    task_data = f\"{task_name}:{uuid}:{priority}\"\n    await self._producer_start()\n    await self.producer.send_and_wait(self.topic, task_data)\n    await self.producer.stop()\n\n    await self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.flush_all","title":"<code>flush_all()</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    await self._plugin_trigger(\"broker_flush_all\", broker=self)\n    await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.get","title":"<code>get(uuid)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = await self.storage.get(uuid=uuid)\n    new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.listen","title":"<code>listen(worker)</code>  <code>async</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 Kafka \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def listen(self, worker: \"BaseWorker\"):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 Kafka \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    await self._consumer_start()\n    self.running = True\n    try:\n        async for msg in self.consumer:\n            task_data = msg.value\n            task_name, uuid, priority = task_data.split(\":\")\n            model_get = await self.get(uuid=uuid)\n            args, kwargs, created_at = (\n                model_get.args or (),\n                model_get.kwargs or {},\n                model_get.created_at.timestamp(),\n            )\n            self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n            new_args = await self._plugin_trigger(\n                \"broker_add_worker\",\n                broker=self,\n                worker=worker,\n\n                task_name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kw=kwargs,\n                created_at=created_at,\n                return_last=True\n            )\n            if new_args:\n                task_name = new_args.get(\"task_name\", task_name)\n                uuid = new_args.get(\"uuid\", uuid)\n                priority = new_args.get(\"priority\", priority)\n                args = new_args.get(\"args\", args)\n                kwargs = new_args.get(\"kw\", kwargs)\n                created_at = new_args.get(\"created_at\", created_at)\n\n            await worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n            )\n    finally:\n        await self.consumer.stop()\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = await self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    await self.storage.remove_finished_task(task_broker, model)\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.start","title":"<code>start(worker)</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    await self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        await self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        await self.storage._running_older_tasks(worker)\n\n    await self.listen(worker)\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    await self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n    await self.consumer.stop()\n    await self.producer.stop()\n</code></pre>"},{"location":"ru/api/brokers/async_kafkabroker/#qtasks.brokers.async_kafka.AsyncKafkaBroker.update","title":"<code>update(**kwargs)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/async_kafka.py</code> <pre><code>async def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return await self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/","title":"AsyncRabbitMQBroker","text":"<p>Async RabbitMQ Broker.</p>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker","title":"<code>AsyncRabbitMQBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>AsyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 RabbitMQ \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import AsyncRabbitMQBroker\n\nbroker = AsyncRabbitMQBroker(name=\"QueueTasks\", url=\"amqp://guest:guest@localhost/\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>class AsyncRabbitMQBroker(BaseBroker, AsyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 RabbitMQ \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import AsyncRabbitMQBroker\n\n    broker = AsyncRabbitMQBroker(name=\"QueueTasks\", url=\"amqp://guest:guest@localhost/\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `amqp://guest:guest@localhost/`.\n                    \"\"\"\n            ),\n        ] = None,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        queue_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f RabbitMQ. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                    \"\"\"\n            ),\n        ] = \"task_queue\",\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncRabbitMQBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            queue_name (str, optional): \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"amqp://guest:guest@localhost/\"\n        self.queue_name = f\"{self.name}:{queue_name}\"\n        self.events = self.events or AsyncEvents()\n\n        self.storage = storage or AsyncRedisStorage(\n            name=self.name, log=self.log, config=self.config\n        )\n\n        self.connection = None\n        self.channel = None\n        self.running = False\n\n    async def connect(self):\n        \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a RabbitMQ \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\"\"\"\n        self.connection = await aio_pika.connect_robust(self.url)\n        self.channel = await self.connection.channel()\n        await self.channel.set_qos(prefetch_count=1)\n\n        self.queue = await self.channel.declare_queue(self.queue_name, durable=True)\n\n    async def listen(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c RabbitMQ \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        if not self.channel:\n            await self.connect()\n\n        async with self.queue.iterator() as queue_iter:\n            self.running = True\n            async for message in queue_iter:\n                async with message.process():\n                    task_data = json.loads(message.body)\n                    task_name, uuid, priority = task_data[\"task_name\"], task_data[\"uuid\"], task_data[\"priority\"]\n                    args, kwargs = task_data.get(\"args\", ()), task_data.get(\"kwargs\", {})\n                    created_at = task_data.get(\"created_at\", 0)\n\n                    await self.storage.add_process(\n                        f'{task_data[\"task_name\"]}:{task_data[\"uuid\"]}:{task_data[\"priority\"]}',\n                        task_data[\"priority\"],\n                    )\n                    self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {task_data['uuid']}\")\n                    new_args = await self._plugin_trigger(\n                        \"broker_add_worker\",\n                        broker=self,\n                        worker=worker,\n\n                        task_name=task_name,\n                        uuid=uuid,\n                        priority=int(priority),\n                        args=args,\n                        kw=kwargs,\n                        created_at=created_at,\n                        return_last=True\n                    )\n                    if new_args:\n                        task_name = new_args.get(\"task_name\", task_name)\n                        uuid = new_args.get(\"uuid\", uuid)\n                        priority = new_args.get(\"priority\", priority)\n                        args = new_args.get(\"args\", args)\n                        kwargs = new_args.get(\"kw\", kwargs)\n                        created_at = new_args.get(\"created_at\", created_at)\n\n                    await worker.add(\n                        name=task_name,\n                        uuid=uuid,\n                        priority=priority,\n                        args=args,\n                        kwargs=kwargs,\n                        created_at=created_at\n                    )\n                if not self.running:\n                    break\n\n    async def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        args, kwargs = args or (), kwargs or {}\n        if not self.channel:\n            await self.connect()\n\n        uuid = str(uuid4())\n        created_at = time()\n\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = await self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        await self.storage.add(uuid=uuid, task_status=model)\n\n        task_data = {\n            \"uuid\": uuid,\n            \"task_name\": task_name,\n            \"priority\": priority,\n            \"args\": args,\n            \"kwargs\": kwargs,\n            \"created_at\": created_at,\n        }\n\n        await self.channel.default_exchange.publish(\n            aio_pika.Message(\n                body=json.dumps(task_data).encode(),\n                delivery_mode=aio_pika.DeliveryMode.PERSISTENT,\n            ),\n            routing_key=self.queue_name,\n        )\n\n        await self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    async def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = await self.storage.get(uuid=uuid)\n        new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    async def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return await self.storage.update(**kwargs)\n\n    async def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        await self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            await self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            await self.storage._running_older_tasks(worker)\n\n        await self.listen(worker)\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        await self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n        if self.connection:\n            await self.connection.close()\n            self.connection = None\n            self.channel = None\n\n    async def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[TaskStatusSuccessSchema, TaskStatusErrorSchema],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = await self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        return await self.storage.remove_finished_task(task_broker, model)\n\n    async def _running_older_tasks(self, worker):\n        await self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return await self.storage._running_older_tasks(worker)\n\n    async def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        await self._plugin_trigger(\"broker_flush_all\", broker=self)\n        await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, storage=None, queue_name='task_queue', log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncRabbitMQBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>queue_name</code> <code>str</code> <p>\u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".</p> <code>'task_queue'</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `amqp://guest:guest@localhost/`.\n                \"\"\"\n        ),\n    ] = None,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    queue_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f RabbitMQ. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                \"\"\"\n        ),\n    ] = \"task_queue\",\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncRabbitMQBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        queue_name (str, optional): \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"amqp://guest:guest@localhost/\"\n    self.queue_name = f\"{self.name}:{queue_name}\"\n    self.events = self.events or AsyncEvents()\n\n    self.storage = storage or AsyncRedisStorage(\n        name=self.name, log=self.log, config=self.config\n    )\n\n    self.connection = None\n    self.channel = None\n    self.running = False\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    args, kwargs = args or (), kwargs or {}\n    if not self.channel:\n        await self.connect()\n\n    uuid = str(uuid4())\n    created_at = time()\n\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = await self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    await self.storage.add(uuid=uuid, task_status=model)\n\n    task_data = {\n        \"uuid\": uuid,\n        \"task_name\": task_name,\n        \"priority\": priority,\n        \"args\": args,\n        \"kwargs\": kwargs,\n        \"created_at\": created_at,\n    }\n\n    await self.channel.default_exchange.publish(\n        aio_pika.Message(\n            body=json.dumps(task_data).encode(),\n            delivery_mode=aio_pika.DeliveryMode.PERSISTENT,\n        ),\n        routing_key=self.queue_name,\n    )\n\n    await self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a RabbitMQ \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.</p> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def connect(self):\n    \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a RabbitMQ \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\"\"\"\n    self.connection = await aio_pika.connect_robust(self.url)\n    self.channel = await self.connection.channel()\n    await self.channel.set_qos(prefetch_count=1)\n\n    self.queue = await self.channel.declare_queue(self.queue_name, durable=True)\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.flush_all","title":"<code>flush_all()</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    await self._plugin_trigger(\"broker_flush_all\", broker=self)\n    await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.get","title":"<code>get(uuid)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = await self.storage.get(uuid=uuid)\n    new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.listen","title":"<code>listen(worker)</code>  <code>async</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c RabbitMQ \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def listen(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c RabbitMQ \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    if not self.channel:\n        await self.connect()\n\n    async with self.queue.iterator() as queue_iter:\n        self.running = True\n        async for message in queue_iter:\n            async with message.process():\n                task_data = json.loads(message.body)\n                task_name, uuid, priority = task_data[\"task_name\"], task_data[\"uuid\"], task_data[\"priority\"]\n                args, kwargs = task_data.get(\"args\", ()), task_data.get(\"kwargs\", {})\n                created_at = task_data.get(\"created_at\", 0)\n\n                await self.storage.add_process(\n                    f'{task_data[\"task_name\"]}:{task_data[\"uuid\"]}:{task_data[\"priority\"]}',\n                    task_data[\"priority\"],\n                )\n                self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {task_data['uuid']}\")\n                new_args = await self._plugin_trigger(\n                    \"broker_add_worker\",\n                    broker=self,\n                    worker=worker,\n\n                    task_name=task_name,\n                    uuid=uuid,\n                    priority=int(priority),\n                    args=args,\n                    kw=kwargs,\n                    created_at=created_at,\n                    return_last=True\n                )\n                if new_args:\n                    task_name = new_args.get(\"task_name\", task_name)\n                    uuid = new_args.get(\"uuid\", uuid)\n                    priority = new_args.get(\"priority\", priority)\n                    args = new_args.get(\"args\", args)\n                    kwargs = new_args.get(\"kw\", kwargs)\n                    created_at = new_args.get(\"created_at\", created_at)\n\n                await worker.add(\n                    name=task_name,\n                    uuid=uuid,\n                    priority=priority,\n                    args=args,\n                    kwargs=kwargs,\n                    created_at=created_at\n                )\n            if not self.running:\n                break\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[TaskStatusSuccessSchema, TaskStatusErrorSchema],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = await self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    return await self.storage.remove_finished_task(task_broker, model)\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.start","title":"<code>start(worker)</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    await self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        await self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        await self.storage._running_older_tasks(worker)\n\n    await self.listen(worker)\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    await self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n    if self.connection:\n        await self.connection.close()\n        self.connection = None\n        self.channel = None\n</code></pre>"},{"location":"ru/api/brokers/async_rabbitmqbroker/#qtasks.brokers.async_rabbitmq.AsyncRabbitMQBroker.update","title":"<code>update(**kwargs)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/async_rabbitmq.py</code> <pre><code>async def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return await self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/","title":"AsyncRedisBroker","text":"<p>Async Redis Broker.</p>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker","title":"<code>AsyncRedisBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>AsyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Redis \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import AsyncRedisBroker\n\nbroker = AsyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>class AsyncRedisBroker(BaseBroker, AsyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Redis \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import AsyncRedisBroker\n\n    broker = AsyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                    \"\"\"\n            ),\n        ] = None,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        queue_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                    \"\"\"\n            ),\n        ] = \"task_queue\",\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncRedisBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            queue_name (str, optional): \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"redis://localhost:6379/0\"\n        self.queue_name = f\"{self.name}:{queue_name}\"\n        self.events = self.events or AsyncEvents()\n\n        self.client = aioredis.ConnectionPool.from_url(\n            self.url, decode_responses=True, encoding=\"utf-8\"\n        )\n        self.client = aioredis.Redis.from_pool(self.client)\n        self.storage = storage or AsyncRedisStorage(\n            name=name,\n            url=self.url,\n            redis_connect=self.client,\n            log=self.log,\n            config=self.config,\n        )\n        self.running = False\n        self.default_sleep = 0.01\n\n    async def listen(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Redis \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        self.running = True\n\n        while self.running:\n            task_data = await self.client.lpop(self.queue_name)\n            if not task_data:\n                await asyncio.sleep(self.default_sleep)\n                continue\n\n            task_name, uuid, priority = task_data.split(\":\")\n\n            await self.storage.add_process(task_data, priority)\n\n            model_get = await self.get(uuid=uuid)\n            args, kwargs, created_at = (\n                model_get.args or (),\n                model_get.kwargs or {},\n                model_get.created_at.timestamp(),\n            )\n            self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n            new_args = await self._plugin_trigger(\n                \"broker_add_worker\",\n                broker=self,\n                worker=worker,\n\n                task_name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kw=kwargs,\n                created_at=created_at,\n                return_last=True\n            )\n            if new_args:\n                task_name = new_args.get(\"task_name\", task_name)\n                uuid = new_args.get(\"uuid\", uuid)\n                priority = new_args.get(\"priority\", priority)\n                args = new_args.get(\"args\", args)\n                kwargs = new_args.get(\"kw\", kwargs)\n                created_at = new_args.get(\"created_at\", created_at)\n            await worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n            )\n\n    async def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: dict = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        loop = asyncio.get_running_loop()\n        asyncio_atexit.register(self.stop, loop=loop)\n        asyncio_atexit.register(self.storage.stop, loop=loop)\n\n        args, kwargs = args or (), kwargs or {}\n        uuid = str(uuid4())\n        created_at = time()\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = await self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n        if new_model:\n            model = new_model\n\n        await self.storage.add(uuid=uuid, task_status=model)\n        await self.client.rpush(self.queue_name, f\"{task_name}:{uuid}:{priority}\")\n\n        await self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    async def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = await self.storage.get(uuid=uuid)\n        new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    async def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return await self.storage.update(**kwargs)\n\n    async def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        await self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            await self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            await self.storage._running_older_tasks(worker)\n\n        await self.listen(worker)\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        await self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n        await self.client.aclose()\n\n    async def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = await self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        await self.storage.remove_finished_task(task_broker, model)\n        return\n\n    async def _running_older_tasks(self, worker):\n        await self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return await self.storage._running_older_tasks(worker)\n\n    async def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        await self._plugin_trigger(\"broker_flush_all\", broker=self)\n        await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, storage=None, queue_name='task_queue', log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncRedisBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>queue_name</code> <code>str</code> <p>\u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".</p> <code>'task_queue'</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                \"\"\"\n        ),\n    ] = None,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    queue_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                \"\"\"\n        ),\n    ] = \"task_queue\",\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncRedisBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        queue_name (str, optional): \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"redis://localhost:6379/0\"\n    self.queue_name = f\"{self.name}:{queue_name}\"\n    self.events = self.events or AsyncEvents()\n\n    self.client = aioredis.ConnectionPool.from_url(\n        self.url, decode_responses=True, encoding=\"utf-8\"\n    )\n    self.client = aioredis.Redis.from_pool(self.client)\n    self.storage = storage or AsyncRedisStorage(\n        name=name,\n        url=self.url,\n        redis_connect=self.client,\n        log=self.log,\n        config=self.config,\n    )\n    self.running = False\n    self.default_sleep = 0.01\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: dict = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    loop = asyncio.get_running_loop()\n    asyncio_atexit.register(self.stop, loop=loop)\n    asyncio_atexit.register(self.storage.stop, loop=loop)\n\n    args, kwargs = args or (), kwargs or {}\n    uuid = str(uuid4())\n    created_at = time()\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = await self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n    if new_model:\n        model = new_model\n\n    await self.storage.add(uuid=uuid, task_status=model)\n    await self.client.rpush(self.queue_name, f\"{task_name}:{uuid}:{priority}\")\n\n    await self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.flush_all","title":"<code>flush_all()</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    await self._plugin_trigger(\"broker_flush_all\", broker=self)\n    await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.get","title":"<code>get(uuid)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = await self.storage.get(uuid=uuid)\n    new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.listen","title":"<code>listen(worker)</code>  <code>async</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Redis \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def listen(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Redis \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    self.running = True\n\n    while self.running:\n        task_data = await self.client.lpop(self.queue_name)\n        if not task_data:\n            await asyncio.sleep(self.default_sleep)\n            continue\n\n        task_name, uuid, priority = task_data.split(\":\")\n\n        await self.storage.add_process(task_data, priority)\n\n        model_get = await self.get(uuid=uuid)\n        args, kwargs, created_at = (\n            model_get.args or (),\n            model_get.kwargs or {},\n            model_get.created_at.timestamp(),\n        )\n        self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n        new_args = await self._plugin_trigger(\n            \"broker_add_worker\",\n            broker=self,\n            worker=worker,\n\n            task_name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            uuid = new_args.get(\"uuid\", uuid)\n            priority = new_args.get(\"priority\", priority)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n            created_at = new_args.get(\"created_at\", created_at)\n        await worker.add(\n            name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n        )\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = await self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    await self.storage.remove_finished_task(task_broker, model)\n    return\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.start","title":"<code>start(worker)</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    await self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        await self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        await self.storage._running_older_tasks(worker)\n\n    await self.listen(worker)\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    await self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n    await self.client.aclose()\n</code></pre>"},{"location":"ru/api/brokers/async_redisbroker/#qtasks.brokers.async_redis.AsyncRedisBroker.update","title":"<code>update(**kwargs)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/async_redis.py</code> <pre><code>async def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return await self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/brokers/async_socket/","title":"AsyncSocketBroker","text":"<p>Async Socket Broker.</p>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker","title":"<code>AsyncSocketBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>AsyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043a\u0435\u0442\u044b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import AsyncSocketBroker\n\nbroker = AsyncSocketBroker(name=\"QueueTasks\", url=\"127.0.0.1\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>class AsyncSocketBroker(BaseBroker, AsyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043a\u0435\u0442\u044b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import AsyncSocketBroker\n\n    broker = AsyncSocketBroker(name=\"QueueTasks\", url=\"127.0.0.1\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `127.0.0.1`.\n                    \"\"\"\n            ),\n        ] = None,\n        port: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `6379`.\n                    \"\"\"\n            ),\n        ] = 6379,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncSocketBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `127.0.0.1`.\n            port (int, optional): \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `8765`.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"127.0.0.1\"\n        self.port = port\n        self.events = self.events or AsyncEvents()\n\n        self.client = None\n        self.storage = storage or AsyncRedisStorage(\n            name=name,\n            log=self.log,\n            config=self.config,\n        )\n        self.default_sleep = 0.01\n        self.running = False\n\n        self.queue = asyncio.Queue()\n        self._serve_task: Union[asyncio.Task, None] = None\n        self._listen_task: Union[asyncio.Task, None] = None\n\n    async def handle_connection(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.\n\n        Args:\n            reader (asyncio.StreamReader): \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n            writer (asyncio.StreamWriter): \u041f\u0438\u0441\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n        \"\"\"\n        try:\n            data = await reader.read(4096)\n            message = json.loads(data.decode())\n            task_name = message[\"task_name\"]\n            uuid = message[\"uuid\"]\n            priority = message[\"priority\"]\n            args = message.get(\"args\", ())\n            kwargs = message.get(\"kwargs\", {})\n            created_at = message[\"created_at\"]\n\n            await self.storage.add(\n                uuid=uuid,\n                task_status=TaskStatusNewSchema(\n                    task_name=task_name,\n                    priority=priority,\n                    args=args,\n                    kwargs=kwargs,\n                    created_at=created_at,\n                    updated_at=created_at,\n                ),\n            )\n\n            await self.queue.put((task_name, uuid, priority))\n            writer.write(b\"OK\")\n            await writer.drain()\n        finally:\n            writer.close()\n            with contextlib.suppress(Exception):\n                await writer.wait_closed()\n\n    async def listen(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        self.running = True\n\n        while self.running:\n            try:\n                item = await self.queue.get()\n            except asyncio.CancelledError:\n                break\n            if item is None:\n                break\n\n            task_name, uuid, priority = item\n            task_data = await self.get(uuid)\n            args, kwargs, created_at = task_data.args, task_data.kwargs, task_data.created_at\n\n            await self.storage.add_process(f\"{task_name}:{uuid}:{priority}\", priority)\n\n            model_get = await self.get(uuid=uuid)\n            args, kwargs, created_at = (\n                model_get.args or (),\n                model_get.kwargs or {},\n                model_get.created_at.timestamp(),\n            )\n            self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n            new_args = await self._plugin_trigger(\n                \"broker_add_worker\",\n                broker=self,\n                worker=worker,\n\n                task_name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kw=kwargs,\n                created_at=created_at,\n                return_last=True\n            )\n            if new_args:\n                task_name = new_args.get(\"task_name\", task_name)\n                uuid = new_args.get(\"uuid\", uuid)\n                priority = new_args.get(\"priority\", priority)\n                args = new_args.get(\"args\", args)\n                kwargs = new_args.get(\"kw\", kwargs)\n                created_at = new_args.get(\"created_at\", created_at)\n            await worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n            )\n\n    async def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: dict = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        loop = asyncio.get_running_loop()\n        asyncio_atexit.register(self.stop, loop=loop)\n        asyncio_atexit.register(self.storage.stop, loop=loop)\n\n        args, kwargs = args or (), kwargs or {}\n        uuid = str(uuid4())\n        created_at = time()\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = await self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        await self.storage.add(uuid=uuid, task_status=model)\n        reader, writer = await asyncio.open_connection(self.url, self.port)\n        payload = asdict(model)\n        payload.update({\"uuid\": uuid})\n        writer.write(json.dumps(payload).encode())\n        await writer.drain()\n        with contextlib.suppress(Exception):\n            writer.close()\n\n        await self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    async def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = await self.storage.get(uuid=uuid)\n        new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    async def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return await self.storage.update(**kwargs)\n\n    async def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        await self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            await self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            await self.storage._running_older_tasks(worker)\n\n        self.client = await asyncio.start_server(self.handle_connection, self.url, self.port)\n\n        self._listen_task = asyncio.create_task(self.listen(worker), name=\"broker-listen\")\n        self._serve_task = asyncio.create_task(self.client.serve_forever(), name=\"broker-serve\")\n        with contextlib.suppress(asyncio.CancelledError):\n            await self._serve_task\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        await self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n\n        if self._listen_task and not self._listen_task.done():\n            self.queue.put_nowait(None)\n\n        if self.client:\n            self.client.close()\n            with contextlib.suppress(Exception):\n                await self.client.wait_closed()\n\n        if self._serve_task and not self._serve_task.done():\n            self._serve_task.cancel()\n            with contextlib.suppress(asyncio.CancelledError):\n                await self._serve_task\n\n        if self._listen_task and not self._listen_task.done():\n            with contextlib.suppress(asyncio.CancelledError):\n                await self._listen_task\n\n    async def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = await self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        await self.storage.remove_finished_task(task_broker, model)\n        return\n\n    async def _running_older_tasks(self, worker):\n        await self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return await self.storage._running_older_tasks(worker)\n\n    async def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        await self._plugin_trigger(\"broker_flush_all\", broker=self)\n        await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, port=6379, storage=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncSocketBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>QueueTasks</code>.</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>127.0.0.1</code>.</p> <code>None</code> <code>port</code> <code>int</code> <p>\u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>8765</code>.</p> <code>6379</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `127.0.0.1`.\n                \"\"\"\n        ),\n    ] = None,\n    port: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `6379`.\n                \"\"\"\n        ),\n    ] = 6379,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AsyncSocketBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `127.0.0.1`.\n        port (int, optional): \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `8765`.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"127.0.0.1\"\n    self.port = port\n    self.events = self.events or AsyncEvents()\n\n    self.client = None\n    self.storage = storage or AsyncRedisStorage(\n        name=name,\n        log=self.log,\n        config=self.config,\n    )\n    self.default_sleep = 0.01\n    self.running = False\n\n    self.queue = asyncio.Queue()\n    self._serve_task: Union[asyncio.Task, None] = None\n    self._listen_task: Union[asyncio.Task, None] = None\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: dict = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    loop = asyncio.get_running_loop()\n    asyncio_atexit.register(self.stop, loop=loop)\n    asyncio_atexit.register(self.storage.stop, loop=loop)\n\n    args, kwargs = args or (), kwargs or {}\n    uuid = str(uuid4())\n    created_at = time()\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = await self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    await self.storage.add(uuid=uuid, task_status=model)\n    reader, writer = await asyncio.open_connection(self.url, self.port)\n    payload = asdict(model)\n    payload.update({\"uuid\": uuid})\n    writer.write(json.dumps(payload).encode())\n    await writer.drain()\n    with contextlib.suppress(Exception):\n        writer.close()\n\n    await self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.flush_all","title":"<code>flush_all()</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    await self._plugin_trigger(\"broker_flush_all\", broker=self)\n    await self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.get","title":"<code>get(uuid)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = await self.storage.get(uuid=uuid)\n    new_task = await self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.handle_connection","title":"<code>handle_connection(reader, writer)</code>  <code>async</code>","text":"<p>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>reader</code> <code>StreamReader</code> <p>\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> required <code>writer</code> <code>StreamWriter</code> <p>\u041f\u0438\u0441\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> required Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def handle_connection(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):\n    \"\"\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.\n\n    Args:\n        reader (asyncio.StreamReader): \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n        writer (asyncio.StreamWriter): \u041f\u0438\u0441\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n    \"\"\"\n    try:\n        data = await reader.read(4096)\n        message = json.loads(data.decode())\n        task_name = message[\"task_name\"]\n        uuid = message[\"uuid\"]\n        priority = message[\"priority\"]\n        args = message.get(\"args\", ())\n        kwargs = message.get(\"kwargs\", {})\n        created_at = message[\"created_at\"]\n\n        await self.storage.add(\n            uuid=uuid,\n            task_status=TaskStatusNewSchema(\n                task_name=task_name,\n                priority=priority,\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n                updated_at=created_at,\n            ),\n        )\n\n        await self.queue.put((task_name, uuid, priority))\n        writer.write(b\"OK\")\n        await writer.drain()\n    finally:\n        writer.close()\n        with contextlib.suppress(Exception):\n            await writer.wait_closed()\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.listen","title":"<code>listen(worker)</code>  <code>async</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def listen(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    self.running = True\n\n    while self.running:\n        try:\n            item = await self.queue.get()\n        except asyncio.CancelledError:\n            break\n        if item is None:\n            break\n\n        task_name, uuid, priority = item\n        task_data = await self.get(uuid)\n        args, kwargs, created_at = task_data.args, task_data.kwargs, task_data.created_at\n\n        await self.storage.add_process(f\"{task_name}:{uuid}:{priority}\", priority)\n\n        model_get = await self.get(uuid=uuid)\n        args, kwargs, created_at = (\n            model_get.args or (),\n            model_get.kwargs or {},\n            model_get.created_at.timestamp(),\n        )\n        self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n        new_args = await self._plugin_trigger(\n            \"broker_add_worker\",\n            broker=self,\n            worker=worker,\n\n            task_name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            uuid = new_args.get(\"uuid\", uuid)\n            priority = new_args.get(\"priority\", priority)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n            created_at = new_args.get(\"created_at\", created_at)\n        await worker.add(\n            name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n        )\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = await self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    await self.storage.remove_finished_task(task_broker, model)\n    return\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.start","title":"<code>start(worker)</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    await self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        await self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        await self.storage._running_older_tasks(worker)\n\n    self.client = await asyncio.start_server(self.handle_connection, self.url, self.port)\n\n    self._listen_task = asyncio.create_task(self.listen(worker), name=\"broker-listen\")\n    self._serve_task = asyncio.create_task(self.client.serve_forever(), name=\"broker-serve\")\n    with contextlib.suppress(asyncio.CancelledError):\n        await self._serve_task\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    await self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n\n    if self._listen_task and not self._listen_task.done():\n        self.queue.put_nowait(None)\n\n    if self.client:\n        self.client.close()\n        with contextlib.suppress(Exception):\n            await self.client.wait_closed()\n\n    if self._serve_task and not self._serve_task.done():\n        self._serve_task.cancel()\n        with contextlib.suppress(asyncio.CancelledError):\n            await self._serve_task\n\n    if self._listen_task and not self._listen_task.done():\n        with contextlib.suppress(asyncio.CancelledError):\n            await self._listen_task\n</code></pre>"},{"location":"ru/api/brokers/async_socket/#qtasks.brokers.async_socket.AsyncSocketBroker.update","title":"<code>update(**kwargs)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/async_socket.py</code> <pre><code>async def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = await self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return await self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/brokers/basebroker/","title":"BaseBroker - \u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0411\u0440\u043e\u043a\u0435\u0440","text":"<p>Base Broker.</p>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker","title":"<code>BaseBroker</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseBroker</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u0432.</p>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers.base import BaseBroker\n\nclass MyBroker(BaseBroker):\n    def __init__(self, name: str = None, storage: BaseStorage = None):\n        super().__init__(name=name, storage=storage)\n        pass\n</code></pre> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>class BaseBroker(ABC):\n    \"\"\"\n    `BaseBroker` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u0432.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers.base import BaseBroker\n\n    class MyBroker(BaseBroker):\n        def __init__(self, name: str = None, storage: BaseStorage = None):\n            super().__init__(name=name, storage=storage)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 `qtasks.storages.base.BaseStorage`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f BaseBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self.name = name\n        self.config = config or QueueConfig()\n        self.log = (\n            log.with_subname(\"Broker\")\n            if log\n            else Logger(\n                name=self.name,\n                subname=\"Broker\",\n                default_level=self.config.logs_default_level_server,\n                format=self.config.logs_format,\n            )\n        )\n        self.events = events\n\n        self.storage = storage\n\n        self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n        self.init_plugins()\n\n    @abstractmethod\n    def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n        Args:\n            worker (BaseWorker, optional): \u043a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def stop(self) -&gt; None:\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n        pass\n\n    def update_config(\n        self,\n        config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n        \"\"\"\n        self.config = config\n        return\n\n    def add_plugin(\n        self,\n        plugin: Annotated[\n            \"BasePlugin\",\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d.\n                    \"\"\"\n            ),\n        ],\n        trigger_names: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n        Args:\n            plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n            trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n        \"\"\"\n        trigger_names = trigger_names or [\"Globals\"]\n\n        for name in trigger_names:\n            if name not in self.plugins:\n                self.plugins.update({name: [plugin]})\n            else:\n                self.plugins[name].append(plugin)\n        return\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        pass\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        pass\n\n    def _dynamic_model(\n        self,\n        model: Annotated[\n            TaskStatusNewSchema,\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        extra: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f.\n                    \"\"\"\n            ),\n        ],\n    ):\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439\n        task_field_names = {f.name for f in fields(TaskStatusNewSchema)}\n\n        # \u0418\u0449\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438\n        extra_fields = []\n        extra_values = {}\n\n        for key, value in extra.items():\n            if key not in task_field_names:\n                # \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u0430\u044f \u2014 \u043c\u043e\u0436\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c\n                field_type = type(value)\n                extra_fields.append((key, field_type, field(default=None)))\n                extra_values[key] = value\n\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 dataclass \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438\n        if extra_fields:\n            NewTask = make_dataclass(\n                \"TaskStatusNewSchema\", extra_fields, bases=(TaskStatusNewSchema,)\n            )\n        else:\n            NewTask = TaskStatusNewSchema\n\n        # \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n        return NewTask(**asdict(model), **extra_values)\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.__init__","title":"<code>__init__(name=None, storage=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f BaseBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 `qtasks.storages.base.BaseStorage`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f BaseBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self.name = name\n    self.config = config or QueueConfig()\n    self.log = (\n        log.with_subname(\"Broker\")\n        if log\n        else Logger(\n            name=self.name,\n            subname=\"Broker\",\n            default_level=self.config.logs_default_level_server,\n            format=self.config.logs_format,\n        )\n    )\n    self.events = events\n\n    self.storage = storage\n\n    self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n    self.init_plugins()\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>  <code>abstractmethod</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>@abstractmethod\ndef add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.add_plugin","title":"<code>add_plugin(plugin, trigger_names=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>BasePlugin</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d</p> required <code>trigger_names</code> <code>List[str]</code> <p>\u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Globals</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>def add_plugin(\n    self,\n    plugin: Annotated[\n        \"BasePlugin\",\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d.\n                \"\"\"\n        ),\n    ],\n    trigger_names: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n    Args:\n        plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n        trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n    \"\"\"\n    trigger_names = trigger_names or [\"Globals\"]\n\n    for name in trigger_names:\n        if name not in self.plugins:\n            self.plugins.update({name: [plugin]})\n        else:\n            self.plugins[name].append(plugin)\n    return\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.get","title":"<code>get(uuid)</code>  <code>abstractmethod</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>@abstractmethod\ndef get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.start","title":"<code>start(worker=None)</code>  <code>abstractmethod</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 <code>run_forever</code>.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u043a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>@abstractmethod\ndef start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n    Args:\n        worker (BaseWorker, optional): \u043a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.stop","title":"<code>stop()</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>run_forever</code>.</p> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>@abstractmethod\ndef stop(self) -&gt; None:\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.update","title":"<code>update(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>@abstractmethod\ndef update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/brokers/basebroker/#qtasks.brokers.base.BaseBroker.update_config","title":"<code>update_config(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433.</p> required Source code in <code>src/qtasks/brokers/base.py</code> <pre><code>def update_config(\n    self,\n    config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n    Args:\n        config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n    \"\"\"\n    self.config = config\n    return\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/","title":"SyncKafkaBroker","text":"<p>Sync Kafka Broker.</p>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker","title":"<code>SyncKafkaBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>SyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Kafka \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import SyncKafkaBroker\n\nbroker = SyncKafkaBroker(name=\"QueueTasks\", url=\"localhost:9092\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>class SyncKafkaBroker(BaseBroker, SyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Kafka \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import SyncKafkaBroker\n\n    broker = SyncKafkaBroker(name=\"QueueTasks\", url=\"localhost:9092\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `localhost:9092`.\n                    \"\"\"\n            ),\n        ] = None,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        topic: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0422\u043e\u043f\u0438\u043a Kafka.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                    \"\"\"\n            ),\n        ] = \"task_queue\",\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncKafkaBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            topic (str, optional): \u0422\u043e\u043f\u0438\u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"localhost:9092\"\n        self.topic = f\"{self.name}_{topic}\"\n        self.events = self.events or SyncEvents()\n\n        self.consumer = KafkaConsumer(\n            self.topic,\n            bootstrap_servers=self.url,\n            group_id=f\"{self.name}_group\",\n            auto_offset_reset=\"earliest\",\n            enable_auto_commit=True,\n            value_deserializer=lambda m: m.decode(\"utf-8\"),\n        )\n        self.producer = KafkaProducer(\n            bootstrap_servers=self.url,\n            auto_offset_reset=\"earliest\",\n            enable_auto_commit=True,\n            value_deserializer=lambda m: m.decode(\"utf-8\"),\n        )\n\n        self.storage = storage or SyncRedisStorage(\n            name=self.name, log=self.log, config=config\n        )\n\n        self.running = False\n\n    def listen(self, worker: \"BaseWorker\"):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 Kafka \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        self.running = True\n        for msg in self.consumer:\n            if not self.running:\n                break\n            task_data = msg.value\n            task_name, uuid_str, priority = task_data.split(\":\")\n            uuid = UUID(uuid_str)\n            model_get = self.get(uuid=uuid)\n            if model_get is None:\n                self.log.warning(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {uuid} \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\")\n                continue\n            args, kwargs, created_at = (\n                model_get.args or (),\n                model_get.kwargs or {},\n                model_get.created_at.timestamp(),\n            )\n            self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n            new_args = self._plugin_trigger(\n                \"broker_add_worker\",\n                broker=self,\n                worker=worker,\n\n                task_name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kw=kwargs,\n                created_at=created_at,\n                return_last=True\n            )\n            if new_args:\n                task_name = new_args.get(\"task_name\", task_name)\n                uuid = new_args.get(\"uuid\", uuid)\n                priority = new_args.get(\"priority\", priority)\n                args = new_args.get(\"args\", args)\n                kwargs = new_args.get(\"kw\", kwargs)\n                created_at = new_args.get(\"created_at\", created_at)\n\n            worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n            )\n\n    def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        args, kwargs = args or (), kwargs or {}\n        uuid = str(uuid4())\n        created_at = time()\n\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        self.storage.add(uuid=uuid, task_status=model)\n\n        task_data = f\"{task_name}:{uuid}:{priority}\"\n        self.producer.send(self.topic, task_data)\n        self.producer.flush()\n\n        self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = self.storage.get(uuid=uuid)\n        new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return self.storage.update(**kwargs)\n\n    def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            self.storage._running_older_tasks(worker)\n\n        self.listen(worker)\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n        self.consumer.stop()\n        self.producer.stop()\n\n    def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        self.storage.remove_finished_task(task_broker, model)\n\n    def _running_older_tasks(self, worker):\n        self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return self.storage._running_older_tasks(worker)\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        self._plugin_trigger(\"broker_flush_all\", broker=self)\n        self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, storage=None, topic='task_queue', log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncKafkaBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>topic</code> <code>str</code> <p>\u0422\u043e\u043f\u0438\u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".</p> <code>'task_queue'</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `localhost:9092`.\n                \"\"\"\n        ),\n    ] = None,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    topic: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0422\u043e\u043f\u0438\u043a Kafka.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                \"\"\"\n        ),\n    ] = \"task_queue\",\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncKafkaBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        topic (str, optional): \u0422\u043e\u043f\u0438\u043a Kafka. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"localhost:9092\"\n    self.topic = f\"{self.name}_{topic}\"\n    self.events = self.events or SyncEvents()\n\n    self.consumer = KafkaConsumer(\n        self.topic,\n        bootstrap_servers=self.url,\n        group_id=f\"{self.name}_group\",\n        auto_offset_reset=\"earliest\",\n        enable_auto_commit=True,\n        value_deserializer=lambda m: m.decode(\"utf-8\"),\n    )\n    self.producer = KafkaProducer(\n        bootstrap_servers=self.url,\n        auto_offset_reset=\"earliest\",\n        enable_auto_commit=True,\n        value_deserializer=lambda m: m.decode(\"utf-8\"),\n    )\n\n    self.storage = storage or SyncRedisStorage(\n        name=self.name, log=self.log, config=config\n    )\n\n    self.running = False\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    args, kwargs = args or (), kwargs or {}\n    uuid = str(uuid4())\n    created_at = time()\n\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    self.storage.add(uuid=uuid, task_status=model)\n\n    task_data = f\"{task_name}:{uuid}:{priority}\"\n    self.producer.send(self.topic, task_data)\n    self.producer.flush()\n\n    self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    self._plugin_trigger(\"broker_flush_all\", broker=self)\n    self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.get","title":"<code>get(uuid)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = self.storage.get(uuid=uuid)\n    new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.listen","title":"<code>listen(worker)</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 Kafka \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def listen(self, worker: \"BaseWorker\"):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 Kafka \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    self.running = True\n    for msg in self.consumer:\n        if not self.running:\n            break\n        task_data = msg.value\n        task_name, uuid_str, priority = task_data.split(\":\")\n        uuid = UUID(uuid_str)\n        model_get = self.get(uuid=uuid)\n        if model_get is None:\n            self.log.warning(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {uuid} \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\")\n            continue\n        args, kwargs, created_at = (\n            model_get.args or (),\n            model_get.kwargs or {},\n            model_get.created_at.timestamp(),\n        )\n        self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n        new_args = self._plugin_trigger(\n            \"broker_add_worker\",\n            broker=self,\n            worker=worker,\n\n            task_name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            uuid = new_args.get(\"uuid\", uuid)\n            priority = new_args.get(\"priority\", priority)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n            created_at = new_args.get(\"created_at\", created_at)\n\n        worker.add(\n            name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n        )\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    self.storage.remove_finished_task(task_broker, model)\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.start","title":"<code>start(worker)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        self.storage._running_older_tasks(worker)\n\n    self.listen(worker)\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n    self.consumer.stop()\n    self.producer.stop()\n</code></pre>"},{"location":"ru/api/brokers/sync_kafkabroker/#qtasks.brokers.sync_kafka.SyncKafkaBroker.update","title":"<code>update(**kwargs)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/sync_kafka.py</code> <pre><code>def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/","title":"SyncRabbitMQBroker","text":"<p>Sync RabbitMQ Broker.</p>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker","title":"<code>SyncRabbitMQBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>SyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 RabbitMQ \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import SyncRabbitMQBroker\n\nbroker = SyncRabbitMQBroker(name=\"QueueTasks\", url=\"amqp://guest:guest@localhost/\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>class SyncRabbitMQBroker(BaseBroker, SyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 RabbitMQ \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import SyncRabbitMQBroker\n\n    broker = SyncRabbitMQBroker(name=\"QueueTasks\", url=\"amqp://guest:guest@localhost/\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `amqp://guest:guest@localhost/`.\n                    \"\"\"\n            ),\n        ] = None,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        queue_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f RabbitMQ. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                    \"\"\"\n            ),\n        ] = \"task_queue\",\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncRabbitMQBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            queue_name (str, optional): \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"amqp://guest:guest@localhost/\"\n        self.queue_name = f\"{self.name}:{queue_name}\"\n        self.events = self.events or SyncEvents()\n\n        self.storage = storage or SyncRedisStorage(\n            name=self.name, log=self.log, config=self.config\n        )\n\n        self.connection = None\n        self.channel = None\n        self.running = False\n\n    def connect(self):\n        \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a RabbitMQ \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\"\"\"\n        self.connection = pika.BlockingConnection(pika.URLParameters(self.url))\n        self.channel = self.connection.channel()\n        self.channel.basic_qos(prefetch_count=1)\n\n        self.queue = self.channel.queue_declare(self.queue_name, durable=True)\n\n    def listen(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c RabbitMQ \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        if not self.channel:\n            self.connect()\n\n        def callback(ch, method, properties, body):\n            task_data = json.loads(body)\n            task_name, uuid, priority = task_data[\"task_name\"], task_data[\"uuid\"], task_data[\"priority\"]\n            args, kwargs = task_data.get(\"args\", ()), task_data.get(\"kwargs\", {})\n            created_at = task_data.get(\"created_at\", 0)\n\n            self.storage.add_process(\n                f'{task_data[\"task_name\"]}:{task_data[\"uuid\"]}:{task_data[\"priority\"]}',\n                task_data[\"priority\"],\n            )\n            self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {task_data['uuid']}\")\n            new_args = self._plugin_trigger(\n                \"broker_add_worker\",\n                broker=self,\n                worker=worker,\n\n                task_name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kw=kwargs,\n                created_at=created_at,\n                return_last=True\n            )\n            if new_args:\n                task_name = new_args.get(\"task_name\", task_name)\n                uuid = new_args.get(\"uuid\", uuid)\n                priority = new_args.get(\"priority\", priority)\n                args = new_args.get(\"args\", args)\n                kwargs = new_args.get(\"kw\", kwargs)\n                created_at = new_args.get(\"created_at\", created_at)\n\n            worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=priority,\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at\n            )\n\n        self.channel.basic_consume(\n            queue=self.queue_name, on_message_callback=callback, auto_ack=True\n        )\n        self.running = True\n        self.channel.start_consuming()\n\n    def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        args, kwargs = args or (), kwargs or {}\n        if not self.channel:\n            self.connect()\n\n        uuid = str(uuid4())\n        created_at = time()\n\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        self.storage.add(uuid=uuid, task_status=model)\n\n        task_data = {\n            \"uuid\": uuid,\n            \"task_name\": task_name,\n            \"priority\": priority,\n            \"args\": args,\n            \"kwargs\": kwargs,\n            \"created_at\": created_at,\n        }\n\n        self.channel.basic_publish(\n            exchange=\"\",\n            routing_key=self.queue_name,\n            body=json.dumps(task_data).encode(),\n            properties=pika.BasicProperties(\n                delivery_mode=2,\n            ),\n        )\n\n        self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = self.storage.get(uuid=uuid)\n        new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return self.storage.update(**kwargs)\n\n    def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            self.storage._running_older_tasks(worker)\n\n        self.listen(worker)\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n        if self.connection:\n            self.connection.close()\n            self.connection = None\n            self.channel = None\n        self.storage.stop()\n\n    def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[TaskStatusSuccessSchema, TaskStatusErrorSchema],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        self.storage.remove_finished_task(task_broker, model)\n\n    def _running_older_tasks(self, worker):\n        self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return self.storage._running_older_tasks(worker)\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        self._plugin_trigger(\"broker_flush_all\", broker=self)\n        self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, storage=None, queue_name='task_queue', log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncRabbitMQBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>queue_name</code> <code>str</code> <p>\u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".</p> <code>'task_queue'</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `amqp://guest:guest@localhost/`.\n                \"\"\"\n        ),\n    ] = None,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    queue_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f RabbitMQ. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                \"\"\"\n        ),\n    ] = \"task_queue\",\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncRabbitMQBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        queue_name (str, optional): \u0418\u043c\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0438 RabbitMQ. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"amqp://guest:guest@localhost/\"\n    self.queue_name = f\"{self.name}:{queue_name}\"\n    self.events = self.events or SyncEvents()\n\n    self.storage = storage or SyncRedisStorage(\n        name=self.name, log=self.log, config=self.config\n    )\n\n    self.connection = None\n    self.channel = None\n    self.running = False\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    args, kwargs = args or (), kwargs or {}\n    if not self.channel:\n        self.connect()\n\n    uuid = str(uuid4())\n    created_at = time()\n\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    self.storage.add(uuid=uuid, task_status=model)\n\n    task_data = {\n        \"uuid\": uuid,\n        \"task_name\": task_name,\n        \"priority\": priority,\n        \"args\": args,\n        \"kwargs\": kwargs,\n        \"created_at\": created_at,\n    }\n\n    self.channel.basic_publish(\n        exchange=\"\",\n        routing_key=self.queue_name,\n        body=json.dumps(task_data).encode(),\n        properties=pika.BasicProperties(\n            delivery_mode=2,\n        ),\n    )\n\n    self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.connect","title":"<code>connect()</code>","text":"<p>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a RabbitMQ \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.</p> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def connect(self):\n    \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a RabbitMQ \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\"\"\"\n    self.connection = pika.BlockingConnection(pika.URLParameters(self.url))\n    self.channel = self.connection.channel()\n    self.channel.basic_qos(prefetch_count=1)\n\n    self.queue = self.channel.queue_declare(self.queue_name, durable=True)\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    self._plugin_trigger(\"broker_flush_all\", broker=self)\n    self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.get","title":"<code>get(uuid)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = self.storage.get(uuid=uuid)\n    new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.listen","title":"<code>listen(worker)</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c RabbitMQ \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def listen(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c RabbitMQ \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    if not self.channel:\n        self.connect()\n\n    def callback(ch, method, properties, body):\n        task_data = json.loads(body)\n        task_name, uuid, priority = task_data[\"task_name\"], task_data[\"uuid\"], task_data[\"priority\"]\n        args, kwargs = task_data.get(\"args\", ()), task_data.get(\"kwargs\", {})\n        created_at = task_data.get(\"created_at\", 0)\n\n        self.storage.add_process(\n            f'{task_data[\"task_name\"]}:{task_data[\"uuid\"]}:{task_data[\"priority\"]}',\n            task_data[\"priority\"],\n        )\n        self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {task_data['uuid']}\")\n        new_args = self._plugin_trigger(\n            \"broker_add_worker\",\n            broker=self,\n            worker=worker,\n\n            task_name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            uuid = new_args.get(\"uuid\", uuid)\n            priority = new_args.get(\"priority\", priority)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n            created_at = new_args.get(\"created_at\", created_at)\n\n        worker.add(\n            name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at\n        )\n\n    self.channel.basic_consume(\n        queue=self.queue_name, on_message_callback=callback, auto_ack=True\n    )\n    self.running = True\n    self.channel.start_consuming()\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[TaskStatusSuccessSchema, TaskStatusErrorSchema],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    self.storage.remove_finished_task(task_broker, model)\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.start","title":"<code>start(worker)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        self.storage._running_older_tasks(worker)\n\n    self.listen(worker)\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n    if self.connection:\n        self.connection.close()\n        self.connection = None\n        self.channel = None\n    self.storage.stop()\n</code></pre>"},{"location":"ru/api/brokers/sync_rabbitmqbroker/#qtasks.brokers.sync_rabbitmq.SyncRabbitMQBroker.update","title":"<code>update(**kwargs)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/sync_rabbitmq.py</code> <pre><code>def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/","title":"SyncRedisBroker","text":"<p>Sync Redis Broker.</p>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker","title":"<code>SyncRedisBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>SyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Redis \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import SyncRedisBroker\n\nbroker = SyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>class SyncRedisBroker(BaseBroker, SyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 Redis \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import SyncRedisBroker\n\n    broker = SyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                    \"\"\"\n            ),\n        ] = None,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        queue_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                    \"\"\"\n            ),\n        ] = \"task_queue\",\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncRedisBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            queue_name (str, optional): \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"redis://localhost:6379/0\"\n        self.queue_name = f\"{self.name}:{queue_name}\"\n        self.events = self.events or SyncEvents()\n\n        self.client = redis.Redis.from_url(\n            self.url, decode_responses=True, encoding=\"utf-8\"\n        )\n        self.storage = storage or SyncRedisStorage(\n            name=name,\n            url=self.url,\n            redis_connect=self.client,\n            log=self.log,\n            config=self.config,\n        )\n\n        self.running = False\n        self.default_sleep = 0.01\n\n    def listen(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Redis \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        self.running = True\n\n        while self.running:\n            task_data = self.client.lpop(self.queue_name)\n            if not task_data:\n                sleep(self.default_sleep)\n                continue\n\n            task_name, uuid, priority = task_data.split(\":\")\n\n            self.storage.add_process(task_data, priority)\n\n            model_get = self.get(uuid=uuid)\n            args, kwargs, created_at = (\n                model_get.args or (),\n                model_get.kwargs or {},\n                model_get.created_at.timestamp(),\n            )\n            self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n            new_args = self._plugin_trigger(\n                \"broker_add_worker\",\n                broker=self,\n                worker=worker,\n\n                task_name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kw=kwargs,\n                created_at=created_at,\n                return_last=True\n            )\n            if new_args:\n                task_name = new_args.get(\"task_name\", task_name)\n                uuid = new_args.get(\"uuid\", uuid)\n                priority = new_args.get(\"priority\", priority)\n                args = new_args.get(\"args\", args)\n                kwargs = new_args.get(\"kw\", kwargs)\n                created_at = new_args.get(\"created_at\", created_at)\n\n            worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n            )\n\n    def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: dict = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        args, kwargs = args or (), kwargs or {}\n        uuid = str(uuid4())\n        created_at = time()\n\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        self.storage.add(uuid=uuid, task_status=model)\n        self.client.rpush(self.queue_name, f\"{task_name}:{uuid}:{priority}\")\n\n        self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n\n        model = Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n        return model\n\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = self.storage.get(uuid=uuid)\n        new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return self.storage.update(**kwargs)\n\n    def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            self.storage._running_older_tasks(worker)\n\n        self.listen(worker)\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n        self.client.close()\n\n    def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        self.storage.remove_finished_task(task_broker, model)\n\n    def _running_older_tasks(self, worker):\n        self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return self.storage._running_older_tasks(worker)\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        self._plugin_trigger(\"broker_flush_all\", broker=self)\n        self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, storage=None, queue_name='task_queue', log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncRedisBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>queue_name</code> <code>str</code> <p>\u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".</p> <code>'task_queue'</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                \"\"\"\n        ),\n    ] = None,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    queue_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_queue`.\n                \"\"\"\n        ),\n    ] = \"task_queue\",\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncRedisBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        queue_name (str, optional): \u0418\u043c\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_queue\".\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"redis://localhost:6379/0\"\n    self.queue_name = f\"{self.name}:{queue_name}\"\n    self.events = self.events or SyncEvents()\n\n    self.client = redis.Redis.from_url(\n        self.url, decode_responses=True, encoding=\"utf-8\"\n    )\n    self.storage = storage or SyncRedisStorage(\n        name=name,\n        url=self.url,\n        redis_connect=self.client,\n        log=self.log,\n        config=self.config,\n    )\n\n    self.running = False\n    self.default_sleep = 0.01\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: dict = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    args, kwargs = args or (), kwargs or {}\n    uuid = str(uuid4())\n    created_at = time()\n\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    self.storage.add(uuid=uuid, task_status=model)\n    self.client.rpush(self.queue_name, f\"{task_name}:{uuid}:{priority}\")\n\n    self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n\n    model = Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n    return model\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    self._plugin_trigger(\"broker_flush_all\", broker=self)\n    self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.get","title":"<code>get(uuid)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = self.storage.get(uuid=uuid)\n    new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.listen","title":"<code>listen(worker)</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Redis \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def listen(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Redis \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    self.running = True\n\n    while self.running:\n        task_data = self.client.lpop(self.queue_name)\n        if not task_data:\n            sleep(self.default_sleep)\n            continue\n\n        task_name, uuid, priority = task_data.split(\":\")\n\n        self.storage.add_process(task_data, priority)\n\n        model_get = self.get(uuid=uuid)\n        args, kwargs, created_at = (\n            model_get.args or (),\n            model_get.kwargs or {},\n            model_get.created_at.timestamp(),\n        )\n        self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n        new_args = self._plugin_trigger(\n            \"broker_add_worker\",\n            broker=self,\n            worker=worker,\n\n            task_name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            uuid = new_args.get(\"uuid\", uuid)\n            priority = new_args.get(\"priority\", priority)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n            created_at = new_args.get(\"created_at\", created_at)\n\n        worker.add(\n            name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n        )\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    self.storage.remove_finished_task(task_broker, model)\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.start","title":"<code>start(worker)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        self.storage._running_older_tasks(worker)\n\n    self.listen(worker)\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n    self.client.close()\n</code></pre>"},{"location":"ru/api/brokers/sync_redisbroker/#qtasks.brokers.sync_redis.SyncRedisBroker.update","title":"<code>update(**kwargs)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/sync_redis.py</code> <pre><code>def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/","title":"SyncSocketBroker","text":"<p>Sync Socket Broker.</p>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker","title":"<code>SyncSocketBroker</code>","text":"<p>               Bases: <code>BaseBroker</code>, <code>SyncPluginMixin</code></p> <p>\u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043a\u0435\u0442\u044b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import SyncSocketBroker\n\nbroker = SyncSocketBroker(name=\"QueueTasks\", url=\"127.0.0.1\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>class SyncSocketBroker(BaseBroker, SyncPluginMixin):\n    \"\"\"\n    \u0411\u0440\u043e\u043a\u0435\u0440, \u0441\u043b\u0443\u0448\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043a\u0435\u0442\u044b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import SyncSocketBroker\n\n    broker = SyncSocketBroker(name=\"QueueTasks\", url=\"127.0.0.1\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `127.0.0.1`.\n                    \"\"\"\n            ),\n        ] = None,\n        port: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `6379`.\n                    \"\"\"\n            ),\n        ] = 6379,\n        storage: Annotated[\n            Optional[\"BaseStorage\"],\n            Doc(\n                \"\"\"\n                    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncSocketBroker.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n            port (int, optional): \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `8765`.\n            storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url or \"127.0.0.1\"\n        self.port = port\n        self.events = self.events or SyncEvents()\n\n        self.client = None\n        self.storage = storage or SyncRedisStorage(\n            name=name,\n            log=self.log,\n            config=self.config,\n        )\n        self.default_sleep = 0.01\n        self.running = False\n\n        self.queue = Queue()\n        self._serve_task = None\n        self._listen_task = None\n\n    def handle_connection(self, reader, writer):\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.\n\n        Args:\n            reader: \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n            writer: \u041f\u0438\u0441\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n        \"\"\"\n        conn = reader\n        try:\n            data = conn.recv(4096)\n            if not data:\n                return\n            message = json.loads(data.decode())\n            task_name = message[\"task_name\"]\n            uuid = message[\"uuid\"]\n            priority = message[\"priority\"]\n            args = message.get(\"args\", ())\n            kwargs = message.get(\"kwargs\", {})\n            created_at = message[\"created_at\"]\n\n            self.storage.add(\n                uuid=uuid,\n                task_status=TaskStatusNewSchema(\n                    task_name=task_name,\n                    priority=priority,\n                    args=args,\n                    kwargs=kwargs,\n                    created_at=created_at,\n                    updated_at=created_at,\n                ),\n            )\n\n            self.queue.put((task_name, uuid, priority))\n            conn.sendall(b\"OK\")\n        finally:\n            with contextlib.suppress(Exception):\n                conn.shutdown(socket.SHUT_RDWR)\n                conn.close()\n\n    def listen(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ):\n        \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n        self.running = True\n\n        while self.running:\n            try:\n                item = self.queue.get(timeout=0.1)\n            except Empty:\n                continue\n            if item is None:\n                break\n\n            task_name, uuid, priority = item\n            task_data = self.get(uuid)\n            args, kwargs, created_at = task_data.args, task_data.kwargs, task_data.created_at\n\n            self.storage.add_process(f\"{task_name}:{uuid}:{priority}\", priority)\n\n            model_get = self.get(uuid=uuid)\n            args, kwargs, created_at = (\n                model_get.args or (),\n                model_get.kwargs or {},\n                model_get.created_at.timestamp(),\n            )\n            self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n            new_args = self._plugin_trigger(\n                \"broker_add_worker\",\n                broker=self,\n                worker=worker,\n\n                task_name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kw=kwargs,\n                created_at=created_at,\n                return_last=True\n            )\n            if new_args:\n                task_name = new_args.get(\"task_name\", task_name)\n                uuid = new_args.get(\"uuid\", uuid)\n                priority = new_args.get(\"priority\", priority)\n                args = new_args.get(\"args\", args)\n                kwargs = new_args.get(\"kw\", kwargs)\n                created_at = new_args.get(\"created_at\", created_at)\n            worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n            )\n\n    def add(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        extra: dict = None,\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n            extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n        Returns:\n            Task: `schemas.task.Task`\n        \"\"\"\n        atexit.register(self.stop)\n        atexit.register(self.storage.stop)\n\n        args, kwargs = args or (), kwargs or {}\n        uuid = str(uuid4())\n        created_at = time()\n        model = TaskStatusNewSchema(\n            task_name=task_name,\n            priority=priority,\n            created_at=created_at,\n            updated_at=created_at,\n            args=args,\n            kwargs=kwargs\n        )\n\n        if extra:\n            model = self._dynamic_model(model=model, extra=extra)\n\n        new_model = self._plugin_trigger(\n            \"broker_add_before\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        with socket.create_connection((self.url, self.port)) as s:\n            payload = asdict(model)\n            payload.update({\"uuid\": uuid})\n            s.sendall(json.dumps(payload).encode())\n            try:\n                s.settimeout(2.0)\n                _ = s.recv(1024)\n            except Exception:\n                pass\n\n        self._plugin_trigger(\n            \"broker_add_after\",\n            broker=self,\n            storage=self.storage,\n            model=model\n        )\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=task_name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        task = self.storage.get(uuid=uuid)\n        new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n        if new_task:\n            task = new_task.get(\"task\", task)\n        return task\n\n    def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return self.storage.update(**kwargs)\n\n    def start(\n        self,\n        worker: Annotated[\n            \"BaseWorker\",\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n        Args:\n            worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n        self.storage.start()\n\n        if self.config.delete_finished_tasks:\n            self.storage._delete_finished_tasks()\n\n        if self.config.running_older_tasks:\n            self.storage._running_older_tasks(worker)\n\n        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.client.bind((self.url, self.port))\n        self.client.listen(128)\n        self.running = True\n\n        self._listen_task = threading.Thread(\n            target=self.listen, args=(worker,), name=\"broker-listen\", daemon=True\n        )\n        self._listen_task.start()\n\n        def _serve():\n            while self.running:\n                try:\n                    conn, _addr = self.client.accept()\n                except OSError:\n                    break\n                try:\n                    self.handle_connection(conn, conn)\n                except Exception:\n                    with contextlib.suppress(Exception):\n                        conn.close()\n\n        self._serve_task = threading.Thread(target=_serve, name=\"broker-serve\", daemon=True)\n        self._serve_task.start()\n\n        try:\n            while self._serve_task.is_alive():\n                self._serve_task.join(timeout=0.5)\n        except KeyboardInterrupt:\n            pass\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n        self._plugin_trigger(\"broker_stop\", broker=self)\n        self.running = False\n\n        with contextlib.suppress(Exception):\n            self.queue.put_nowait(None)\n\n        if self.client:\n            with contextlib.suppress(Exception):\n                self.client.shutdown(socket.SHUT_RDWR)\n                self.client.close()\n\n            self.client = None\n\n        if self._serve_task and self._serve_task.is_alive():\n            with contextlib.suppress(Exception):\n                self._serve_task.join(timeout=2.0)\n\n        if self._listen_task and self._listen_task.is_alive():\n            with contextlib.suppress(Exception):\n                self._listen_task.join(timeout=2.0)\n\n    def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_model = self._plugin_trigger(\n            \"broker_remove_finished_task\",\n            broker=self,\n            storage=self.storage,\n            model=model,\n            return_last=True\n        )\n        if new_model:\n            model = new_model.get(\"model\", model)\n\n        self.storage.remove_finished_task(task_broker, model)\n        return\n\n    def _running_older_tasks(self, worker):\n        self._plugin_trigger(\"broker_running_older_tasks\", broker=self, worker=worker)\n        return self.storage._running_older_tasks(worker)\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        self._plugin_trigger(\"broker_flush_all\", broker=self)\n        self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.__init__","title":"<code>__init__(name='QueueTasks', url=None, port=6379, storage=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncSocketBroker.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>QueueTasks</code>.</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>AsyncRedisStorage</code>.</p> <code>None</code> <code>port</code> <code>int</code> <p>\u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>8765</code>.</p> <code>6379</code> <code>storage</code> <code>BaseStorage</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `127.0.0.1`.\n                \"\"\"\n        ),\n    ] = None,\n    port: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `6379`.\n                \"\"\"\n        ),\n    ] = 6379,\n    storage: Annotated[\n        Optional[\"BaseStorage\"],\n        Doc(\n            \"\"\"\n                \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f SyncSocketBroker.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `AsyncRedisStorage`.\n        port (int, optional): \u041f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u043e\u043a\u0435\u0442\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `8765`.\n        storage (BaseStorage, optional): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url or \"127.0.0.1\"\n    self.port = port\n    self.events = self.events or SyncEvents()\n\n    self.client = None\n    self.storage = storage or SyncRedisStorage(\n        name=name,\n        log=self.log,\n        config=self.config,\n    )\n    self.default_sleep = 0.01\n    self.running = False\n\n    self.queue = Queue()\n    self._serve_task = None\n    self._listen_task = None\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.add","title":"<code>add(task_name, priority=0, extra=None, args=None, kwargs=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.</p> <code>0</code> <code>extra</code> <code>dict</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> <code>None</code> <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p><code>schemas.task.Task</code></p> Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def add(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                \"\"\"\n        ),\n    ] = 0,\n    extra: dict = None,\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ] = None,\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0430\u043d\u0438\u044e: 0.\n        extra (dict, optional): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict, optional): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n\n    Returns:\n        Task: `schemas.task.Task`\n    \"\"\"\n    atexit.register(self.stop)\n    atexit.register(self.storage.stop)\n\n    args, kwargs = args or (), kwargs or {}\n    uuid = str(uuid4())\n    created_at = time()\n    model = TaskStatusNewSchema(\n        task_name=task_name,\n        priority=priority,\n        created_at=created_at,\n        updated_at=created_at,\n        args=args,\n        kwargs=kwargs\n    )\n\n    if extra:\n        model = self._dynamic_model(model=model, extra=extra)\n\n    new_model = self._plugin_trigger(\n        \"broker_add_before\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    with socket.create_connection((self.url, self.port)) as s:\n        payload = asdict(model)\n        payload.update({\"uuid\": uuid})\n        s.sendall(json.dumps(payload).encode())\n        try:\n            s.settimeout(2.0)\n            _ = s.recv(1024)\n        except Exception:\n            pass\n\n    self._plugin_trigger(\n        \"broker_add_after\",\n        broker=self,\n        storage=self.storage,\n        model=model\n    )\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=task_name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    self._plugin_trigger(\"broker_flush_all\", broker=self)\n    self.storage.flush_all()\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.get","title":"<code>get(uuid)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    task = self.storage.get(uuid=uuid)\n    new_task = self._plugin_trigger(\"broker_get\", broker=self, task=task, return_last=True)\n    if new_task:\n        task = new_task.get(\"task\", task)\n    return task\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.handle_connection","title":"<code>handle_connection(reader, writer)</code>","text":"<p>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>reader</code> <p>\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> required <code>writer</code> <p>\u041f\u0438\u0441\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> required Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def handle_connection(self, reader, writer):\n    \"\"\"\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.\n\n    Args:\n        reader: \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n        writer: \u041f\u0438\u0441\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n    \"\"\"\n    conn = reader\n    try:\n        data = conn.recv(4096)\n        if not data:\n            return\n        message = json.loads(data.decode())\n        task_name = message[\"task_name\"]\n        uuid = message[\"uuid\"]\n        priority = message[\"priority\"]\n        args = message.get(\"args\", ())\n        kwargs = message.get(\"kwargs\", {})\n        created_at = message[\"created_at\"]\n\n        self.storage.add(\n            uuid=uuid,\n            task_status=TaskStatusNewSchema(\n                task_name=task_name,\n                priority=priority,\n                args=args,\n                kwargs=kwargs,\n                created_at=created_at,\n                updated_at=created_at,\n            ),\n        )\n\n        self.queue.put((task_name, uuid, priority))\n        conn.sendall(b\"OK\")\n    finally:\n        with contextlib.suppress(Exception):\n            conn.shutdown(socket.SHUT_RDWR)\n            conn.close()\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.listen","title":"<code>listen(worker)</code>","text":"<p>\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def listen(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n):\n    \"\"\"\u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u043e\u043a\u0435\u0442\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043e\u0440\u043a\u0435\u0440\u0443.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_listen_start\", broker=self, worker=worker)\n    self.running = True\n\n    while self.running:\n        try:\n            item = self.queue.get(timeout=0.1)\n        except Empty:\n            continue\n        if item is None:\n            break\n\n        task_name, uuid, priority = item\n        task_data = self.get(uuid)\n        args, kwargs, created_at = task_data.args, task_data.kwargs, task_data.created_at\n\n        self.storage.add_process(f\"{task_name}:{uuid}:{priority}\", priority)\n\n        model_get = self.get(uuid=uuid)\n        args, kwargs, created_at = (\n            model_get.args or (),\n            model_get.kwargs or {},\n            model_get.created_at.timestamp(),\n        )\n        self.log.info(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: {uuid}\")\n        new_args = self._plugin_trigger(\n            \"broker_add_worker\",\n            broker=self,\n            worker=worker,\n\n            task_name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_args:\n            task_name = new_args.get(\"task_name\", task_name)\n            uuid = new_args.get(\"uuid\", uuid)\n            priority = new_args.get(\"priority\", priority)\n            args = new_args.get(\"args\", args)\n            kwargs = new_args.get(\"kw\", kwargs)\n            created_at = new_args.get(\"created_at\", created_at)\n        worker.add(\n            name=task_name,\n            uuid=uuid,\n            priority=int(priority),\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n        )\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_model = self._plugin_trigger(\n        \"broker_remove_finished_task\",\n        broker=self,\n        storage=self.storage,\n        model=model,\n        return_last=True\n    )\n    if new_model:\n        model = new_model.get(\"model\", model)\n\n    self.storage.remove_finished_task(task_broker, model)\n    return\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.start","title":"<code>start(worker)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> <p>Parameters:</p> Name Type Description Default <code>worker</code> <code>BaseWorker</code> <p>\u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def start(\n    self,\n    worker: Annotated[\n        \"BaseWorker\",\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\n\n    Args:\n        worker (BaseWorker): \u041a\u043b\u0430\u0441\u0441 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self._plugin_trigger(\"broker_start\", broker=self, worker=worker)\n    self.storage.start()\n\n    if self.config.delete_finished_tasks:\n        self.storage._delete_finished_tasks()\n\n    if self.config.running_older_tasks:\n        self.storage._running_older_tasks(worker)\n\n    self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    self.client.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    self.client.bind((self.url, self.port))\n    self.client.listen(128)\n    self.running = True\n\n    self._listen_task = threading.Thread(\n        target=self.listen, args=(worker,), name=\"broker-listen\", daemon=True\n    )\n    self._listen_task.start()\n\n    def _serve():\n        while self.running:\n            try:\n                conn, _addr = self.client.accept()\n            except OSError:\n                break\n            try:\n                self.handle_connection(conn, conn)\n            except Exception:\n                with contextlib.suppress(Exception):\n                    conn.close()\n\n    self._serve_task = threading.Thread(target=_serve, name=\"broker-serve\", daemon=True)\n    self._serve_task.start()\n\n    try:\n        while self._serve_task.is_alive():\n            self._serve_task.join(timeout=0.5)\n    except KeyboardInterrupt:\n        pass\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.</p> Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0431\u0440\u043e\u043a\u0435\u0440.\"\"\"\n    self._plugin_trigger(\"broker_stop\", broker=self)\n    self.running = False\n\n    with contextlib.suppress(Exception):\n        self.queue.put_nowait(None)\n\n    if self.client:\n        with contextlib.suppress(Exception):\n            self.client.shutdown(socket.SHUT_RDWR)\n            self.client.close()\n\n        self.client = None\n\n    if self._serve_task and self._serve_task.is_alive():\n        with contextlib.suppress(Exception):\n            self._serve_task.join(timeout=2.0)\n\n    if self._listen_task and self._listen_task.is_alive():\n        with contextlib.suppress(Exception):\n            self._listen_task.join(timeout=2.0)\n</code></pre>"},{"location":"ru/api/brokers/sync_socket/#qtasks.brokers.sync_socket.SyncSocketBroker.update","title":"<code>update(**kwargs)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/brokers/sync_socket.py</code> <pre><code>def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = self._plugin_trigger(\"broker_update\", broker=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return self.storage.update(**kwargs)\n</code></pre>"},{"location":"ru/api/classes/async_redis_commands/","title":"AsyncRedisCommandQueue","text":"<p>Async Redis command queue.</p>"},{"location":"ru/api/classes/async_redis_commands/#qtasks.contrib.redis.async_queue_client.AsyncRedisCommandQueue","title":"<code>AsyncRedisCommandQueue</code>","text":"<p><code>AsyncRedisCommandQueue</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 <code>Redis</code>.</p>"},{"location":"ru/api/classes/async_redis_commands/#qtasks.contrib.redis.async_queue_client.AsyncRedisCommandQueue--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>import asyncio\nfrom qtasks import QueueTasks\nfrom qtasks.contrib.redis import AsyncRedisCommandQueue\n\nredis_contrib = AsyncRedisCommandQueue(redis)\nasyncio.run(redis_contrib.execute(\"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"]))\n</code></pre> Source code in <code>src/qtasks/contrib/redis/async_queue_client.py</code> <pre><code>class AsyncRedisCommandQueue:\n    \"\"\"\n    `AsyncRedisCommandQueue` - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 `Redis`.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    import asyncio\n    from qtasks import QueueTasks\n    from qtasks.contrib.redis import AsyncRedisCommandQueue\n\n    redis_contrib = AsyncRedisCommandQueue(redis)\n    asyncio.run(redis_contrib.execute(\"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"]))\n    ```\n    \"\"\"\n\n    def __init__(self, redis: aioredis.Redis, log: Logger = None):\n        \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.\n\n        Args:\n            redis (redis.asyncio.Redis): \u043a\u043b\u0430\u0441\u0441 `Redis`.\n            log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n        \"\"\"\n        self.log = self._get_log(log)\n        self.redis = redis\n        self.queue = asyncio.Queue()\n        self.worker_task = None\n        self.lock = asyncio.Lock()\n\n    async def _worker(self):\n        while not self.queue.empty():\n            cmd, args, kwargs = await self.queue.get()\n            self.log.debug(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {cmd} \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 {args} \u0438 {kwargs} \u0432\u044b\u0437\u0432\u0430\u043d\u0430\")\n            try:\n                await getattr(self.redis, cmd)(*args, **kwargs)\n            except Exception as e:\n                self.log.error(f\"\u041e\u0448\u0438\u0431\u043a\u0430 Redis \u043a\u043e\u043c\u0430\u043d\u0434\u044b {cmd}: {e}. Args: {args}, Kwargs: {kwargs}\")\n            self.queue.task_done()\n\n        async with self.lock:\n            self.worker_task = None\n\n    async def execute(self, cmd: str, *args, **kwargs):\n        \"\"\"\u0417\u0430\u043f\u0440\u043e\u0441 \u0432 `Redis`.\n\n        Args:\n            cmd (str): \u041a\u043e\u043c\u0430\u043d\u0434\u0430.\n            args(tuple, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n            kwargs(dict, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n        \"\"\"\n        await self.queue.put((cmd, args, kwargs))\n        async with self.lock:\n            if self.worker_task is None or self.worker_task.done():\n                self.worker_task = asyncio.create_task(self._worker())\n\n    def _get_log(self, log: Union[Logger, None]):\n        if log is None:\n            import qtasks._state\n\n            log = qtasks._state.log_main\n        return log.with_subname(\"AsyncRedisCommandQueue\")\n</code></pre>"},{"location":"ru/api/classes/async_redis_commands/#qtasks.contrib.redis.async_queue_client.AsyncRedisCommandQueue.__init__","title":"<code>__init__(redis, log=None)</code>","text":"<p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>redis</code> <code>Redis</code> <p>\u043a\u043b\u0430\u0441\u0441 <code>Redis</code>.</p> required <code>log</code> <code>Logger</code> <p>\u043a\u043b\u0430\u0441\u0441 <code>qtasks.logs.Logger</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks._state.log_main</code>.</p> <code>None</code> Source code in <code>src/qtasks/contrib/redis/async_queue_client.py</code> <pre><code>def __init__(self, redis: aioredis.Redis, log: Logger = None):\n    \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.\n\n    Args:\n        redis (redis.asyncio.Redis): \u043a\u043b\u0430\u0441\u0441 `Redis`.\n        log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n    \"\"\"\n    self.log = self._get_log(log)\n    self.redis = redis\n    self.queue = asyncio.Queue()\n    self.worker_task = None\n    self.lock = asyncio.Lock()\n</code></pre>"},{"location":"ru/api/classes/async_redis_commands/#qtasks.contrib.redis.async_queue_client.AsyncRedisCommandQueue.execute","title":"<code>execute(cmd, *args, **kwargs)</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0440\u043e\u0441 \u0432 <code>Redis</code>.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>\u041a\u043e\u043c\u0430\u043d\u0434\u0430.</p> required <code>args</code> <code>tuple</code> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.</p> <code>{}</code> Source code in <code>src/qtasks/contrib/redis/async_queue_client.py</code> <pre><code>async def execute(self, cmd: str, *args, **kwargs):\n    \"\"\"\u0417\u0430\u043f\u0440\u043e\u0441 \u0432 `Redis`.\n\n    Args:\n        cmd (str): \u041a\u043e\u043c\u0430\u043d\u0434\u0430.\n        args(tuple, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n        kwargs(dict, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n    \"\"\"\n    await self.queue.put((cmd, args, kwargs))\n    async with self.lock:\n        if self.worker_task is None or self.worker_task.done():\n            self.worker_task = asyncio.create_task(self._worker())\n</code></pre>"},{"location":"ru/api/classes/baseqtasks/","title":"BaseQueueTasks","text":"<p>Base QueueTasks.</p>"},{"location":"ru/api/classes/baseqtasks/#qtasks.base.qtasks.BaseQueueTasks","title":"<code>BaseQueueTasks</code>","text":"<p>Base \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f QueueTasks. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0449\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.</p> Source code in <code>src/qtasks/base/qtasks.py</code> <pre><code>class BaseQueueTasks:\n    \"\"\"Base \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f QueueTasks. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0449\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u0438.\"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438(\u0412\u043e\u0440\u043a\u0435\u0440, \u0411\u0440\u043e\u043a\u0435\u0440 \u0438 \u0442.\u043f.)\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        broker_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n                    \"\"\"\n            ),\n        ] = None,\n        worker: Annotated[\n            Optional[\"BaseWorker\"],\n            Doc(\n                \"\"\"\n                    \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f QueueTasks.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n            broker_url (str, optional): URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n            worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self.name = name\n\n        self.version: Annotated[str, Doc(\"\u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430.\")] = \"1.6.0\"\n\n        self.config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433, \u0442\u0438\u043f `qtasks.configs.QueueConfig`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueConfig()`.\n                \"\"\"\n            ),\n        ] = (\n            config or QueueConfig()\n        )\n        self.config.subscribe(self._update_configs)\n\n        self.log = (\n            log.with_subname(\"QueueTasks\")\n            if log\n            else Logger(\n                name=self.name,\n                subname=\"QueueTasks\",\n                default_level=self.config.logs_default_level_server,\n                format=self.config.logs_format,\n            )\n        )\n\n        self.broker: \"BaseBroker\" = broker\n        self.worker: \"BaseWorker\" = worker\n        self.starter: Union[\"BaseStarter\", None] = None\n\n        self.routers: Annotated[\n            List[Router],\n            Doc(\n                \"\"\"\n                \u0420\u043e\u0443\u0442\u0435\u0440\u044b, \u0442\u0438\u043f `qtasks.routers.Router`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n            ),\n        ] = []\n\n        self.tasks: Annotated[\n            Dict[str, TaskExecSchema],\n            Doc(\n                \"\"\"\n                \u0417\u0430\u0434\u0430\u0447\u0438, \u0442\u0438\u043f `{task_name:qtasks.schemas.TaskExecSchema}`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n                \"\"\"\n            ),\n        ] = {}\n\n        self.plugins: Annotated[\n            Dict[str, List[\"BasePlugin\"]],\n            Doc(\n                \"\"\"\n                \u0417\u0430\u0434\u0430\u0447\u0438, \u0442\u0438\u043f `{trigger_name:[qtasks.plugins.base.BasePlugin]}`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n                \"\"\"\n            ),\n        ] = {}\n\n        self.events = events\n\n        self._method: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\u041c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f QueueTasks.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            ),\n        ] = None\n\n    @overload\n    def task(\n        self,\n        name: Union[str, None] = None,\n        *,\n        priority: Union[int, None] = None,\n        echo: bool = False,\n        max_time: Union[float, None] = None,\n        retry: Union[int, None] = None,\n        retry_on_exc: Union[List[Type[Exception]], None] = None,\n        decode: Union[Callable, None] = None,\n        tags: Union[List[str], None] = None,\n        description: Union[str, None] = None,\n        generate_handler: Union[Callable, None] = None,\n        executor: Union[Type[\"BaseTaskExecutor\"], None] = None,\n        middlewares_before: Union[List[\"TaskMiddleware\"], None] = None,\n        middlewares_after: Union[List[\"TaskMiddleware\"], None] = None,\n        **kwargs\n    ) -&gt; Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]:\n        ...\n\n    def task(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                    \"\"\"\n            ),\n        ] = None,\n        *,\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                    \"\"\"\n            ),\n        ] = None,\n        echo: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                    \"\"\"\n            ),\n        ] = False,\n        max_time: Annotated[\n            Union[float, None],\n            Doc(\n                \"\"\"\n                    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            )\n        ] = None,\n        retry: Annotated[\n            Union[int, None],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        retry_on_exc: Annotated[\n            Union[List[Type[Exception]], None],\n            Doc(\n                \"\"\"\n                    \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        decode: Annotated[\n            Union[Callable, None],\n            Doc(\n                \"\"\"\n                    \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        tags: Annotated[\n            Union[List[str], None],\n            Doc(\n                \"\"\"\n                    \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        description: Annotated[\n            Union[str, None],\n            Doc(\n                \"\"\"\n                    \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        generate_handler: Annotated[\n            Union[Callable, None],\n            Doc(\n                \"\"\"\n                    \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        executor: Annotated[\n            Type[\"BaseTaskExecutor\"],\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_before: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_after: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs\n    ) -&gt; Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]:\n        \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n        Raises:\n            ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n            ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n        Returns:\n            SyncTask | AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        def wrapper(func):\n            nonlocal priority, middlewares_before, middlewares_after\n\n            task_name = name or func.__name__\n            priority = priority or self.config.default_task_priority\n\n            task_name = name or func.__name__\n            if task_name in self.tasks:\n                raise ValueError(f\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c {task_name} \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430!\")\n\n            if priority is None:\n                priority = self.config.default_task_priority\n\n            generating = False\n            if inspect.isgeneratorfunction(func):\n                generating = \"sync\"\n            if inspect.isasyncgenfunction(func):\n                generating = \"async\"\n\n            middlewares_before = middlewares_before or []\n            middlewares_after = middlewares_after or []\n\n            model = TaskExecSchema(\n                name=task_name,\n                priority=priority,\n                func=func,\n                awaiting=inspect.iscoroutinefunction(func),\n                generating=generating,\n                echo=echo,\n                max_time=max_time,\n                retry=retry,\n                retry_on_exc=retry_on_exc,\n                decode=decode,\n                tags=tags,\n                description=description,\n                generate_handler=generate_handler,\n                executor=executor,\n                middlewares_before=middlewares_before,\n                middlewares_after=middlewares_after,\n                extra=kwargs\n            )\n\n            self.tasks[task_name] = model\n            self.worker._tasks[task_name] = model\n            if self._method not in [\"async\", \"sync\"]:\n                raise ValueError(f\"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}\")\n\n            method = AsyncTask if self._method == \"async\" else SyncTask\n            return method(\n                app=self,\n                task_name=model.name,\n                priority=model.priority,\n                echo=model.echo,\n                max_time=model.max_time,\n                retry=model.retry,\n                retry_on_exc=model.retry_on_exc,\n                decode=model.decode,\n                tags=model.tags,\n                description=model.description,\n                generate_handler=model.generate_handler,\n                executor=model.executor,\n                middlewares_before=model.middlewares_before,\n                middlewares_after=model.middlewares_after,\n                extra=model.extra\n            )\n\n        if callable(name):\n            func = name\n            name = func.__name__\n            return wrapper(func)\n        return wrapper\n\n    def include_router(\n        self,\n        router: Annotated[\n            Router,\n            Doc(\n                \"\"\"\n                    \u0420\u043e\u0443\u0442\u0435\u0440 `qtasks.routers.Router`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c Router.\n\n        Args:\n            router (Router): \u0420\u043e\u0443\u0442\u0435\u0440 `qtasks.routers.Router`.\n        \"\"\"\n        self.routers.append(router)\n        self.tasks.update(router.tasks)\n        self.worker._tasks.update(router.tasks)\n\n    def add_plugin(\n        self,\n        plugin: \"BasePlugin\",\n        trigger_names: Optional[List[str]] = None,\n        component: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"\n        \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d.\n\n        Args:\n            plugin (Type[BasePlugin]): \u041a\u043b\u0430\u0441\u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n            trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n            component (str, optional): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        data = {\n            \"worker\": self.worker,\n            \"broker\": self.broker,\n            \"storage\": self.broker.storage,\n            \"global_config\": self.broker.storage.global_config,\n        }\n\n        trigger_names = trigger_names or [\"Globals\"]\n\n        if not component:\n            for name in trigger_names:\n                if name not in self.plugins:\n                    self.plugins.update({name: [plugin]})\n                else:\n                    self.plugins[name].append(plugin)\n            return\n\n        component_data = data.get(component)\n        if not component_data:\n            raise KeyError(f\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 {component}!\")\n        component_data.add_plugin(plugin, trigger_names)\n        return\n\n    def add_middleware(self, middleware: Type[\"BaseMiddleware\"], **kwargs) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u044c.\n\n        Args:\n            middleware (Type[BaseMiddleware]): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u044c.\n\n        Raises:\n            ImportError: \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c Middleware: \u041e\u043d \u043d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043a\u043b\u0430\u0441\u0441\u0443 BaseMiddleware!\n        \"\"\"\n        if (\n            not middleware.__base__ or middleware.__base__.__base__.__name__ != \"BaseMiddleware\"\n        ):\n            raise ImportError(\n                f\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c Middleware {middleware.__name__}: \u041e\u043d \u043d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043a\u043b\u0430\u0441\u0441\u0443 BaseMiddleware!\"\n            )\n        if middleware.__base__.__name__ == \"TaskMiddleware\":\n            position = kwargs.get(\"position\", \"before\")\n            if position == \"before\":\n                self.worker.task_middlewares_before.append(middleware)\n            elif position == \"after\":\n                self.worker.task_middlewares_after.append(middleware)\n        self.log.debug(f\"\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u044c {middleware.__name__} \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d.\")\n        return\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        for plugin in self.plugins.values():\n            plugin.init(self)\n\n    def _registry_tasks(self):\n        \"\"\"\n        \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0440\u0435\u0435\u0441\u0442\u0440\u0430 \u0437\u0430\u0434\u0430\u0447.\n\n        \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 `self.tasks` \u0438 `self.worker._tasks` \u0432\u0441\u0435\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438,\n        \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 `TaskRegistry`, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044f \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n        \"\"\"\n        all_tasks = TaskRegistry.all_tasks()\n\n        for task in all_tasks.values():\n            if task.priority is None:\n                task.priority = self.config.default_task_priority\n\n        self.tasks.update(all_tasks)\n        self.worker._tasks.update(all_tasks)\n\n    def _set_state(self):\n        \"\"\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 `qtasks._state`.\"\"\"\n        qtasks._state.app_main = self\n        qtasks._state.log_main = self.log\n\n    def _update_configs(self, config: QueueConfig, key, value):\n        \"\"\"\n        \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f.\n            key (str): \u041a\u043b\u044e\u0447 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.\n            value (Any): \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.\n        \"\"\"\n        if key == \"logs_default_level_server\":\n            self.log.default_level = value\n            self.log = self.log.update_logger()\n            self._update_logs(default_level=value)\n\n    def _update_logs(self, **kwargs):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043b\u043e\u0433\u0438.\"\"\"\n        if self.worker:\n            self.worker.log = self.worker.log.update_logger(**kwargs)\n        if self.broker:\n            self.broker.log = self.broker.log.update_logger(**kwargs)\n            if self.broker.storage:\n                self.broker.storage.log = self.broker.storage.log.update_logger(\n                    **kwargs\n                )\n                if self.broker.storage.global_config:\n                    self.broker.storage.global_config.log = (\n                        self.broker.storage.global_config.log.update_logger(**kwargs)\n                    )\n</code></pre>"},{"location":"ru/api/classes/baseqtasks/#qtasks.base.qtasks.BaseQueueTasks.__init__","title":"<code>__init__(name='QueueTasks', broker_url=None, broker=None, worker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f QueueTasks.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>QueueTasks</code>.</p> <code>'QueueTasks'</code> <code>broker_url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>broker</code> <code>BaseBroker</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.brokers.AsyncRedisBroker</code>.</p> <code>None</code> <code>worker</code> <code>BaseWorker</code> <p>\u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.workers.AsyncWorker</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/base/qtasks.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438(\u0412\u043e\u0440\u043a\u0435\u0440, \u0411\u0440\u043e\u043a\u0435\u0440 \u0438 \u0442.\u043f.)\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    broker_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u043e\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 url.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n                \"\"\"\n        ),\n    ] = None,\n    worker: Annotated[\n        Optional[\"BaseWorker\"],\n        Doc(\n            \"\"\"\n                \u0412\u043e\u0440\u043a\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f QueueTasks.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n        broker_url (str, optional): URL \u0434\u043b\u044f \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n        worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.workers.AsyncWorker`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self.name = name\n\n    self.version: Annotated[str, Doc(\"\u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430.\")] = \"1.6.0\"\n\n    self.config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n            \u041a\u043e\u043d\u0444\u0438\u0433, \u0442\u0438\u043f `qtasks.configs.QueueConfig`.\n\n            \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueConfig()`.\n            \"\"\"\n        ),\n    ] = (\n        config or QueueConfig()\n    )\n    self.config.subscribe(self._update_configs)\n\n    self.log = (\n        log.with_subname(\"QueueTasks\")\n        if log\n        else Logger(\n            name=self.name,\n            subname=\"QueueTasks\",\n            default_level=self.config.logs_default_level_server,\n            format=self.config.logs_format,\n        )\n    )\n\n    self.broker: \"BaseBroker\" = broker\n    self.worker: \"BaseWorker\" = worker\n    self.starter: Union[\"BaseStarter\", None] = None\n\n    self.routers: Annotated[\n        List[Router],\n        Doc(\n            \"\"\"\n            \u0420\u043e\u0443\u0442\u0435\u0440\u044b, \u0442\u0438\u043f `qtasks.routers.Router`.\n\n            \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            \"\"\"\n        ),\n    ] = []\n\n    self.tasks: Annotated[\n        Dict[str, TaskExecSchema],\n        Doc(\n            \"\"\"\n            \u0417\u0430\u0434\u0430\u0447\u0438, \u0442\u0438\u043f `{task_name:qtasks.schemas.TaskExecSchema}`.\n\n            \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n            \"\"\"\n        ),\n    ] = {}\n\n    self.plugins: Annotated[\n        Dict[str, List[\"BasePlugin\"]],\n        Doc(\n            \"\"\"\n            \u0417\u0430\u0434\u0430\u0447\u0438, \u0442\u0438\u043f `{trigger_name:[qtasks.plugins.base.BasePlugin]}`.\n\n            \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n            \"\"\"\n        ),\n    ] = {}\n\n    self.events = events\n\n    self._method: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\u041c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f QueueTasks.\n\n            \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        ),\n    ] = None\n</code></pre>"},{"location":"ru/api/classes/baseqtasks/#qtasks.base.qtasks.BaseQueueTasks.add_middleware","title":"<code>add_middleware(middleware, **kwargs)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u044c.</p> <p>Parameters:</p> Name Type Description Default <code>middleware</code> <code>Type[BaseMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u044c.</p> required <p>Raises:</p> Type Description <code>ImportError</code> <p>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c Middleware: \u041e\u043d \u043d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043a\u043b\u0430\u0441\u0441\u0443 BaseMiddleware!</p> Source code in <code>src/qtasks/base/qtasks.py</code> <pre><code>def add_middleware(self, middleware: Type[\"BaseMiddleware\"], **kwargs) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u044c.\n\n    Args:\n        middleware (Type[BaseMiddleware]): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u044c.\n\n    Raises:\n        ImportError: \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c Middleware: \u041e\u043d \u043d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043a\u043b\u0430\u0441\u0441\u0443 BaseMiddleware!\n    \"\"\"\n    if (\n        not middleware.__base__ or middleware.__base__.__base__.__name__ != \"BaseMiddleware\"\n    ):\n        raise ImportError(\n            f\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c Middleware {middleware.__name__}: \u041e\u043d \u043d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043a\u043b\u0430\u0441\u0441\u0443 BaseMiddleware!\"\n        )\n    if middleware.__base__.__name__ == \"TaskMiddleware\":\n        position = kwargs.get(\"position\", \"before\")\n        if position == \"before\":\n            self.worker.task_middlewares_before.append(middleware)\n        elif position == \"after\":\n            self.worker.task_middlewares_after.append(middleware)\n    self.log.debug(f\"\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u044c {middleware.__name__} \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d.\")\n    return\n</code></pre>"},{"location":"ru/api/classes/baseqtasks/#qtasks.base.qtasks.BaseQueueTasks.add_plugin","title":"<code>add_plugin(plugin, trigger_names=None, component=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>Type[BasePlugin]</code> <p>\u041a\u043b\u0430\u0441\u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</p> required <code>trigger_names</code> <code>List[str]</code> <p>\u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Globals</code>.</p> <code>None</code> <code>component</code> <code>str</code> <p>\u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/base/qtasks.py</code> <pre><code>def add_plugin(\n    self,\n    plugin: \"BasePlugin\",\n    trigger_names: Optional[List[str]] = None,\n    component: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d.\n\n    Args:\n        plugin (Type[BasePlugin]): \u041a\u043b\u0430\u0441\u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n        trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n        component (str, optional): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    data = {\n        \"worker\": self.worker,\n        \"broker\": self.broker,\n        \"storage\": self.broker.storage,\n        \"global_config\": self.broker.storage.global_config,\n    }\n\n    trigger_names = trigger_names or [\"Globals\"]\n\n    if not component:\n        for name in trigger_names:\n            if name not in self.plugins:\n                self.plugins.update({name: [plugin]})\n            else:\n                self.plugins[name].append(plugin)\n        return\n\n    component_data = data.get(component)\n    if not component_data:\n        raise KeyError(f\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 {component}!\")\n    component_data.add_plugin(plugin, trigger_names)\n    return\n</code></pre>"},{"location":"ru/api/classes/baseqtasks/#qtasks.base.qtasks.BaseQueueTasks.include_router","title":"<code>include_router(router)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c Router.</p> <p>Parameters:</p> Name Type Description Default <code>router</code> <code>Router</code> <p>\u0420\u043e\u0443\u0442\u0435\u0440 <code>qtasks.routers.Router</code>.</p> required Source code in <code>src/qtasks/base/qtasks.py</code> <pre><code>def include_router(\n    self,\n    router: Annotated[\n        Router,\n        Doc(\n            \"\"\"\n                \u0420\u043e\u0443\u0442\u0435\u0440 `qtasks.routers.Router`.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c Router.\n\n    Args:\n        router (Router): \u0420\u043e\u0443\u0442\u0435\u0440 `qtasks.routers.Router`.\n    \"\"\"\n    self.routers.append(router)\n    self.tasks.update(router.tasks)\n    self.worker._tasks.update(router.tasks)\n</code></pre>"},{"location":"ru/api/classes/baseqtasks/#qtasks.base.qtasks.BaseQueueTasks.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/base/qtasks.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    for plugin in self.plugins.values():\n        plugin.init(self)\n</code></pre>"},{"location":"ru/api/classes/baseqtasks/#qtasks.base.qtasks.BaseQueueTasks.task","title":"<code>task(name=None, *, priority=None, echo=False, max_time=None, retry=None, retry_on_exc=None, decode=None, tags=None, description=None, generate_handler=None, executor=None, middlewares_before=None, middlewares_after=None, **kwargs)</code>","text":"<pre><code>task(name: Union[str, None] = None, *, priority: Union[int, None] = None, echo: bool = False, max_time: Union[float, None] = None, retry: Union[int, None] = None, retry_on_exc: Union[List[Type[Exception]], None] = None, decode: Union[Callable, None] = None, tags: Union[List[str], None] = None, description: Union[str, None] = None, generate_handler: Union[Callable, None] = None, executor: Union[Type[BaseTaskExecutor], None] = None, middlewares_before: Union[List[TaskMiddleware], None] = None, middlewares_after: Union[List[TaskMiddleware], None] = None, **kwargs) -&gt; Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]\n</code></pre> <p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>func.__name__</code>.</p> <code>None</code> <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>config.default_task_priority</code>.</p> <code>None</code> <code>echo</code> <code>bool</code> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> <code>False</code> <code>retry</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>retry_on_exc</code> <code>List[Type[Exception]]</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>decode</code> <code>Callable</code> <p>\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>tags</code> <code>List[str]</code> <p>\u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>description</code> <code>str</code> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>generate_handler</code> <code>Callable</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>executor</code> <code>Type[BaseTaskExecutor]</code> <p>\u041a\u043b\u0430\u0441\u0441 <code>BaseTaskExecutor</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>SyncTaskExecutor</code>.</p> <code>None</code> <code>middlewares_before</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <code>middlewares_after</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.</p> <code>ValueError</code> <p>\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.</p> <p>Returns:</p> Type Description <code>Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]</code> <p>SyncTask | AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/base/qtasks.py</code> <pre><code>def task(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                \"\"\"\n        ),\n    ] = None,\n    *,\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                \"\"\"\n        ),\n    ] = None,\n    echo: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                \"\"\"\n        ),\n    ] = False,\n    max_time: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n                \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        )\n    ] = None,\n    retry: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    retry_on_exc: Annotated[\n        Union[List[Type[Exception]], None],\n        Doc(\n            \"\"\"\n                \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    decode: Annotated[\n        Union[Callable, None],\n        Doc(\n            \"\"\"\n                \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    tags: Annotated[\n        Union[List[str], None],\n        Doc(\n            \"\"\"\n                \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    description: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n                \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    generate_handler: Annotated[\n        Union[Callable, None],\n        Doc(\n            \"\"\"\n                \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    executor: Annotated[\n        Type[\"BaseTaskExecutor\"],\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_before: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_after: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs\n) -&gt; Callable[[Callable[P, R]], Union[SyncTask[P, R], AsyncTask[P, R]]]:\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n        echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c (A)syncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n        retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n        middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0434\u043e \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n    Raises:\n        ValueError: \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430.\n        ValueError: \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}.\n\n    Returns:\n        SyncTask | AsyncTask: \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    def wrapper(func):\n        nonlocal priority, middlewares_before, middlewares_after\n\n        task_name = name or func.__name__\n        priority = priority or self.config.default_task_priority\n\n        task_name = name or func.__name__\n        if task_name in self.tasks:\n            raise ValueError(f\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c {task_name} \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430!\")\n\n        if priority is None:\n            priority = self.config.default_task_priority\n\n        generating = False\n        if inspect.isgeneratorfunction(func):\n            generating = \"sync\"\n        if inspect.isasyncgenfunction(func):\n            generating = \"async\"\n\n        middlewares_before = middlewares_before or []\n        middlewares_after = middlewares_after or []\n\n        model = TaskExecSchema(\n            name=task_name,\n            priority=priority,\n            func=func,\n            awaiting=inspect.iscoroutinefunction(func),\n            generating=generating,\n            echo=echo,\n            max_time=max_time,\n            retry=retry,\n            retry_on_exc=retry_on_exc,\n            decode=decode,\n            tags=tags,\n            description=description,\n            generate_handler=generate_handler,\n            executor=executor,\n            middlewares_before=middlewares_before,\n            middlewares_after=middlewares_after,\n            extra=kwargs\n        )\n\n        self.tasks[task_name] = model\n        self.worker._tasks[task_name] = model\n        if self._method not in [\"async\", \"sync\"]:\n            raise ValueError(f\"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 {self._method}\")\n\n        method = AsyncTask if self._method == \"async\" else SyncTask\n        return method(\n            app=self,\n            task_name=model.name,\n            priority=model.priority,\n            echo=model.echo,\n            max_time=model.max_time,\n            retry=model.retry,\n            retry_on_exc=model.retry_on_exc,\n            decode=model.decode,\n            tags=model.tags,\n            description=model.description,\n            generate_handler=model.generate_handler,\n            executor=model.executor,\n            middlewares_before=model.middlewares_before,\n            middlewares_after=model.middlewares_after,\n            extra=model.extra\n        )\n\n    if callable(name):\n        func = name\n        name = func.__name__\n        return wrapper(func)\n    return wrapper\n</code></pre>"},{"location":"ru/api/classes/sync_redis_commands/","title":"SyncRedisCommandQueue","text":"<p>Sync Redis command queue.</p>"},{"location":"ru/api/classes/sync_redis_commands/#qtasks.contrib.redis.sync_queue_client.SyncRedisCommandQueue","title":"<code>SyncRedisCommandQueue</code>","text":"<p><code>SyncRedisCommandQueue</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 <code>Redis</code>.</p>"},{"location":"ru/api/classes/sync_redis_commands/#qtasks.contrib.redis.sync_queue_client.SyncRedisCommandQueue--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.contrib.redis import SyncRedisCommandQueue\n\nredis_contrib = SyncRedisCommandQueue(redis)\nredis_contrib.execute(\"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"])\n</code></pre> Source code in <code>src/qtasks/contrib/redis/sync_queue_client.py</code> <pre><code>class SyncRedisCommandQueue:\n    \"\"\"\n    `SyncRedisCommandQueue` - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 `Redis`.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.contrib.redis import SyncRedisCommandQueue\n\n    redis_contrib = SyncRedisCommandQueue(redis)\n    redis_contrib.execute(\"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"])\n    ```\n    \"\"\"\n\n    def __init__(self, redis: redis.Redis, log: Logger = None):\n        \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.\n\n        Args:\n            redis (redis.asyncio.Redis): \u043a\u043b\u0430\u0441\u0441 `Redis`.\n            log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n        \"\"\"\n        self.log = self._get_log(log)\n        self.redis = redis\n        self.queue = Queue()\n        self.worker_thread = None\n        self.lock = threading.Lock()\n\n    def _worker(self):\n        while not self.queue.empty():\n            try:\n                cmd, args, kwargs = self.queue.get(timeout=2)\n                self.log.debug(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {cmd} \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 {args} \u0438 {kwargs} \u0432\u044b\u0437\u0432\u0430\u043d\u0430\")\n                try:\n                    getattr(self.redis, cmd)(*args, **kwargs)\n                except Exception as e:\n                    self.log.error(f\"\u041e\u0448\u0438\u0431\u043a\u0430 Redis \u043a\u043e\u043c\u0430\u043d\u0434\u044b {cmd}: {e}. Args: {args}, Kwargs: {kwargs}\")\n                self.queue.task_done()\n            except Empty:\n                break\n\n        with self.lock:\n            self.worker_thread = None\n\n    def execute(self, cmd: str, *args, **kwargs):\n        \"\"\"\u0417\u0430\u043f\u0440\u043e\u0441 \u0432 `Redis`.\n\n        Args:\n            cmd (str): \u041a\u043e\u043c\u0430\u043d\u0434\u0430.\n            args(tuple, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n            kwargs(dict, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n        \"\"\"\n        self.queue.put((cmd, args, kwargs))\n        with self.lock:\n            if self.worker_thread is None or not self.worker_thread.is_alive():\n                self.worker_thread = threading.Thread(target=self._worker, daemon=True)\n                self.worker_thread.start()\n\n    def _get_log(self, log: Union[Logger, None]):\n        if log is None:\n            import qtasks._state\n\n            log = qtasks._state.log_main\n        return log.with_subname(\"SyncRedisCommandQueue\")\n</code></pre>"},{"location":"ru/api/classes/sync_redis_commands/#qtasks.contrib.redis.sync_queue_client.SyncRedisCommandQueue.__init__","title":"<code>__init__(redis, log=None)</code>","text":"<p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>redis</code> <code>Redis</code> <p>\u043a\u043b\u0430\u0441\u0441 <code>Redis</code>.</p> required <code>log</code> <code>Logger</code> <p>\u043a\u043b\u0430\u0441\u0441 <code>qtasks.logs.Logger</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks._state.log_main</code>.</p> <code>None</code> Source code in <code>src/qtasks/contrib/redis/sync_queue_client.py</code> <pre><code>def __init__(self, redis: redis.Redis, log: Logger = None):\n    \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.\n\n    Args:\n        redis (redis.asyncio.Redis): \u043a\u043b\u0430\u0441\u0441 `Redis`.\n        log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n    \"\"\"\n    self.log = self._get_log(log)\n    self.redis = redis\n    self.queue = Queue()\n    self.worker_thread = None\n    self.lock = threading.Lock()\n</code></pre>"},{"location":"ru/api/classes/sync_redis_commands/#qtasks.contrib.redis.sync_queue_client.SyncRedisCommandQueue.execute","title":"<code>execute(cmd, *args, **kwargs)</code>","text":"<p>\u0417\u0430\u043f\u0440\u043e\u0441 \u0432 <code>Redis</code>.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>\u041a\u043e\u043c\u0430\u043d\u0434\u0430.</p> required <code>args</code> <code>tuple</code> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.</p> <code>{}</code> Source code in <code>src/qtasks/contrib/redis/sync_queue_client.py</code> <pre><code>def execute(self, cmd: str, *args, **kwargs):\n    \"\"\"\u0417\u0430\u043f\u0440\u043e\u0441 \u0432 `Redis`.\n\n    Args:\n        cmd (str): \u041a\u043e\u043c\u0430\u043d\u0434\u0430.\n        args(tuple, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n        kwargs(dict, optional): \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0447\u0435\u0440\u0435\u0437 *args.\n    \"\"\"\n    self.queue.put((cmd, args, kwargs))\n    with self.lock:\n        if self.worker_thread is None or not self.worker_thread.is_alive():\n            self.worker_thread = threading.Thread(target=self._worker, daemon=True)\n            self.worker_thread.start()\n</code></pre>"},{"location":"ru/api/contexts/async_context/","title":"AsyncContext","text":"<p>Async context for tasks.</p>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext","title":"<code>AsyncContext</code>","text":"<p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</p>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.registries import AsyncTask\n\napp = QueueTasks()\n\n@app.task(echo=True)\nasync def my_task(self: AsyncTask):\n    self.ctx # AsyncContext\n</code></pre> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>class AsyncContext:\n    \"\"\"\n    \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.registries import AsyncTask\n\n    app = QueueTasks()\n\n    @app.task(echo=True)\n    async def my_task(self: AsyncTask):\n        self.ctx # AsyncContext\n    ```\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\"\"\"\n        self.task_name = kwargs.get(\"task_name\")\n        \"\"\"\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n        self.task_uuid = kwargs.get(\"task_uuid\")\n        \"\"\"UUID \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n        self.generate_handler = kwargs.get(\"generate_handler\")\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f-\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.\"\"\"\n\n        self._app: \"QueueTasks\" = kwargs.get(\"app\")\n        \"\"\"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430.\"\"\"\n        self._update_app()\n\n        self._log: \"Logger\" = kwargs.get(\"log\")\n        \"\"\"\u041b\u043e\u0433\u0433\u0435\u0440.\"\"\"\n\n        self._metadata: Union[\"Task\", None] = None\n        \"\"\"\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n    def get_logger(self, name: Union[str, None] = None) -&gt; \"Logger\":\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n        Args:\n            name (str|None): \u0418\u043c\u044f \u043b\u043e\u0433\u0433\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Logger: \u041b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n        \"\"\"\n        self._log = self._app.log.with_subname(name or self.task_name)\n        return self._log\n\n    def get_config(self) -&gt; QueueConfig:\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n        Returns:\n            QueueConfig: \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n        \"\"\"\n        return self._app.config\n\n    async def get_metadata(self, cache=True) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            cache (bool): \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435.\n\n        Returns:\n            Task|None: \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.\n        \"\"\"\n        if cache:\n            if not self._metadata:\n                self._metadata = await self._app.get(self.task_uuid)\n            return self._metadata\n        return await self._app.get(self.task_uuid)\n\n    async def get_task(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e UUID.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430.\n        \"\"\"\n        return await self._app.get(uuid)\n\n    async def sleep(self, seconds: float) -&gt; None:\n        \"\"\"\u041f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434.\n\n        Args:\n            seconds (float): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u0434\u043b\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.\n        \"\"\"\n        await asyncio.sleep(seconds)\n\n    def cancel(self, reason: str = \"\") -&gt; NoReturn:\n        \"\"\"\u041e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            reason (str): \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Raises:\n            TaskCancelError: \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        raise TaskCancelError(reason or f\"{self.task_name}.cancel\")\n\n    def plugin_error(self, **kwargs):\n        \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n        Args:\n            **kwargs: \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n        \"\"\"\n        raise TaskPluginTriggerError(**kwargs)\n\n    def get_plugin(self, name: str):\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043b\u0430\u0433\u0438\u043d \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n        Returns:\n            Any: \u041f\u043b\u0430\u0433\u0438\u043d \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.\n        \"\"\"\n        return self._app.get_plugin(name)\n\n    def get_component(self, name: str):\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.\n\n        Returns:\n            Any: \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.\n        \"\"\"\n        return getattr(self._app, name, None)\n\n    def _update_app(self):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\"\"\"\n        if not self._app:\n            import qtasks._state\n\n            self._app = qtasks._state.app_main\n        return\n\n    def _update(self, **kwargs):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n        Args:\n            kwargs (dict, optional): \u041d\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n        \"\"\"\n        for name, value in kwargs.items():\n            setattr(self, name, value)\n        return\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.generate_handler","title":"<code>generate_handler = kwargs.get('generate_handler')</code>  <code>instance-attribute</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f-\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.task_name","title":"<code>task_name = kwargs.get('task_name')</code>  <code>instance-attribute</code>","text":"<p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.task_uuid","title":"<code>task_uuid = kwargs.get('task_uuid')</code>  <code>instance-attribute</code>","text":"<p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\"\"\"\n    self.task_name = kwargs.get(\"task_name\")\n    \"\"\"\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n    self.task_uuid = kwargs.get(\"task_uuid\")\n    \"\"\"UUID \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n    self.generate_handler = kwargs.get(\"generate_handler\")\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f-\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.\"\"\"\n\n    self._app: \"QueueTasks\" = kwargs.get(\"app\")\n    \"\"\"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430.\"\"\"\n    self._update_app()\n\n    self._log: \"Logger\" = kwargs.get(\"log\")\n    \"\"\"\u041b\u043e\u0433\u0433\u0435\u0440.\"\"\"\n\n    self._metadata: Union[\"Task\", None] = None\n    \"\"\"\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.cancel","title":"<code>cancel(reason='')</code>","text":"<p>\u041e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>reason</code> <code>str</code> <p>\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>''</code> <p>Raises:</p> Type Description <code>TaskCancelError</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>def cancel(self, reason: str = \"\") -&gt; NoReturn:\n    \"\"\"\u041e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        reason (str): \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Raises:\n        TaskCancelError: \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    raise TaskCancelError(reason or f\"{self.task_name}.cancel\")\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.get_component","title":"<code>get_component(name)</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>def get_component(self, name: str):\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.\n\n    Returns:\n        Any: \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.\n    \"\"\"\n    return getattr(self._app, name, None)\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.get_config","title":"<code>get_config()</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>Returns:</p> Name Type Description <code>QueueConfig</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>def get_config(self) -&gt; QueueConfig:\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n    Returns:\n        QueueConfig: \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n    \"\"\"\n    return self._app.config\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.get_logger","title":"<code>get_logger(name=None)</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>\u0418\u043c\u044f \u043b\u043e\u0433\u0433\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Logger</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>def get_logger(self, name: Union[str, None] = None) -&gt; \"Logger\":\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n    Args:\n        name (str|None): \u0418\u043c\u044f \u043b\u043e\u0433\u0433\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Logger: \u041b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n    \"\"\"\n    self._log = self._app.log.with_subname(name or self.task_name)\n    return self._log\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.get_metadata","title":"<code>get_metadata(cache=True)</code>  <code>async</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>bool</code> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435.</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>async def get_metadata(self, cache=True) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        cache (bool): \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435.\n\n    Returns:\n        Task|None: \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.\n    \"\"\"\n    if cache:\n        if not self._metadata:\n            self._metadata = await self._app.get(self.task_uuid)\n        return self._metadata\n    return await self._app.get(self.task_uuid)\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.get_plugin","title":"<code>get_plugin(name)</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043b\u0430\u0433\u0438\u043d \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>def get_plugin(self, name: str):\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043b\u0430\u0433\u0438\u043d \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n    Returns:\n        Any: \u041f\u043b\u0430\u0433\u0438\u043d \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.\n    \"\"\"\n    return self._app.get_plugin(name)\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.get_task","title":"<code>get_task(uuid)</code>  <code>async</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e UUID.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430.</p> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>async def get_task(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e UUID.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430.\n    \"\"\"\n    return await self._app.get(uuid)\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.plugin_error","title":"<code>plugin_error(**kwargs)</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</p> <code>{}</code> Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>def plugin_error(self, **kwargs):\n    \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n    Args:\n        **kwargs: \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n    \"\"\"\n    raise TaskPluginTriggerError(**kwargs)\n</code></pre>"},{"location":"ru/api/contexts/async_context/#qtasks.contexts.async_context.AsyncContext.sleep","title":"<code>sleep(seconds)</code>  <code>async</code>","text":"<p>\u041f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434.</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>float</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u0434\u043b\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.</p> required Source code in <code>src/qtasks/contexts/async_context.py</code> <pre><code>async def sleep(self, seconds: float) -&gt; None:\n    \"\"\"\u041f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434.\n\n    Args:\n        seconds (float): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u0434\u043b\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.\n    \"\"\"\n    await asyncio.sleep(seconds)\n</code></pre>"},{"location":"ru/api/contexts/sync_context/","title":"SyncContext","text":"<p>Sync context for tasks.</p>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext","title":"<code>SyncContext</code>","text":"<p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</p>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.registries import SyncTask\n\napp = QueueTasks()\n\n@app.task(echo=True)\nasync def my_task(self: SyncTask):\n    self.ctx # SyncContext\n</code></pre> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>class SyncContext:\n    \"\"\"\n    \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.registries import SyncTask\n\n    app = QueueTasks()\n\n    @app.task(echo=True)\n    async def my_task(self: SyncTask):\n        self.ctx # SyncContext\n    ```\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\"\"\"\n        self.task_name = kwargs.get(\"task_name\")\n        \"\"\"\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n        self.task_uuid = kwargs.get(\"task_uuid\")\n        \"\"\"UUID \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n        self.generate_handler = kwargs.get(\"generate_handler\")\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f-\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.\"\"\"\n\n        self._app: \"QueueTasks\" = kwargs.get(\"app\")\n        \"\"\"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430.\"\"\"\n        self._update_app()\n\n        self._log: \"Logger\" = kwargs.get(\"log\")\n        \"\"\"\u041b\u043e\u0433\u0433\u0435\u0440.\"\"\"\n\n        self._metadata: Union[\"Task\", None] = None\n        \"\"\"\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n    def get_logger(self, name: Union[str, None] = None) -&gt; \"Logger\":\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n        Args:\n            name (str|None): \u0418\u043c\u044f \u043b\u043e\u0433\u0433\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Logger: \u041b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n        \"\"\"\n        self._log = self._app.log.with_subname(name or self.task_name)\n        return self._log\n\n    def get_config(self) -&gt; QueueConfig:\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n        Returns:\n            QueueConfig: \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n        \"\"\"\n        return self._app.config\n\n    def get_metadata(self, cache=True) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            cache (bool): \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435.\n\n        Returns:\n            Task|None: \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.\n        \"\"\"\n        if cache:\n            if not self._metadata:\n                self._metadata = self._app.get(self.task_uuid)\n            return self._metadata\n        return self._app.get(self.task_uuid)\n\n    def get_task(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e UUID.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430.\n        \"\"\"\n        return self._app.get(uuid)\n\n    def sleep(self, seconds: float) -&gt; None:\n        \"\"\"\u041f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434.\n\n        Args:\n            seconds (float): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u0434\u043b\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.\n        \"\"\"\n        time.sleep(seconds)\n        return\n\n    def cancel(self, reason: str = \"\") -&gt; NoReturn:\n        \"\"\"\u041e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            reason (str): \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Raises:\n            TaskCancelError: \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        raise TaskCancelError(reason or f\"{self.task_name}.cancel\")\n\n    def plugin_error(self, **kwargs):\n        \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n        Args:\n            **kwargs: \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n        \"\"\"\n        raise TaskPluginTriggerError(**kwargs)\n\n    def get_component(self, name: str):\n        \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.\n\n        Returns:\n            Any: \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.\n        \"\"\"\n        return getattr(self._app, name, None)\n\n    def _update_app(self):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\"\"\"\n        if not self._app:\n            import qtasks._state\n\n            self._app = qtasks._state.app_main\n        return\n\n    def _update(self, **kwargs):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n        Args:\n            kwargs (dict, optional): \u041d\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n        \"\"\"\n        for name, value in kwargs.items():\n            setattr(self, name, value)\n        return\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.generate_handler","title":"<code>generate_handler = kwargs.get('generate_handler')</code>  <code>instance-attribute</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f-\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.task_name","title":"<code>task_name = kwargs.get('task_name')</code>  <code>instance-attribute</code>","text":"<p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.task_uuid","title":"<code>task_uuid = kwargs.get('task_uuid')</code>  <code>instance-attribute</code>","text":"<p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\"\"\"\n    self.task_name = kwargs.get(\"task_name\")\n    \"\"\"\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n    self.task_uuid = kwargs.get(\"task_uuid\")\n    \"\"\"UUID \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n\n    self.generate_handler = kwargs.get(\"generate_handler\")\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f-\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.\"\"\"\n\n    self._app: \"QueueTasks\" = kwargs.get(\"app\")\n    \"\"\"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430.\"\"\"\n    self._update_app()\n\n    self._log: \"Logger\" = kwargs.get(\"log\")\n    \"\"\"\u041b\u043e\u0433\u0433\u0435\u0440.\"\"\"\n\n    self._metadata: Union[\"Task\", None] = None\n    \"\"\"\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.cancel","title":"<code>cancel(reason='')</code>","text":"<p>\u041e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>reason</code> <code>str</code> <p>\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>''</code> <p>Raises:</p> Type Description <code>TaskCancelError</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def cancel(self, reason: str = \"\") -&gt; NoReturn:\n    \"\"\"\u041e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        reason (str): \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Raises:\n        TaskCancelError: \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043e\u0442\u043c\u0435\u043d\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    raise TaskCancelError(reason or f\"{self.task_name}.cancel\")\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.get_component","title":"<code>get_component(name)</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.</p> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def get_component(self, name: str):\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.\n\n    Returns:\n        Any: \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.\n    \"\"\"\n    return getattr(self._app, name, None)\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.get_config","title":"<code>get_config()</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>Returns:</p> Name Type Description <code>QueueConfig</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def get_config(self) -&gt; QueueConfig:\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n    Returns:\n        QueueConfig: \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n    \"\"\"\n    return self._app.config\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.get_logger","title":"<code>get_logger(name=None)</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>\u0418\u043c\u044f \u043b\u043e\u0433\u0433\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Logger</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def get_logger(self, name: Union[str, None] = None) -&gt; \"Logger\":\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n    Args:\n        name (str|None): \u0418\u043c\u044f \u043b\u043e\u0433\u0433\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Logger: \u041b\u043e\u0433\u0433\u0435\u0440 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n    \"\"\"\n    self._log = self._app.log.with_subname(name or self.task_name)\n    return self._log\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.get_metadata","title":"<code>get_metadata(cache=True)</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>bool</code> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435.</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.</p> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def get_metadata(self, cache=True) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        cache (bool): \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435.\n\n    Returns:\n        Task|None: \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b.\n    \"\"\"\n    if cache:\n        if not self._metadata:\n            self._metadata = self._app.get(self.task_uuid)\n        return self._metadata\n    return self._app.get(self.task_uuid)\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.get_task","title":"<code>get_task(uuid)</code>","text":"<p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e UUID.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430.</p> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def get_task(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e UUID.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430.\n    \"\"\"\n    return self._app.get(uuid)\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.plugin_error","title":"<code>plugin_error(**kwargs)</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</p> <code>{}</code> Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def plugin_error(self, **kwargs):\n    \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n    Args:\n        **kwargs: \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n    \"\"\"\n    raise TaskPluginTriggerError(**kwargs)\n</code></pre>"},{"location":"ru/api/contexts/sync_context/#qtasks.contexts.sync_context.SyncContext.sleep","title":"<code>sleep(seconds)</code>","text":"<p>\u041f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434.</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>float</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u0434\u043b\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.</p> required Source code in <code>src/qtasks/contexts/sync_context.py</code> <pre><code>def sleep(self, seconds: float) -&gt; None:\n    \"\"\"\u041f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434.\n\n    Args:\n        seconds (float): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u0434\u043b\u044f \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.\n    \"\"\"\n    time.sleep(seconds)\n    return\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/","title":"AsyncTaskExecutor","text":"<p>Async Task Executor.</p>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor","title":"<code>AsyncTaskExecutor</code>","text":"<p>               Bases: <code>BaseTaskExecutor</code>, <code>AsyncPluginMixin</code></p> <p><code>AsyncTaskExecutor</code> - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0437\u0430\u0434\u0430\u0447. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 <code>AsyncWorker</code>.</p>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>import asyncio\nfrom qtasks.executors import AsyncTaskExecutor\n\ntask_func = TaskExecSchema(...)\ntask_broker = TaskPrioritySchema(...)\nexecutor = AsyncTaskExecutor(task_func, task_broker)\nresult = asyncio.run(executor.execute())\n</code></pre> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>class AsyncTaskExecutor(BaseTaskExecutor, AsyncPluginMixin):\n    \"\"\"\n    `AsyncTaskExecutor` - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0437\u0430\u0434\u0430\u0447. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 `AsyncWorker`.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    import asyncio\n    from qtasks.executors import AsyncTaskExecutor\n\n    task_func = TaskExecSchema(...)\n    task_broker = TaskPrioritySchema(...)\n    executor = AsyncTaskExecutor(task_func, task_broker)\n    result = asyncio.run(executor.execute())\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        task_func: Annotated[\n            TaskExecSchema,\n            Doc(\n                \"\"\"\n                    `TaskExecSchema` \u0441\u0445\u0435\u043c\u0430.\n                    \"\"\"\n            ),\n        ],\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    `TaskPrioritySchema` \u0441\u0445\u0435\u043c\u0430.\n                    \"\"\"\n            ),\n        ],\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        plugins: Annotated[\n            Optional[Dict[str, List[Type[\"BasePlugin\"]]]],\n            Doc(\n                \"\"\"\n                    \u041c\u0430\u0441\u0441\u0438\u0432 \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 `Worker` \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema`.\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n            log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n            plugins (Dict[str, List[Type[BasePlugin]]], optional): \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        \"\"\"\n        super().__init__(\n            task_func=task_func,\n            task_broker=task_broker,\n            log=log,\n            plugins=plugins,\n        )\n\n    async def before_execute(self):\n        \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        if self.task_func.echo:\n            task_cls = SyncTask if not self.task_func.awaiting or self.task_func.generating == \"sync\" else AsyncTask\n            self.echo = task_cls(\n                task_name=self.task_broker.name,\n                priority=self.task_broker.priority,\n                echo=self.task_func.echo,\n                retry=self.task_func.retry,\n                retry_on_exc=self.task_func.retry_on_exc,\n                decode=self.task_func.decode,\n                tags=self.task_func.tags,\n                description=self.task_func.description,\n                executor=self.task_func.executor,\n                middlewares_before=self.task_func.middlewares_before,\n                middlewares_after=self.task_func.middlewares_after,\n                extra=self.task_func.extra\n            )\n            self.echo.ctx._update(task_uuid=self.task_broker.uuid)\n            self._args.insert(0, self.echo)\n\n        args_from_func = self._extract_args_kwargs_from_func(self.task_func.func)\n        args_info = self._build_args_info(args_from_func[0], args_from_func[1])\n        new_args = await self._plugin_trigger(\n            \"task_executor_args_replace\",\n            task_executor=self,\n            **{\n                \"args\": self._args,\n                \"kw\": self._kwargs,\n                \"args_info\": args_info,\n            },\n            return_last=True\n        )\n        if new_args:\n            self._args, self._kwargs = new_args.get(\"args\", self._args), new_args.get(\"kw\", self._kwargs)\n\n        await self._plugin_trigger(\"task_executor_before_execute\", task_executor=self)\n\n    async def after_execute(self):\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447.\"\"\"\n        await self._plugin_trigger(\"task_executor_after_execute\", task_executor=self)\n        result: Any = await self._plugin_trigger(\n            \"task_executor_after_execute_result_replace\", task_executor=self, result=self._result, return_last=True\n        )\n        if result:\n            self._result = result.get(\"result\", self._result)\n        return\n\n    async def execute_middlewares_before(self):\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        await self._plugin_trigger(\n            \"task_executor_middlewares_execute\",\n            task_executor=self,\n            middlewares_before=self.task_func.middlewares_before\n        )\n        for m in self.task_func.middlewares_before:\n            m: \"TaskMiddleware\" = m(self)\n            new_task_executor: BaseTaskExecutor = await m()\n            if new_task_executor:\n                self = new_task_executor\n            self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n\n    async def execute_middlewares_after(self):\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        await self._plugin_trigger(\n            \"task_executor_middlewares_execute\",\n            task_executor=self,\n            middlewares_after=self.task_func.middlewares_after\n        )\n        for m in self.task_func.middlewares_after:\n            m: \"TaskMiddleware\" = m(self)\n            new_task_executor: BaseTaskExecutor = await m()\n            if new_task_executor:\n                self = new_task_executor\n            self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n\n    async def run_task(self) -&gt; Any:\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if self._args and self._kwargs:\n            result = (\n                await self.task_func.func(*self._args, **self._kwargs)\n                if self.task_func.awaiting\n                else self.task_func.func(*self._args, **self._kwargs)\n            )\n        elif self._args:\n            result = (\n                await self.task_func.func(*self._args)\n                if self.task_func.awaiting\n                else self.task_func.func(*self._args)\n            )\n        elif self._kwargs:\n            result = (\n                await self.task_func.func(**self._kwargs)\n                if self.task_func.awaiting\n                else self.task_func.func(**self._kwargs)\n            )\n        else:\n            result = (\n                await self.task_func.func()\n                if self.task_func.awaiting\n                else self.task_func.func()\n            )\n\n        if self.task_func.generating:\n            return await self.run_task_gen(result)\n\n        new_result = await self._plugin_trigger(\"task_executor_run_task\", task_executor=self, result=result)\n        if new_result:\n            result = new_result.get(\"result\", result)\n\n        return result\n\n    async def run_task_gen(self, func: AsyncGenerator) -&gt; List[Any]:\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            func (FunctionType): \u0424\u0443\u043d\u043a\u0446\u0438\u044f.\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if self.echo:\n            self.echo.ctx._update(generate_handler=self.task_func.generate_handler)\n\n        results = []\n        if self.task_func.generating == \"async\":\n            async for result in func:\n                if self.task_func.generate_handler:\n                    result = await self._maybe_await(\n                        self.task_func.generate_handler(result)\n                    )\n                results.append(result)\n\n        elif self.task_func.generating == \"sync\":\n            try:\n                while True:\n                    result = next(func)\n                    if self.task_func.generate_handler:\n                        result = await self._maybe_await(\n                            self.task_func.generate_handler(result)\n                        )\n                    results.append(result)\n            except StopIteration:\n                pass\n        new_results = await self._plugin_trigger(\"task_executor_run_task_gen\", task_executor=self, results=results)\n        if new_results:\n            results = new_results.get(\"results\", results)\n        return results\n\n    async def _maybe_await(self, value):\n        if asyncio.iscoroutine(value):\n            return await value\n        return value\n\n    async def execute(self, decode: bool = True) -&gt; Union[Any, str]:\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            decode (bool, optional): \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n\n        Returns:\n            Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        self.log.debug(f\"\u0412\u044b\u0437\u0432\u0430\u043d execute \u0434\u043b\u044f {self.task_func.name}\")\n        await self.execute_middlewares_before()\n        await self.before_execute()\n        try:\n            if self.task_func.max_time:\n                self._result = await asyncio.wait_for(self.run_task(), timeout=self.task_func.max_time)\n            else:\n                self._result = await self.run_task()\n        except TaskPluginTriggerError as e:\n            new_result = await self._plugin_trigger(\n                \"task_executor_run_task_trigger_error\",\n                task_executor=self,\n                task_func=self.task_func,\n                task_broker=self.task_broker,\n                e=e,\n                return_last=True\n            )\n            if new_result:\n                self._result = new_result.get(\"result\", self._result)\n            else:\n                raise e\n        except asyncio.TimeoutError:\n            msg = f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 {self.task_func.name} \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u043b\u043e \u043b\u0438\u043c\u0438\u0442 {self.task_func.max_time} \u0441\u0435\u043a\u0443\u043d\u0434\"\n            self.log.error(msg)\n            raise asyncio.TimeoutError(msg)\n\n        await self.after_execute()\n        await self.execute_middlewares_after()\n        if decode:\n            self._result = await self.decode()\n        return self._result\n\n    async def decode(self) -&gt; Any:\n        \"\"\"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if self.task_func.decode is not None:\n            result = await self._maybe_await(self.task_func.decode(self._result))\n        else:\n            result = json.dumps(self._result, ensure_ascii=False)\n        new_result = await self._plugin_trigger(\"task_executor_decode\", task_executor=self, result=result)\n        if new_result:\n            result = new_result.get(\"result\", result)\n        return result\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.__init__","title":"<code>__init__(task_func, task_broker, log=None, plugins=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Worker</code> \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_func</code> <code>TaskExecSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 <code>TaskExecSchema</code>.</p> required <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 <code>TaskPrioritySchema</code>.</p> required <code>log</code> <code>Logger</code> <p>\u043a\u043b\u0430\u0441\u0441 <code>qtasks.logs.Logger</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks._state.log_main</code>.</p> <code>None</code> <code>plugins</code> <code>Dict[str, List[Type[BasePlugin]]]</code> <p>\u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>def __init__(\n    self,\n    task_func: Annotated[\n        TaskExecSchema,\n        Doc(\n            \"\"\"\n                `TaskExecSchema` \u0441\u0445\u0435\u043c\u0430.\n                \"\"\"\n        ),\n    ],\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                `TaskPrioritySchema` \u0441\u0445\u0435\u043c\u0430.\n                \"\"\"\n        ),\n    ],\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    plugins: Annotated[\n        Optional[Dict[str, List[Type[\"BasePlugin\"]]]],\n        Doc(\n            \"\"\"\n                \u041c\u0430\u0441\u0441\u0438\u0432 \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 `Worker` \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema`.\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n        log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n        plugins (Dict[str, List[Type[BasePlugin]]], optional): \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n    \"\"\"\n    super().__init__(\n        task_func=task_func,\n        task_broker=task_broker,\n        log=log,\n        plugins=plugins,\n    )\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.after_execute","title":"<code>after_execute()</code>  <code>async</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def after_execute(self):\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0437\u0430\u0434\u0430\u0447.\"\"\"\n    await self._plugin_trigger(\"task_executor_after_execute\", task_executor=self)\n    result: Any = await self._plugin_trigger(\n        \"task_executor_after_execute_result_replace\", task_executor=self, result=self._result, return_last=True\n    )\n    if result:\n        self._result = result.get(\"result\", self._result)\n    return\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.before_execute","title":"<code>before_execute()</code>  <code>async</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def before_execute(self):\n    \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    if self.task_func.echo:\n        task_cls = SyncTask if not self.task_func.awaiting or self.task_func.generating == \"sync\" else AsyncTask\n        self.echo = task_cls(\n            task_name=self.task_broker.name,\n            priority=self.task_broker.priority,\n            echo=self.task_func.echo,\n            retry=self.task_func.retry,\n            retry_on_exc=self.task_func.retry_on_exc,\n            decode=self.task_func.decode,\n            tags=self.task_func.tags,\n            description=self.task_func.description,\n            executor=self.task_func.executor,\n            middlewares_before=self.task_func.middlewares_before,\n            middlewares_after=self.task_func.middlewares_after,\n            extra=self.task_func.extra\n        )\n        self.echo.ctx._update(task_uuid=self.task_broker.uuid)\n        self._args.insert(0, self.echo)\n\n    args_from_func = self._extract_args_kwargs_from_func(self.task_func.func)\n    args_info = self._build_args_info(args_from_func[0], args_from_func[1])\n    new_args = await self._plugin_trigger(\n        \"task_executor_args_replace\",\n        task_executor=self,\n        **{\n            \"args\": self._args,\n            \"kw\": self._kwargs,\n            \"args_info\": args_info,\n        },\n        return_last=True\n    )\n    if new_args:\n        self._args, self._kwargs = new_args.get(\"args\", self._args), new_args.get(\"kw\", self._kwargs)\n\n    await self._plugin_trigger(\"task_executor_before_execute\", task_executor=self)\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.decode","title":"<code>decode()</code>  <code>async</code>","text":"<p>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def decode(self) -&gt; Any:\n    \"\"\"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if self.task_func.decode is not None:\n        result = await self._maybe_await(self.task_func.decode(self._result))\n    else:\n        result = json.dumps(self._result, ensure_ascii=False)\n    new_result = await self._plugin_trigger(\"task_executor_decode\", task_executor=self, result=result)\n    if new_result:\n        result = new_result.get(\"result\", result)\n    return result\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.execute","title":"<code>execute(decode=True)</code>  <code>async</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>decode</code> <code>bool</code> <p>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[Any, str]</code> <p>Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def execute(self, decode: bool = True) -&gt; Union[Any, str]:\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        decode (bool, optional): \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n\n    Returns:\n        Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    self.log.debug(f\"\u0412\u044b\u0437\u0432\u0430\u043d execute \u0434\u043b\u044f {self.task_func.name}\")\n    await self.execute_middlewares_before()\n    await self.before_execute()\n    try:\n        if self.task_func.max_time:\n            self._result = await asyncio.wait_for(self.run_task(), timeout=self.task_func.max_time)\n        else:\n            self._result = await self.run_task()\n    except TaskPluginTriggerError as e:\n        new_result = await self._plugin_trigger(\n            \"task_executor_run_task_trigger_error\",\n            task_executor=self,\n            task_func=self.task_func,\n            task_broker=self.task_broker,\n            e=e,\n            return_last=True\n        )\n        if new_result:\n            self._result = new_result.get(\"result\", self._result)\n        else:\n            raise e\n    except asyncio.TimeoutError:\n        msg = f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 {self.task_func.name} \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u043b\u043e \u043b\u0438\u043c\u0438\u0442 {self.task_func.max_time} \u0441\u0435\u043a\u0443\u043d\u0434\"\n        self.log.error(msg)\n        raise asyncio.TimeoutError(msg)\n\n    await self.after_execute()\n    await self.execute_middlewares_after()\n    if decode:\n        self._result = await self.decode()\n    return self._result\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.execute_middlewares_after","title":"<code>execute_middlewares_after()</code>  <code>async</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def execute_middlewares_after(self):\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    await self._plugin_trigger(\n        \"task_executor_middlewares_execute\",\n        task_executor=self,\n        middlewares_after=self.task_func.middlewares_after\n    )\n    for m in self.task_func.middlewares_after:\n        m: \"TaskMiddleware\" = m(self)\n        new_task_executor: BaseTaskExecutor = await m()\n        if new_task_executor:\n            self = new_task_executor\n        self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.execute_middlewares_before","title":"<code>execute_middlewares_before()</code>  <code>async</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def execute_middlewares_before(self):\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    await self._plugin_trigger(\n        \"task_executor_middlewares_execute\",\n        task_executor=self,\n        middlewares_before=self.task_func.middlewares_before\n    )\n    for m in self.task_func.middlewares_before:\n        m: \"TaskMiddleware\" = m(self)\n        new_task_executor: BaseTaskExecutor = await m()\n        if new_task_executor:\n            self = new_task_executor\n        self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.run_task","title":"<code>run_task()</code>  <code>async</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def run_task(self) -&gt; Any:\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if self._args and self._kwargs:\n        result = (\n            await self.task_func.func(*self._args, **self._kwargs)\n            if self.task_func.awaiting\n            else self.task_func.func(*self._args, **self._kwargs)\n        )\n    elif self._args:\n        result = (\n            await self.task_func.func(*self._args)\n            if self.task_func.awaiting\n            else self.task_func.func(*self._args)\n        )\n    elif self._kwargs:\n        result = (\n            await self.task_func.func(**self._kwargs)\n            if self.task_func.awaiting\n            else self.task_func.func(**self._kwargs)\n        )\n    else:\n        result = (\n            await self.task_func.func()\n            if self.task_func.awaiting\n            else self.task_func.func()\n        )\n\n    if self.task_func.generating:\n        return await self.run_task_gen(result)\n\n    new_result = await self._plugin_trigger(\"task_executor_run_task\", task_executor=self, result=result)\n    if new_result:\n        result = new_result.get(\"result\", result)\n\n    return result\n</code></pre>"},{"location":"ru/api/executors/async_task_executor/#qtasks.executors.async_task_executor.AsyncTaskExecutor.run_task_gen","title":"<code>run_task_gen(func)</code>  <code>async</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>FunctionType</code> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>List[Any]</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/async_task_executor.py</code> <pre><code>async def run_task_gen(self, func: AsyncGenerator) -&gt; List[Any]:\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        func (FunctionType): \u0424\u0443\u043d\u043a\u0446\u0438\u044f.\n\n    Returns:\n        Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if self.echo:\n        self.echo.ctx._update(generate_handler=self.task_func.generate_handler)\n\n    results = []\n    if self.task_func.generating == \"async\":\n        async for result in func:\n            if self.task_func.generate_handler:\n                result = await self._maybe_await(\n                    self.task_func.generate_handler(result)\n                )\n            results.append(result)\n\n    elif self.task_func.generating == \"sync\":\n        try:\n            while True:\n                result = next(func)\n                if self.task_func.generate_handler:\n                    result = await self._maybe_await(\n                        self.task_func.generate_handler(result)\n                    )\n                results.append(result)\n        except StopIteration:\n            pass\n    new_results = await self._plugin_trigger(\"task_executor_run_task_gen\", task_executor=self, results=results)\n    if new_results:\n        results = new_results.get(\"results\", results)\n    return results\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/","title":"BaseTaskExecutor - \u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u0447\u0438","text":"<p>Base Task Executor.</p>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor","title":"<code>BaseTaskExecutor</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseTaskExecutor</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks.executors.base import BaseTaskExecutor\n\nclass MyTaskExecutor(BaseTaskExecutor):\n    def __init__(self, name: str):\n        super().__init__(name=name)\n        pass\n</code></pre> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>class BaseTaskExecutor(ABC):\n    \"\"\"\n    `BaseTaskExecutor` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks.executors.base import BaseTaskExecutor\n\n    class MyTaskExecutor(BaseTaskExecutor):\n        def __init__(self, name: str):\n            super().__init__(name=name)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        task_func: Annotated[\n            TaskExecSchema,\n            Doc(\n                \"\"\"\n                    `TaskExecSchema` \u0441\u0445\u0435\u043c\u0430.\n                    \"\"\"\n            ),\n        ],\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    `TaskPrioritySchema` \u0441\u0445\u0435\u043c\u0430.\n                    \"\"\"\n            ),\n        ],\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        plugins: Annotated[\n            Optional[Dict[str, List[Type[\"BasePlugin\"]]]],\n            Doc(\n                \"\"\"\n                    \u041c\u0430\u0441\u0441\u0438\u0432 \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 `Worker` \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema`.\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n            log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n            plugins (Dict[str, List[Type[BasePlugin]]], optional): \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n        \"\"\"\n        self.task_func = task_func\n        self.task_broker = task_broker\n        self._args = self.task_broker.args.copy()\n        self._kwargs = self.task_broker.kwargs.copy()\n        self._result: Any = None\n        self.echo = None\n\n        self.log = log\n        if self.log is None:\n            import qtasks._state\n\n            self.log = qtasks._state.log_main\n        self.log = self.log.with_subname(self.__class__.__name__)\n\n        self.plugins = plugins or {}\n\n    def before_execute(self):\n        \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        pass\n\n    def after_execute(self):\n        \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        pass\n\n    def execute_middlewares_before(self):\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        pass\n\n    def execute_middlewares_after(self):\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        pass\n\n    def run_task(self) -&gt; Any:\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def execute(self, decode: bool = True) -&gt; Union[Any, str]:\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            decode (bool, optional): \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n\n        Returns:\n            Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        pass\n\n    def decode(self) -&gt; str:\n        \"\"\"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        pass\n\n    def add_plugin(\n        self,\n        plugin: Annotated[\n            \"BasePlugin\",\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d.\n                    \"\"\"\n            ),\n        ],\n        trigger_names: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n        Args:\n            plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n            trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n        \"\"\"\n        trigger_names = trigger_names or [\"Globals\"]\n\n        for name in trigger_names:\n            if name not in self.plugins:\n                self.plugins.update({name: [plugin]})\n            else:\n                self.plugins[name].append(plugin)\n        return\n\n    def _extract_args_kwargs_from_func(self, func: Any) -&gt; Tuple[list, dict]:\n        \"\"\"\n        \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n        Args:\n            func (Callable): \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f args \u0438 kwargs.\n\n        Returns:\n            Tuple[list, dict]: args \u0438 kwargs, \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 `_build_args_info`.\n        \"\"\"\n        sig = inspect.signature(func)\n        args = []\n        kwargs = {}\n\n        for name, param in sig.parameters.items():\n            if param.default is not inspect.Parameter.empty:\n                # \u0418\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 (\u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n                kwargs[name] = param.default\n            elif param.kind in (\n                inspect.Parameter.POSITIONAL_ONLY,\n                inspect.Parameter.POSITIONAL_OR_KEYWORD,\n            ):\n                # \u041f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0431\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u043f\u0440\u043e\u0441\u0442\u043e None)\n                args.append(None)\n\n        return args, kwargs\n\n    def _build_args_info(self, args: list, kwargs: dict) -&gt; List[ArgMeta]:\n        \"\"\"\u0421\u0442\u0440\u043e\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a ArgMeta \u0438\u0437 args \u0438 kwargs \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\n        Args:\n            args (list): \u041f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b.\n            kwargs (dict): \u0418\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b.\n\n        Returns:\n            List[ArgMeta]: \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n        \"\"\"\n        args_info: List[ArgMeta] = []\n        func = self.task_func.func\n\n        try:\n            sig = inspect.signature(func)\n            parameters = list(sig.parameters.items())\n        except (ValueError, TypeError):\n            parameters = []\n\n        annotations = getattr(func, \"__annotations__\", {})\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432\n        for idx, value in enumerate(args):\n            param_name = parameters[idx][0] if idx &lt; len(parameters) else f\"arg{idx}\"\n            annotation = annotations.get(param_name)\n            origin = get_origin(annotation)\n            raw_type = get_args(annotation)[0] if get_args(annotation) else annotation\n            args_info.append(ArgMeta(\n                name=param_name,\n                value=value,\n                origin=origin,\n                raw_type=raw_type,\n                annotation=annotation,\n                is_kwarg=False,\n                index=idx\n            ))\n\n        # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432\n        for key, value in kwargs.items():\n            annotation = annotations.get(key)\n            origin = get_origin(annotation)\n            raw_type = get_args(annotation)[0] if get_args(annotation) else annotation\n            args_info.append(ArgMeta(\n                name=key,\n                value=value,\n                origin=origin,\n                raw_type=raw_type,\n                annotation=annotation,\n                is_kwarg=True,\n                key=key\n            ))\n\n        return args_info\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.__init__","title":"<code>__init__(task_func, task_broker, log=None, plugins=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Worker</code> \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_func</code> <code>TaskExecSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 <code>TaskExecSchema</code>.</p> required <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 <code>TaskPrioritySchema</code>.</p> required <code>log</code> <code>Logger</code> <p>\u043a\u043b\u0430\u0441\u0441 <code>qtasks.logs.Logger</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks._state.log_main</code>.</p> <code>None</code> <code>plugins</code> <code>Dict[str, List[Type[BasePlugin]]]</code> <p>\u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c</code>.</p> <code>None</code> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def __init__(\n    self,\n    task_func: Annotated[\n        TaskExecSchema,\n        Doc(\n            \"\"\"\n                `TaskExecSchema` \u0441\u0445\u0435\u043c\u0430.\n                \"\"\"\n        ),\n    ],\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                `TaskPrioritySchema` \u0441\u0445\u0435\u043c\u0430.\n                \"\"\"\n        ),\n    ],\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    plugins: Annotated[\n        Optional[Dict[str, List[Type[\"BasePlugin\"]]]],\n        Doc(\n            \"\"\"\n                \u041c\u0430\u0441\u0441\u0438\u0432 \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 `Worker` \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema`.\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n        log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n        plugins (Dict[str, List[Type[BasePlugin]]], optional): \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n    \"\"\"\n    self.task_func = task_func\n    self.task_broker = task_broker\n    self._args = self.task_broker.args.copy()\n    self._kwargs = self.task_broker.kwargs.copy()\n    self._result: Any = None\n    self.echo = None\n\n    self.log = log\n    if self.log is None:\n        import qtasks._state\n\n        self.log = qtasks._state.log_main\n    self.log = self.log.with_subname(self.__class__.__name__)\n\n    self.plugins = plugins or {}\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.add_plugin","title":"<code>add_plugin(plugin, trigger_names=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>BasePlugin</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d</p> required <code>trigger_names</code> <code>List[str]</code> <p>\u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Globals</code>.</p> <code>None</code> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def add_plugin(\n    self,\n    plugin: Annotated[\n        \"BasePlugin\",\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d.\n                \"\"\"\n        ),\n    ],\n    trigger_names: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n    Args:\n        plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n        trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n    \"\"\"\n    trigger_names = trigger_names or [\"Globals\"]\n\n    for name in trigger_names:\n        if name not in self.plugins:\n            self.plugins.update({name: [plugin]})\n        else:\n            self.plugins[name].append(plugin)\n    return\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.after_execute","title":"<code>after_execute()</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def after_execute(self):\n    \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.before_execute","title":"<code>before_execute()</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def before_execute(self):\n    \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.decode","title":"<code>decode()</code>","text":"<p>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def decode(self) -&gt; str:\n    \"\"\"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.execute","title":"<code>execute(decode=True)</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>decode</code> <code>bool</code> <p>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>True</code>.</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[Any, str]</code> <p>Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>@abstractmethod\ndef execute(self, decode: bool = True) -&gt; Union[Any, str]:\n    \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        decode (bool, optional): \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n\n    Returns:\n        Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.execute_middlewares_after","title":"<code>execute_middlewares_after()</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def execute_middlewares_after(self):\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.execute_middlewares_before","title":"<code>execute_middlewares_before()</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def execute_middlewares_before(self):\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/executors/basetask_executor/#qtasks.executors.base.BaseTaskExecutor.run_task","title":"<code>run_task()</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/base.py</code> <pre><code>def run_task(self) -&gt; Any:\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/","title":"SyncTaskExecutor","text":"<p>Sync Task Executor.</p>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor","title":"<code>SyncTaskExecutor</code>","text":"<p>               Bases: <code>BaseTaskExecutor</code>, <code>SyncPluginMixin</code></p> <p><code>SyncTaskExecutor</code> - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0437\u0430\u0434\u0430\u0447. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 <code>SyncThreadWorker</code>.</p>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks.executors import SyncTaskExecutor\n\ntask_func = TaskExecSchema(...)\ntask_broker = TaskPrioritySchema(...)\nexecutor = SyncTaskExecutor(task_func, task_broker)\nresult = executor.execute()\n</code></pre> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>class SyncTaskExecutor(BaseTaskExecutor, SyncPluginMixin):\n    \"\"\"\n    `SyncTaskExecutor` - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0437\u0430\u0434\u0430\u0447. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 `SyncThreadWorker`.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks.executors import SyncTaskExecutor\n\n    task_func = TaskExecSchema(...)\n    task_broker = TaskPrioritySchema(...)\n    executor = SyncTaskExecutor(task_func, task_broker)\n    result = executor.execute()\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        task_func: Annotated[\n            TaskExecSchema,\n            Doc(\n                \"\"\"\n                    `TaskExecSchema` \u0441\u0445\u0435\u043c\u0430.\n                    \"\"\"\n            ),\n        ],\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    `TaskPrioritySchema` \u0441\u0445\u0435\u043c\u0430.\n                    \"\"\"\n            ),\n        ],\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        plugins: Annotated[\n            Optional[Dict[str, List[Type[\"BasePlugin\"]]]],\n            Doc(\n                \"\"\"\n                    \u041c\u0430\u0441\u0441\u0438\u0432 \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 `Worker` \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema`.\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n            log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n            plugins (Dict[str, List[Type[BasePlugin]]], optional): \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n        \"\"\"\n        super().__init__(\n            task_func=task_func,\n            task_broker=task_broker,\n            log=log,\n            plugins=plugins,\n        )\n\n    def before_execute(self):\n        \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        if self.task_func.echo:\n            self.echo = SyncTask(\n                task_name=self.task_broker.name,\n                priority=self.task_broker.priority,\n                echo=self.task_func.echo,\n                retry=self.task_func.retry,\n                retry_on_exc=self.task_func.retry_on_exc,\n                decode=self.task_func.decode,\n                tags=self.task_func.tags,\n                description=self.task_func.description,\n                executor=self.task_func.executor,\n                middlewares_before=self.task_func.middlewares_before,\n                middlewares_after=self.task_func.middlewares_after,\n                extra=self.task_func.extra\n            )\n            self.echo.ctx._update(task_uuid=self.task_broker.uuid)\n            self._args.insert(0, self.echo)\n\n        args_from_func = self._extract_args_kwargs_from_func(self.task_func.func)\n        args_info = self._build_args_info(args_from_func[0], args_from_func[1])\n        new_args = self._plugin_trigger(\n            \"task_executor_args_replace\",\n            task_executor=self,\n            **{\n                \"args\": self._args,\n                \"kw\": self._kwargs,\n                \"args_info\": args_info,\n            },\n            return_last=True\n        )\n        if new_args:\n            self._args, self._kwargs = new_args.get(\"args\", self._args), new_args.get(\"kw\", self._kwargs)\n\n        self._plugin_trigger(\"task_executor_before_execute\", task_executor=self)\n\n    def after_execute(self):\n        \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        self._plugin_trigger(\"task_executor_after_execute\", task_executor=self)\n        result = self._plugin_trigger(\n            \"task_executor_after_execute_result_replace\", task_executor=self, result=self._result, return_last=True\n        )\n        if result:\n            self._result = result.get(\"result\", self._result)\n        return\n\n    def execute_middlewares_before(self):\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        self._plugin_trigger(\n            \"task_executor_middlewares_execute\",\n            task_executor=self,\n            middlewares_before=self.task_func.middlewares_before\n        )\n        for m in self.task_func.middlewares_before:\n            m: \"TaskMiddleware\" = m(self)\n            new_task_executor: BaseTaskExecutor = m()\n            if new_task_executor:\n                self = new_task_executor\n            self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n\n    def execute_middlewares_after(self):\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        self._plugin_trigger(\n            \"task_executor_middlewares_execute\",\n            task_executor=self,\n            middlewares_after=self.task_func.middlewares_after\n        )\n        for m in self.task_func.middlewares_after:\n            m: \"TaskMiddleware\" = m(self)\n            new_task_executor: BaseTaskExecutor = m()\n            if new_task_executor:\n                self = new_task_executor\n            self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n\n    def run_task(self) -&gt; Union[Any, list]:\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if self._args and self._kwargs:\n            result = self.task_func.func(*self._args, **self._kwargs)\n        elif self._args:\n            result = self.task_func.func(*self._args)\n        elif self._kwargs:\n            result = self.task_func.func(**self._kwargs)\n        else:\n            result = self.task_func.func()\n\n        if self.task_func.generating:\n            return self.run_task_gen(result)\n\n        new_result = self._plugin_trigger(\"task_executor_run_task\", task_executor=self, result=result)\n        if new_result:\n            result = new_result.get(\"result\", result)\n\n        return result\n\n    def run_task_gen(self, func: Generator) -&gt; List[Any]:\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            func (FunctionType): \u0424\u0443\u043d\u043a\u0446\u0438\u044f.\n\n        Raises:\n            RuntimeError: \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435!\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if self.echo:\n            self.echo.ctx._update(generate_handler=self.task_func.generate_handler)\n\n        results = []\n        if self.task_func.generating == \"async\":\n            raise RuntimeError(\n                \"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435!\"\n            )\n\n        elif self.task_func.generating == \"sync\":\n            try:\n                while True:\n                    result = next(func)\n                    if self.task_func.generate_handler:\n                        result = self.task_func.generate_handler(result)\n                    results.append(result)\n            except StopIteration:\n                pass\n\n        new_results = self._plugin_trigger(\"task_executor_run_task_gen\", task_executor=self, results=results)\n        if new_results:\n            results = new_results.get(\"results\", results)\n        return results\n\n    def execute(self, decode: bool = True) -&gt; Union[Any, str]:\n        \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            decode (bool, optional): \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n\n        Returns:\n            Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        self.log.debug(f\"\u0412\u044b\u0437\u0432\u0430\u043d execute \u0434\u043b\u044f {self.task_func.name}\")\n        self.before_execute()\n        self.execute_middlewares_before()\n        try:\n            if self.task_func.max_time:\n                with ThreadPoolExecutor(max_workers=1) as executor:\n                    future = executor.submit(self.run_task)\n                    self._result = future.result(timeout=self.task_func.max_time)\n            else:\n                self._result = self.run_task()\n        except TaskPluginTriggerError as e:\n            new_result = self._plugin_trigger(\n                \"task_executor_run_task_trigger_error\",\n                task_executor=self,\n                task_func=self.task_func,\n                task_broker=self.task_broker,\n                e=e,\n                return_last=True\n            )\n            if new_result:\n                self._result = new_result.get(\"result\", self._result)\n            else:\n                raise e\n        except TimeoutError:\n            msg = f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 {self.task_func.name} \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u043b\u043e \u043b\u0438\u043c\u0438\u0442 {self.task_func.max_time} \u0441\u0435\u043a\u0443\u043d\u0434\"\n            self.log.error(msg)\n            raise TimeoutError(msg)\n\n        self.after_execute()\n        self.execute_middlewares_after()\n        if decode:\n            self._result = self.decode()\n        return self._result\n\n    def decode(self) -&gt; Any:\n        \"\"\"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if self.task_func.decode is not None:\n            result = self.task_func.decode(self._result)\n        else:\n            result = json.dumps(self._result, ensure_ascii=False)\n        new_result = self._plugin_trigger(\"task_executor_decode\", task_executor=self, result=result)\n        if new_result:\n            result = new_result.get(\"result\", result)\n        return result\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.__init__","title":"<code>__init__(task_func, task_broker, log=None, plugins=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 <code>Worker</code> \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_func</code> <code>TaskExecSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 <code>TaskExecSchema</code>.</p> required <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 <code>TaskPrioritySchema</code>.</p> required <code>log</code> <code>Logger</code> <p>\u043a\u043b\u0430\u0441\u0441 <code>qtasks.logs.Logger</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks._state.log_main</code>.</p> <code>None</code> <code>plugins</code> <code>Dict[str, List[Type[BasePlugin]]]</code> <p>\u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c</code>.</p> <code>None</code> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def __init__(\n    self,\n    task_func: Annotated[\n        TaskExecSchema,\n        Doc(\n            \"\"\"\n                `TaskExecSchema` \u0441\u0445\u0435\u043c\u0430.\n                \"\"\"\n        ),\n    ],\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                `TaskPrioritySchema` \u0441\u0445\u0435\u043c\u0430.\n                \"\"\"\n        ),\n    ],\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    plugins: Annotated[\n        Optional[Dict[str, List[Type[\"BasePlugin\"]]]],\n        Doc(\n            \"\"\"\n                \u041c\u0430\u0441\u0441\u0438\u0432 \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 `Worker` \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema`.\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n        log (Logger, optional): \u043a\u043b\u0430\u0441\u0441 `qtasks.logs.Logger`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.log_main`.\n        plugins (Dict[str, List[Type[BasePlugin]]], optional): \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n    \"\"\"\n    super().__init__(\n        task_func=task_func,\n        task_broker=task_broker,\n        log=log,\n        plugins=plugins,\n    )\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.after_execute","title":"<code>after_execute()</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def after_execute(self):\n    \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    self._plugin_trigger(\"task_executor_after_execute\", task_executor=self)\n    result = self._plugin_trigger(\n        \"task_executor_after_execute_result_replace\", task_executor=self, result=self._result, return_last=True\n    )\n    if result:\n        self._result = result.get(\"result\", self._result)\n    return\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.before_execute","title":"<code>before_execute()</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def before_execute(self):\n    \"\"\"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    if self.task_func.echo:\n        self.echo = SyncTask(\n            task_name=self.task_broker.name,\n            priority=self.task_broker.priority,\n            echo=self.task_func.echo,\n            retry=self.task_func.retry,\n            retry_on_exc=self.task_func.retry_on_exc,\n            decode=self.task_func.decode,\n            tags=self.task_func.tags,\n            description=self.task_func.description,\n            executor=self.task_func.executor,\n            middlewares_before=self.task_func.middlewares_before,\n            middlewares_after=self.task_func.middlewares_after,\n            extra=self.task_func.extra\n        )\n        self.echo.ctx._update(task_uuid=self.task_broker.uuid)\n        self._args.insert(0, self.echo)\n\n    args_from_func = self._extract_args_kwargs_from_func(self.task_func.func)\n    args_info = self._build_args_info(args_from_func[0], args_from_func[1])\n    new_args = self._plugin_trigger(\n        \"task_executor_args_replace\",\n        task_executor=self,\n        **{\n            \"args\": self._args,\n            \"kw\": self._kwargs,\n            \"args_info\": args_info,\n        },\n        return_last=True\n    )\n    if new_args:\n        self._args, self._kwargs = new_args.get(\"args\", self._args), new_args.get(\"kw\", self._kwargs)\n\n    self._plugin_trigger(\"task_executor_before_execute\", task_executor=self)\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.decode","title":"<code>decode()</code>","text":"<p>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def decode(self) -&gt; Any:\n    \"\"\"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if self.task_func.decode is not None:\n        result = self.task_func.decode(self._result)\n    else:\n        result = json.dumps(self._result, ensure_ascii=False)\n    new_result = self._plugin_trigger(\"task_executor_decode\", task_executor=self, result=result)\n    if new_result:\n        result = new_result.get(\"result\", result)\n    return result\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.execute","title":"<code>execute(decode=True)</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>decode</code> <code>bool</code> <p>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[Any, str]</code> <p>Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def execute(self, decode: bool = True) -&gt; Union[Any, str]:\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        decode (bool, optional): \u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n\n    Returns:\n        Any|str: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    self.log.debug(f\"\u0412\u044b\u0437\u0432\u0430\u043d execute \u0434\u043b\u044f {self.task_func.name}\")\n    self.before_execute()\n    self.execute_middlewares_before()\n    try:\n        if self.task_func.max_time:\n            with ThreadPoolExecutor(max_workers=1) as executor:\n                future = executor.submit(self.run_task)\n                self._result = future.result(timeout=self.task_func.max_time)\n        else:\n            self._result = self.run_task()\n    except TaskPluginTriggerError as e:\n        new_result = self._plugin_trigger(\n            \"task_executor_run_task_trigger_error\",\n            task_executor=self,\n            task_func=self.task_func,\n            task_broker=self.task_broker,\n            e=e,\n            return_last=True\n        )\n        if new_result:\n            self._result = new_result.get(\"result\", self._result)\n        else:\n            raise e\n    except TimeoutError:\n        msg = f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 {self.task_func.name} \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u043b\u043e \u043b\u0438\u043c\u0438\u0442 {self.task_func.max_time} \u0441\u0435\u043a\u0443\u043d\u0434\"\n        self.log.error(msg)\n        raise TimeoutError(msg)\n\n    self.after_execute()\n    self.execute_middlewares_after()\n    if decode:\n        self._result = self.decode()\n    return self._result\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.execute_middlewares_after","title":"<code>execute_middlewares_after()</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def execute_middlewares_after(self):\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    self._plugin_trigger(\n        \"task_executor_middlewares_execute\",\n        task_executor=self,\n        middlewares_after=self.task_func.middlewares_after\n    )\n    for m in self.task_func.middlewares_after:\n        m: \"TaskMiddleware\" = m(self)\n        new_task_executor: BaseTaskExecutor = m()\n        if new_task_executor:\n            self = new_task_executor\n        self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.execute_middlewares_before","title":"<code>execute_middlewares_before()</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def execute_middlewares_before(self):\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n    self._plugin_trigger(\n        \"task_executor_middlewares_execute\",\n        task_executor=self,\n        middlewares_before=self.task_func.middlewares_before\n    )\n    for m in self.task_func.middlewares_before:\n        m: \"TaskMiddleware\" = m(self)\n        new_task_executor: BaseTaskExecutor = m()\n        if new_task_executor:\n            self = new_task_executor\n        self.log.debug(f\"Middleware {m.name} \u0434\u043b\u044f {self.task_func.name} \u0431\u044b\u043b \u0432\u044b\u0437\u0432\u0430\u043d.\")\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.run_task","title":"<code>run_task()</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Union[Any, list]</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def run_task(self) -&gt; Union[Any, list]:\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if self._args and self._kwargs:\n        result = self.task_func.func(*self._args, **self._kwargs)\n    elif self._args:\n        result = self.task_func.func(*self._args)\n    elif self._kwargs:\n        result = self.task_func.func(**self._kwargs)\n    else:\n        result = self.task_func.func()\n\n    if self.task_func.generating:\n        return self.run_task_gen(result)\n\n    new_result = self._plugin_trigger(\"task_executor_run_task\", task_executor=self, result=result)\n    if new_result:\n        result = new_result.get(\"result\", result)\n\n    return result\n</code></pre>"},{"location":"ru/api/executors/sync_task_executor/#qtasks.executors.sync_task_executor.SyncTaskExecutor.run_task_gen","title":"<code>run_task_gen(func)</code>","text":"<p>\u0412\u044b\u0437\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>FunctionType</code> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435!</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>List[Any]</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/executors/sync_task_executor.py</code> <pre><code>def run_task_gen(self, func: Generator) -&gt; List[Any]:\n    \"\"\"\u0412\u044b\u0437\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        func (FunctionType): \u0424\u0443\u043d\u043a\u0446\u0438\u044f.\n\n    Raises:\n        RuntimeError: \u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435!\n\n    Returns:\n        Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if self.echo:\n        self.echo.ctx._update(generate_handler=self.task_func.generate_handler)\n\n    results = []\n    if self.task_func.generating == \"async\":\n        raise RuntimeError(\n            \"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435!\"\n        )\n\n    elif self.task_func.generating == \"sync\":\n        try:\n            while True:\n                result = next(func)\n                if self.task_func.generate_handler:\n                    result = self.task_func.generate_handler(result)\n                results.append(result)\n        except StopIteration:\n            pass\n\n    new_results = self._plugin_trigger(\"task_executor_run_task_gen\", task_executor=self, results=results)\n    if new_results:\n        results = new_results.get(\"results\", results)\n    return results\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/","title":"AsyncRedisGlobalConfig","text":"<p>Async Redis Global Config.</p>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig","title":"<code>AsyncRedisGlobalConfig</code>","text":"<p>               Bases: <code>BaseGlobalConfig</code>, <code>AsyncPluginMixin</code></p> <p>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 Redis \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.</p>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.configs import AsyncRedisGlobalConfig\nfrom qtasks.storage import AsyncRedisStorage\nfrom qtasks.brokers import AsyncRedisBroker\n\nglobal_config = AsyncRedisGlobalConfig(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\nstorage = AsyncRedisStorage(name=\"QueueTasks\", global_config=global_config, url=\"redis://localhost:6379/2\")\n\nbroker = AsyncRedisBroker(name=\"QueueTasks\", storage=storage, url=\"redis://localhost:6379/2\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>class AsyncRedisGlobalConfig(BaseGlobalConfig, AsyncPluginMixin):\n    \"\"\"\n    \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 Redis \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.configs import AsyncRedisGlobalConfig\n    from qtasks.storage import AsyncRedisStorage\n    from qtasks.brokers import AsyncRedisBroker\n\n    global_config = AsyncRedisGlobalConfig(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\n    storage = AsyncRedisStorage(name=\"QueueTasks\", global_config=global_config, url=\"redis://localhost:6379/2\")\n\n    broker = AsyncRedisBroker(name=\"QueueTasks\", storage=storage, url=\"redis://localhost:6379/2\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                    \"\"\"\n            ),\n        ] = \"redis://localhost:6379/0\",\n        redis_connect: Annotated[\n            Optional[aioredis.Redis],\n            Doc(\n                \"\"\"\n                    \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        config_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `name:GlobalConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n            redis_connect (aioredis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config_name (str, optional): \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.name = name\n        self.url = url\n        self.config_name = f\"{self.name}:{config_name or 'GlobalConfig'}\"\n        self.events = self.events or AsyncEvents()\n\n        self.client = redis_connect or aioredis.from_url(\n            self.url, decode_responses=True, encoding=\"utf-8\"\n        )\n\n        self.status_event = None\n        self.running = False\n\n    async def set(self, name: str, key: str, value: str) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n        Args:\n            name (str): \u0418\u043c\u044f.\n            key (str): \u041a\u043b\u044e\u0447.\n            value (str): \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n        \"\"\"\n        new_data = await self._plugin_trigger(\n            \"global_config_set\",\n            global_config=self,\n            name=name,\n            key=key,\n            value=value,\n            return_last=True\n        )\n        if new_data:\n            name = new_data.get(\"name\", name)\n            key = new_data.get(\"key\", key)\n            value = new_data.get(\"value\", value)\n\n        await self.client.hset(name=f\"{self.config_name}:{name}\", key=key, value=value)\n        return\n\n    async def get(self, key: str, name: str) -&gt; Any:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n        Args:\n            key (str): \u041a\u043b\u044e\u0447.\n            name (str): \u0418\u043c\u044f.\n\n        Returns:\n            Any: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n        \"\"\"\n        result = await self.client.hget(name=f\"{self.config_name}:{key}\", key=name)\n        new_result = await self._plugin_trigger(\n            \"global_config_get\",\n            global_config=self,\n            get=result,\n            return_last=True\n        )\n        if new_result:\n            result = new_result.get(\"get\", result)\n        return result\n\n    async def get_all(self, key: str) -&gt; Dict[str, Any]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n        Args:\n            key (str): \u041a\u043b\u044e\u0447.\n\n        Returns:\n            Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n        \"\"\"\n        result = await self.client.hgetall(name=f\"{self.config_name}:{key}\")\n        new_result = await self._plugin_trigger(\n            \"global_config_get_all\",\n            global_config=self,\n            get=result,\n            return_last=True\n        )\n        if new_result:\n            result = new_result.get(\"get\", result)\n        return result\n\n    async def get_match(self, match: str) -&gt; Union[Any, dict]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.\n\n        Args:\n            match (str): \u041f\u0430\u0442\u0442\u0435\u0440\u043d.\n\n        Returns:\n            Any | Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n        \"\"\"\n        result = await self.client.hscan(key=self.config_name, match=match)\n        new_result = await self._plugin_trigger(\n            \"global_config_get_match\",\n            global_config=self,\n            get=result,\n            return_last=True\n        )\n        if new_result:\n            result = new_result.get(\"get\", result)\n        return result\n\n    async def start(self) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever.\"\"\"\n        await self._plugin_trigger(\"global_config_start\", global_config=self)\n        self.running = True\n        loop = asyncio.get_running_loop()\n        self.status_event = loop.create_task(self._set_status())\n        global_config = GlobalConfigSchema(name=self.name, status=\"running\")\n        await self.client.hset(\n            name=f\"{self.config_name}:main\", mapping=global_config.__dict__\n        )\n\n    async def stop(self) -&gt; None:\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n        await self._plugin_trigger(\"global_config_stop\", global_config=self)\n        self.running = False\n        if self.status_event:\n            self.status_event.cancel()\n        await self.client.aclose()\n\n    async def _set_status(self):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.\"\"\"\n        await self._plugin_trigger(\"global_config_set_status\", global_config=self)\n        ttl = self.config.global_config_status_ttl\n        interval = self.config.global_config_status_set_periodic\n        while self.running:\n            await self.client.expire(f\"{self.config_name}:main\", ttl)\n            await asyncio.sleep(interval)\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig.__init__","title":"<code>__init__(name='QueueTasks', url='redis://localhost:6379/0', redis_connect=None, config_name=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".</p> <code>'redis://localhost:6379/0'</code> <code>redis_connect</code> <code>Redis</code> <p>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config_name</code> <code>str</code> <p>\u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                \"\"\"\n        ),\n    ] = \"redis://localhost:6379/0\",\n    redis_connect: Annotated[\n        Optional[aioredis.Redis],\n        Doc(\n            \"\"\"\n                \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    config_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `name:GlobalConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n        redis_connect (aioredis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config_name (str, optional): \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.name = name\n    self.url = url\n    self.config_name = f\"{self.name}:{config_name or 'GlobalConfig'}\"\n    self.events = self.events or AsyncEvents()\n\n    self.client = redis_connect or aioredis.from_url(\n        self.url, decode_responses=True, encoding=\"utf-8\"\n    )\n\n    self.status_event = None\n    self.running = False\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig.get","title":"<code>get(key, name)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <code>name</code> <code>str</code> <p>\u0418\u043c\u044f.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>async def get(self, key: str, name: str) -&gt; Any:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n    Args:\n        key (str): \u041a\u043b\u044e\u0447.\n        name (str): \u0418\u043c\u044f.\n\n    Returns:\n        Any: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    \"\"\"\n    result = await self.client.hget(name=f\"{self.config_name}:{key}\", key=name)\n    new_result = await self._plugin_trigger(\n        \"global_config_get\",\n        global_config=self,\n        get=result,\n        return_last=True\n    )\n    if new_result:\n        result = new_result.get(\"get\", result)\n    return result\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig.get_all","title":"<code>get_all(key)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>async def get_all(self, key: str) -&gt; Dict[str, Any]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n    Args:\n        key (str): \u041a\u043b\u044e\u0447.\n\n    Returns:\n        Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    \"\"\"\n    result = await self.client.hgetall(name=f\"{self.config_name}:{key}\")\n    new_result = await self._plugin_trigger(\n        \"global_config_get_all\",\n        global_config=self,\n        get=result,\n        return_last=True\n    )\n    if new_result:\n        result = new_result.get(\"get\", result)\n    return result\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig.get_match","title":"<code>get_match(match)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>match</code> <code>str</code> <p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d.</p> required <p>Returns:</p> Type Description <code>Union[Any, dict]</code> <p>Any | Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>async def get_match(self, match: str) -&gt; Union[Any, dict]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.\n\n    Args:\n        match (str): \u041f\u0430\u0442\u0442\u0435\u0440\u043d.\n\n    Returns:\n        Any | Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    \"\"\"\n    result = await self.client.hscan(key=self.config_name, match=match)\n    new_result = await self._plugin_trigger(\n        \"global_config_get_match\",\n        global_config=self,\n        get=result,\n        return_last=True\n    )\n    if new_result:\n        result = new_result.get(\"get\", result)\n    return result\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig.set","title":"<code>set(name, key, value)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f.</p> required <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <code>value</code> <code>str</code> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> required Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>async def set(self, name: str, key: str, value: str) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n    Args:\n        name (str): \u0418\u043c\u044f.\n        key (str): \u041a\u043b\u044e\u0447.\n        value (str): \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    \"\"\"\n    new_data = await self._plugin_trigger(\n        \"global_config_set\",\n        global_config=self,\n        name=name,\n        key=key,\n        value=value,\n        return_last=True\n    )\n    if new_data:\n        name = new_data.get(\"name\", name)\n        key = new_data.get(\"key\", key)\n        value = new_data.get(\"value\", value)\n\n    await self.client.hset(name=f\"{self.config_name}:{name}\", key=key, value=value)\n    return\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig.start","title":"<code>start()</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 `run_forever.</p> Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>async def start(self) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever.\"\"\"\n    await self._plugin_trigger(\"global_config_start\", global_config=self)\n    self.running = True\n    loop = asyncio.get_running_loop()\n    self.status_event = loop.create_task(self._set_status())\n    global_config = GlobalConfigSchema(name=self.name, status=\"running\")\n    await self.client.hset(\n        name=f\"{self.config_name}:main\", mapping=global_config.__dict__\n    )\n</code></pre>"},{"location":"ru/api/globalconfig/async_redisglobalconfig/#qtasks.configs.async_redisglobalconfig.AsyncRedisGlobalConfig.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>run_forever</code>.</p> Source code in <code>src/qtasks/configs/async_redisglobalconfig.py</code> <pre><code>async def stop(self) -&gt; None:\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n    await self._plugin_trigger(\"global_config_stop\", global_config=self)\n    self.running = False\n    if self.status_event:\n        self.status_event.cancel()\n    await self.client.aclose()\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/","title":"BaseGlobalConfig - \u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 GlobalConfig","text":"<p>Base Configurations.</p>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig","title":"<code>BaseGlobalConfig</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseGlobalConfig</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u041a\u043e\u043d\u0444\u0438\u0433\u0430.</p>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.configs.base import BaseGlobalConfig\n\nclass MyGlobalConfig(BaseGlobalConfig):\n    def __init__(self, name: str = None):\n        super().__init__(name=name)\n        pass\n</code></pre> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>class BaseGlobalConfig(ABC):\n    \"\"\"\n    `BaseGlobalConfig` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u041a\u043e\u043d\u0444\u0438\u0433\u0430.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.configs.base import BaseGlobalConfig\n\n    class MyGlobalConfig(BaseGlobalConfig):\n        def __init__(self, name: str = None):\n            super().__init__(name=name)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f GlobalConfig.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self.name = name\n        self.config = config or QueueConfig()\n        self.log = (\n            log.with_subname(\"GlobalConfig\")\n            if log\n            else Logger(\n                name=self.name,\n                subname=\"GlobalConfig\",\n                default_level=self.config.logs_default_level_server,\n                format=self.config.logs_format,\n            )\n        )\n        self.events = events\n        self.client = None\n        self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n        self.init_plugins()\n\n    @abstractmethod\n    def set(self, **kwargs) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n        Args:\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get(self, key: str, name: str) -&gt; Any:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n        Args:\n            key (str): \u041a\u043b\u044e\u0447.\n            name (str): \u0418\u043c\u044f.\n\n        Returns:\n            Any: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_all(self, key: str) -&gt; Union[dict, list, tuple]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n        Args:\n            key (str): \u041a\u043b\u044e\u0447.\n\n        Returns:\n            Dict[str, Any] | List[Any] | Tuple[Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_match(self, match: str) -&gt; Union[Any, dict, list, tuple]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.\n\n        Args:\n            match (str): \u041f\u0430\u0442\u0442\u0435\u0440\u043d.\n\n        Returns:\n            Any | Dict[str, Any] | List[Any] | Tuple[Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def start(self) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever.\"\"\"\n        pass\n\n    @abstractmethod\n    def stop(self) -&gt; None:\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever.\"\"\"\n        pass\n\n    def update_config(\n        self,\n        config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n        \"\"\"\n        self.config = config\n        return\n\n    def add_plugin(\n        self,\n        plugin: Annotated[\n            \"BasePlugin\",\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d.\n                    \"\"\"\n            ),\n        ],\n        trigger_names: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n        Args:\n            plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n            trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n        \"\"\"\n        trigger_names = trigger_names or [\"Globals\"]\n\n        for name in trigger_names:\n            if name not in self.plugins:\n                self.plugins.update({name: [plugin]})\n            else:\n                self.plugins[name].append(plugin)\n        return\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.__init__","title":"<code>__init__(name=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f GlobalConfig.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self.name = name\n    self.config = config or QueueConfig()\n    self.log = (\n        log.with_subname(\"GlobalConfig\")\n        if log\n        else Logger(\n            name=self.name,\n            subname=\"GlobalConfig\",\n            default_level=self.config.logs_default_level_server,\n            format=self.config.logs_format,\n        )\n    )\n    self.events = events\n    self.client = None\n    self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n    self.init_plugins()\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.add_plugin","title":"<code>add_plugin(plugin, trigger_names=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>BasePlugin</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d</p> required <code>trigger_names</code> <code>List[str]</code> <p>\u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Globals</code>.</p> <code>None</code> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>def add_plugin(\n    self,\n    plugin: Annotated[\n        \"BasePlugin\",\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d.\n                \"\"\"\n        ),\n    ],\n    trigger_names: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n    Args:\n        plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n        trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n    \"\"\"\n    trigger_names = trigger_names or [\"Globals\"]\n\n    for name in trigger_names:\n        if name not in self.plugins:\n            self.plugins.update({name: [plugin]})\n        else:\n            self.plugins[name].append(plugin)\n    return\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.get","title":"<code>get(key, name)</code>  <code>abstractmethod</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <code>name</code> <code>str</code> <p>\u0418\u043c\u044f.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>@abstractmethod\ndef get(self, key: str, name: str) -&gt; Any:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n    Args:\n        key (str): \u041a\u043b\u044e\u0447.\n        name (str): \u0418\u043c\u044f.\n\n    Returns:\n        Any: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.get_all","title":"<code>get_all(key)</code>  <code>abstractmethod</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <p>Returns:</p> Type Description <code>Union[dict, list, tuple]</code> <p>Dict[str, Any] | List[Any] | Tuple[Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>@abstractmethod\ndef get_all(self, key: str) -&gt; Union[dict, list, tuple]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n    Args:\n        key (str): \u041a\u043b\u044e\u0447.\n\n    Returns:\n        Dict[str, Any] | List[Any] | Tuple[Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.get_match","title":"<code>get_match(match)</code>  <code>abstractmethod</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>match</code> <code>str</code> <p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d.</p> required <p>Returns:</p> Type Description <code>Union[Any, dict, list, tuple]</code> <p>Any | Dict[str, Any] | List[Any] | Tuple[Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>@abstractmethod\ndef get_match(self, match: str) -&gt; Union[Any, dict, list, tuple]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.\n\n    Args:\n        match (str): \u041f\u0430\u0442\u0442\u0435\u0440\u043d.\n\n    Returns:\n        Any | Dict[str, Any] | List[Any] | Tuple[Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.set","title":"<code>set(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>{}</code>.</p> <code>{}</code> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>@abstractmethod\ndef set(self, **kwargs) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n    Args:\n        kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.start","title":"<code>start()</code>  <code>abstractmethod</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 `run_forever.</p> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>@abstractmethod\ndef start(self) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.stop","title":"<code>stop()</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever.</p> Source code in <code>src/qtasks/configs/base.py</code> <pre><code>@abstractmethod\ndef stop(self) -&gt; None:\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/globalconfig/baseglobalconfig/#qtasks.configs.base.BaseGlobalConfig.update_config","title":"<code>update_config(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433.</p> required Source code in <code>src/qtasks/configs/base.py</code> <pre><code>def update_config(\n    self,\n    config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n    Args:\n        config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n    \"\"\"\n    self.config = config\n    return\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/","title":"SyncRedisGlobalConfig","text":"<p>Sync Redis Global Config.</p>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig","title":"<code>SyncRedisGlobalConfig</code>","text":"<p>               Bases: <code>BaseGlobalConfig</code>, <code>SyncPluginMixin</code></p> <p>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 Redis \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.</p>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.configs import SyncRedisGlobalConfig\nfrom qtasks.storage import SyncRedisStorage\nfrom qtasks.brokers import SyncRedisBroker\n\nglobal_config = SyncRedisGlobalConfig(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\nstorage = SyncRedisStorage(name=\"QueueTasks\", global_config=global_config, url=\"redis://localhost:6379/2\")\n\nbroker = SyncRedisBroker(name=\"QueueTasks\", storage=storage, url=\"redis://localhost:6379/2\")\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>class SyncRedisGlobalConfig(BaseGlobalConfig, SyncPluginMixin):\n    \"\"\"\n    \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 Redis \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.configs import SyncRedisGlobalConfig\n    from qtasks.storage import SyncRedisStorage\n    from qtasks.brokers import SyncRedisBroker\n\n    global_config = SyncRedisGlobalConfig(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n\n    storage = SyncRedisStorage(name=\"QueueTasks\", global_config=global_config, url=\"redis://localhost:6379/2\")\n\n    broker = SyncRedisBroker(name=\"QueueTasks\", storage=storage, url=\"redis://localhost:6379/2\")\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                    \"\"\"\n            ),\n        ] = \"redis://localhost:6379/0\",\n        redis_connect: Annotated[\n            Optional[redis.Redis],\n            Doc(\n                \"\"\"\n                    \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        config_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `name:GlobalConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n            redis_connect (redis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config_name (str, optional): \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.name = name\n        self.url = url\n        self.config_name = f\"{self.name}:{config_name or 'GlobalConfig'}\"\n        self.events = self.events or SyncEvents()\n\n        self.client = redis_connect or redis.from_url(\n            self.url, decode_responses=True, encoding=\"utf-8\"\n        )\n        self.running = False\n\n    def set(self, name: str, key: str, value: str) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n        Args:\n            name (str): \u0418\u043c\u044f.\n            key (str): \u041a\u043b\u044e\u0447.\n            value (str): \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n        \"\"\"\n        new_data = self._plugin_trigger(\n            \"global_config_set\",\n            global_config=self,\n            name=name,\n            key=key,\n            value=value,\n            return_last=True\n        )\n        if new_data:\n            name = new_data.get(\"name\", name)\n            key = new_data.get(\"key\", key)\n            value = new_data.get(\"value\", value)\n\n        self.client.hset(name=f\"{self.config_name}:{name}\", key=key, value=value)\n        return\n\n    def get(self, key: str, name: str) -&gt; Any:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n        Args:\n            key (str): \u041a\u043b\u044e\u0447.\n            name (str): \u0418\u043c\u044f.\n\n        Returns:\n            Any: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n        \"\"\"\n        result = self.client.hget(name=f\"{self.config_name}:{key}\", key=name)\n        new_result = self._plugin_trigger(\n            \"global_config_get\",\n            global_config=self,\n            get=result,\n            return_last=True\n        )\n        if new_result:\n            result = new_result.get(\"get\", result)\n        return result\n\n    def get_all(self, key: str) -&gt; Dict[str, Any]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n        Args:\n            key (str): \u041a\u043b\u044e\u0447.\n\n        Returns:\n            Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n        \"\"\"\n        result = self.client.hgetall(name=f\"{self.config_name}:{key}\")\n        new_result = self._plugin_trigger(\n            \"global_config_get_all\",\n            global_config=self,\n            get=result,\n            return_last=True\n        )\n        if new_result:\n            result = new_result.get(\"get\", result)\n        return result\n\n    def get_match(self, match: str) -&gt; Union[Any, dict]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.\n\n        Args:\n            match (str): \u041f\u0430\u0442\u0442\u0435\u0440\u043d.\n\n        Returns:\n            Any | Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n        \"\"\"\n        result = self.client.hscan(key=self.config_name, match=match)\n        new_result = self._plugin_trigger(\n            \"global_config_get_match\",\n            global_config=self,\n            get=result,\n            return_last=True\n        )\n        if new_result:\n            result = new_result.get(\"get\", result)\n        return result\n\n    def start(self) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever.\"\"\"\n        self._plugin_trigger(\"global_config_start\", global_config=self)\n        self.running = True\n        global_config = GlobalConfigSchema(name=self.name, status=\"running\")\n        self.client.hset(\n            name=f\"{self.config_name}:main\", mapping=global_config.__dict__\n        )\n        Thread(target=self._set_status, daemon=True).start()\n\n    def stop(self) -&gt; None:\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n        self._plugin_trigger(\"global_config_stop\", global_config=self)\n        self.running = False\n        self.client.close()\n        return\n\n    def _set_status(self):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.\"\"\"\n        self._plugin_trigger(\"global_config_set_status\", global_config=self)\n        ttl = self.config.global_config_status_ttl\n        interval = self.config.global_config_status_set_periodic\n        while self.running:\n            self.client.expire(f\"{self.config_name}:main\", ttl)\n            time.sleep(interval)\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig.__init__","title":"<code>__init__(name='QueueTasks', url='redis://localhost:6379/0', redis_connect=None, config_name=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".</p> <code>'redis://localhost:6379/0'</code> <code>redis_connect</code> <code>Redis</code> <p>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config_name</code> <code>str</code> <p>\u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                \"\"\"\n        ),\n    ] = \"redis://localhost:6379/0\",\n    redis_connect: Annotated[\n        Optional[redis.Redis],\n        Doc(\n            \"\"\"\n                \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    config_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430: `name:queue_name`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `name:GlobalConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n        redis_connect (redis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config_name (str, optional): \u0418\u043c\u044f \u041f\u0430\u043f\u043a\u0438 \u0441 Hash. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.name = name\n    self.url = url\n    self.config_name = f\"{self.name}:{config_name or 'GlobalConfig'}\"\n    self.events = self.events or SyncEvents()\n\n    self.client = redis_connect or redis.from_url(\n        self.url, decode_responses=True, encoding=\"utf-8\"\n    )\n    self.running = False\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig.get","title":"<code>get(key, name)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <code>name</code> <code>str</code> <p>\u0418\u043c\u044f.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>def get(self, key: str, name: str) -&gt; Any:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n    Args:\n        key (str): \u041a\u043b\u044e\u0447.\n        name (str): \u0418\u043c\u044f.\n\n    Returns:\n        Any: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    \"\"\"\n    result = self.client.hget(name=f\"{self.config_name}:{key}\", key=name)\n    new_result = self._plugin_trigger(\n        \"global_config_get\",\n        global_config=self,\n        get=result,\n        return_last=True\n    )\n    if new_result:\n        result = new_result.get(\"get\", result)\n    return result\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig.get_all","title":"<code>get_all(key)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>def get_all(self, key: str) -&gt; Dict[str, Any]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n    Args:\n        key (str): \u041a\u043b\u044e\u0447.\n\n    Returns:\n        Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    \"\"\"\n    result = self.client.hgetall(name=f\"{self.config_name}:{key}\")\n    new_result = self._plugin_trigger(\n        \"global_config_get_all\",\n        global_config=self,\n        get=result,\n        return_last=True\n    )\n    if new_result:\n        result = new_result.get(\"get\", result)\n    return result\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig.get_match","title":"<code>get_match(match)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>match</code> <code>str</code> <p>\u041f\u0430\u0442\u0442\u0435\u0440\u043d.</p> required <p>Returns:</p> Type Description <code>Union[Any, dict]</code> <p>Any | Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>def get_match(self, match: str) -&gt; Union[Any, dict]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0443.\n\n    Args:\n        match (str): \u041f\u0430\u0442\u0442\u0435\u0440\u043d.\n\n    Returns:\n        Any | Dict[str, Any]: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    \"\"\"\n    result = self.client.hscan(key=self.config_name, match=match)\n    new_result = self._plugin_trigger(\n        \"global_config_get_match\",\n        global_config=self,\n        get=result,\n        return_last=True\n    )\n    if new_result:\n        result = new_result.get(\"get\", result)\n    return result\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig.set","title":"<code>set(name, key, value)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f.</p> required <code>key</code> <code>str</code> <p>\u041a\u043b\u044e\u0447.</p> required <code>value</code> <code>str</code> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.</p> required Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>def set(self, name: str, key: str, value: str) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n    Args:\n        name (str): \u0418\u043c\u044f.\n        key (str): \u041a\u043b\u044e\u0447.\n        value (str): \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    \"\"\"\n    new_data = self._plugin_trigger(\n        \"global_config_set\",\n        global_config=self,\n        name=name,\n        key=key,\n        value=value,\n        return_last=True\n    )\n    if new_data:\n        name = new_data.get(\"name\", name)\n        key = new_data.get(\"key\", key)\n        value = new_data.get(\"value\", value)\n\n    self.client.hset(name=f\"{self.config_name}:{name}\", key=key, value=value)\n    return\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig.start","title":"<code>start()</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 `run_forever.</p> Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0411\u0440\u043e\u043a\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever.\"\"\"\n    self._plugin_trigger(\"global_config_start\", global_config=self)\n    self.running = True\n    global_config = GlobalConfigSchema(name=self.name, status=\"running\")\n    self.client.hset(\n        name=f\"{self.config_name}:main\", mapping=global_config.__dict__\n    )\n    Thread(target=self._set_status, daemon=True).start()\n</code></pre>"},{"location":"ru/api/globalconfig/sync_redisglobalconfig/#qtasks.configs.sync_redisglobalconfig.SyncRedisGlobalConfig.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>run_forever</code>.</p> Source code in <code>src/qtasks/configs/sync_redisglobalconfig.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u041a\u043e\u043d\u0444\u0438\u0433. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n    self._plugin_trigger(\"global_config_stop\", global_config=self)\n    self.running = False\n    self.client.close()\n    return\n</code></pre>"},{"location":"ru/api/libraries/django/","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 Django","text":"<p>Django Autodiscover.</p>"},{"location":"ru/api/libraries/django/#qtasks.contrib.django.autodiscover.autodiscover_tasks","title":"<code>autodiscover_tasks(app, modules=['tasks'])</code>","text":"<p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438\u0437 \u0432\u0441\u0435\u0445 INSTALLED_APPS, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 QTasks.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</p> required <code>modules</code> <code>List[str]</code> <p>\u041c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0434\u0438\u0441\u043a\u0430\u0432\u0435\u0440\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>[\"tasks\"]</code>.</p> <code>['tasks']</code> Source code in <code>src/qtasks/contrib/django/autodiscover.py</code> <pre><code>def autodiscover_tasks(app, modules: List[str] = [\"tasks\"]):\n    \"\"\"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438\u0437 \u0432\u0441\u0435\u0445 INSTALLED_APPS, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 QTasks.\n\n    Args:\n        app (QueueTasks): \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n        modules (List[str]): \u041c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0434\u0438\u0441\u043a\u0430\u0432\u0435\u0440\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `[\"tasks\"]`.\n    \"\"\"\n    for app_name in settings.INSTALLED_APPS:\n        try:\n            module = importlib.import_module(app_name)\n        except Exception as e:\n            logger.warning(f\"[QTasks] \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c {app_name}: {e}\")\n            continue\n\n        try:\n            for module_name in modules:\n                if module_has_submodule(module, module_name) or find_spec(f\"{app_name}.{module_name}\"):\n                    importlib.import_module(f\"{app_name}.{module_name}\")\n                    logger.debug(f\"[QTasks] \u041d\u0430\u0439\u0434\u0435\u043d {module_name}.py \u0432 {app_name}\")\n        except Exception as e:\n            logger.exception(f\"[QTasks] \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0435 {app_name}.{module_name}: {e}\")\n</code></pre>"},{"location":"ru/api/middlewares/basemiddleware/","title":"BaseMiddleware","text":"<p>Base middleware.</p>"},{"location":"ru/api/middlewares/basemiddleware/#qtasks.middlewares.base.BaseMiddleware","title":"<code>BaseMiddleware</code>","text":"<p><code>BaseMiddleware</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.</p>"},{"location":"ru/api/middlewares/basemiddleware/#qtasks.middlewares.base.BaseMiddleware--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks.middlewares.base import BaseMiddleware\n\nclass MyMiddleware(BaseMiddleware):\n    def __init__(self, name: str):\n        super().__init__(name=name)\n</code></pre> Source code in <code>src/qtasks/middlewares/base.py</code> <pre><code>class BaseMiddleware:\n    \"\"\"\n    `BaseMiddleware` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks.middlewares.base import BaseMiddleware\n\n    class MyMiddleware(BaseMiddleware):\n        def __init__(self, name: str):\n            super().__init__(name=name)\n    ```\n    \"\"\"\n\n    def __init__(self, name: str):\n        \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.\n\n        Args:\n            name (str): \u0418\u043c\u044f.\n        \"\"\"\n        self.name = name\n</code></pre>"},{"location":"ru/api/middlewares/basemiddleware/#qtasks.middlewares.base.BaseMiddleware.__init__","title":"<code>__init__(name)</code>","text":"<p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f.</p> required Source code in <code>src/qtasks/middlewares/base.py</code> <pre><code>def __init__(self, name: str):\n    \"\"\"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430.\n\n    Args:\n        name (str): \u0418\u043c\u044f.\n    \"\"\"\n    self.name = name\n</code></pre>"},{"location":"ru/api/middlewares/task_middleware/","title":"TaskMiddleware","text":"<p>Base Task Middleware.</p>"},{"location":"ru/api/middlewares/task_middleware/#qtasks.middlewares.task.TaskMiddleware","title":"<code>TaskMiddleware</code>","text":"<p>               Bases: <code>BaseMiddleware</code></p> <p><code>TaskMiddleware</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f <code>TaskExecutor</code>.</p>"},{"location":"ru/api/middlewares/task_middleware/#qtasks.middlewares.task.TaskMiddleware--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks.middlewares import TaskMiddleware\nfrom qtasks.executors.base import BaseTaskExecutor\n\nclass MyTaskMiddleware(TaskMiddleware):\n    def __init__(self, task_executor: BaseTaskExecutor):\n        super().__init__(name=\"MyTaskMiddleware\")\n        self.task_executor = task_executor\n</code></pre> Source code in <code>src/qtasks/middlewares/task.py</code> <pre><code>class TaskMiddleware(BaseMiddleware):\n    \"\"\"\n    `TaskMiddleware` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f `TaskExecutor`.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks.middlewares import TaskMiddleware\n    from qtasks.executors.base import BaseTaskExecutor\n\n    class MyTaskMiddleware(TaskMiddleware):\n        def __init__(self, task_executor: BaseTaskExecutor):\n            super().__init__(name=\"MyTaskMiddleware\")\n            self.task_executor = task_executor\n    ```\n    \"\"\"\n\n    def __init__(self, task_executor: \"BaseTaskExecutor\"):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u044b \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            task_executor (BaseTaskExecutor): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0437\u0430\u0434\u0430\u0447.\n        \"\"\"\n        super().__init__(name=\"TaskMiddleware\")\n        self.task_executor = task_executor\n</code></pre>"},{"location":"ru/api/middlewares/task_middleware/#qtasks.middlewares.task.TaskMiddleware.__init__","title":"<code>__init__(task_executor)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u044b \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>task_executor</code> <code>BaseTaskExecutor</code> <p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0437\u0430\u0434\u0430\u0447.</p> required Source code in <code>src/qtasks/middlewares/task.py</code> <pre><code>def __init__(self, task_executor: \"BaseTaskExecutor\"):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u044b \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        task_executor (BaseTaskExecutor): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u0437\u0430\u0434\u0430\u0447.\n    \"\"\"\n    super().__init__(name=\"TaskMiddleware\")\n    self.task_executor = task_executor\n</code></pre>"},{"location":"ru/api/models/task/","title":"Task","text":"<p>Task Schema.</p>"},{"location":"ru/api/models/task/#qtasks.schemas.task.Task","title":"<code>Task</code>  <code>dataclass</code>","text":"<p><code>Task</code> \u043c\u043e\u0434\u0435\u043b\u044c.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>\u0421\u0442\u0430\u0442\u0443\u0441.</p> required <code>uuid</code> <code>UUID</code> <p>UUID.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.</p> required <code>task_name</code> <code>str</code> <p>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.</p> required <code>args</code> <code>Tuple[str]</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 args.</p> required <code>kwargs</code> <code>Dict[str, Any]</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 kwargs.</p> required <code>created_at</code> <code>datetime</code> <p>\u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f.</p> required <code>updated_at</code> <code>datetime</code> <p>\u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.</p> required <code>returning</code> <code>str | None</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>traceback</code> <code>str | None</code> <p>\u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/schemas/task.py</code> <pre><code>@dataclass\nclass Task:\n    \"\"\"`Task` \u043c\u043e\u0434\u0435\u043b\u044c.\n\n    Args:\n        status (str): \u0421\u0442\u0430\u0442\u0443\u0441.\n        uuid (UUID): UUID.\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.\n        task_name (str): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.\n\n        args (Tuple[str]): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 args.\n        kwargs (Dict[str, Any]): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 kwargs.\n\n        created_at (datetime): \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f.\n        updated_at (datetime): \u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.\n\n        returning (str | None): \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        traceback (str | None): \u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n\n    status: str\n    uuid: UUID\n    priority: int\n    task_name: str\n\n    args: Tuple[str]\n    kwargs: Dict[str, Any]\n\n    created_at: datetime\n    updated_at: datetime\n\n    returning: InitVar[Union[str, None]] = None\n    traceback: InitVar[Union[str, None]] = None\n\n    def wait_result(\n        self,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncTask`.\n                    \"\"\"\n            ),\n        ] = None\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n        Args:\n            timeout (Annotated[Optional[float], Doc], optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        return SyncResult(uuid=self.uuid).result(timeout=timeout)\n\n    async def wait_result_async(\n        self,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n        Args:\n            timeout (Annotated[Optional[float], Doc], optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        return await AsyncResult(uuid=self.uuid).result(timeout=timeout)\n</code></pre>"},{"location":"ru/api/models/task/#qtasks.schemas.task.Task.wait_result","title":"<code>wait_result(timeout=None)</code>","text":"<p>\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>Annotated[Optional[float], Doc]</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/schemas/task.py</code> <pre><code>def wait_result(\n    self,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncTask`.\n                \"\"\"\n        ),\n    ] = None\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n    Args:\n        timeout (Annotated[Optional[float], Doc], optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    return SyncResult(uuid=self.uuid).result(timeout=timeout)\n</code></pre>"},{"location":"ru/api/models/task/#qtasks.schemas.task.Task.wait_result_async","title":"<code>wait_result_async(timeout=None)</code>  <code>async</code>","text":"<p>\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>Annotated[Optional[float], Doc]</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/schemas/task.py</code> <pre><code>async def wait_result_async(\n    self,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n    Args:\n        timeout (Annotated[Optional[float], Doc], optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    return await AsyncResult(uuid=self.uuid).result(timeout=timeout)\n</code></pre>"},{"location":"ru/api/plugins/errors/","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0433\u0438\u043d\u044b","text":"<p>\u0412 QTasks \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0433\u0438\u043d\u044b. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442:</p> <ul> <li>\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f;</li> <li>\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435;</li> <li>\u0432\u043d\u0435\u0434\u0440\u044f\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f, \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435).</li> </ul>"},{"location":"ru/api/plugins/errors/#_2","title":"\ud83d\udccc \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0442\u0440\u0438\u0433\u0433\u0435\u0440","text":"<p>\u0422\u0440\u0438\u0433\u0433\u0435\u0440: <code>task_executor_run_task_trigger_error</code></p> <ul> <li>\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442: <code>TaskExecutor</code></li> <li>\u0412\u044b\u0437\u043e\u0432: \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f <code>TaskPluginTriggerError</code></li> <li> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:</p> </li> <li> <p><code>task_executor</code> \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 TaskExecutor</p> </li> <li><code>task_func</code> \u2014 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430</li> <li><code>task_broker</code> \u2014 \u0431\u0440\u043e\u043a\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438</li> <li><code>e</code> \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043e\u0448\u0438\u0431\u043a\u0438 <code>TaskPluginTriggerError</code></li> </ul>"},{"location":"ru/api/plugins/errors/#_3","title":"\ud83e\udde0 \u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f:</p> <pre><code>self.ctx.plugin_error()\n</code></pre> <p>\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0448\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435:</p> <pre><code>from qtasks.exc import TaskPluginTriggerError\n\nraise TaskPluginTriggerError(**kwargs)\n</code></pre> <p>\u0412\u043d\u0443\u0442\u0440\u0438 <code>TaskExecutor</code> \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>try:\n    self._result = await self.run_task()\nexcept TaskPluginTriggerError as e:\n    new_result = await self._plugin_trigger(\n        \"task_executor_run_task_trigger_error\",\n        task_executor=self,\n        task_func=self.task_func,\n        task_broker=self.task_broker,\n        e=e,\n        return_last=True\n    )\n    if new_result:\n        self._result = new_result\n    else:\n        raise e\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u043f\u043b\u0430\u0433\u0438\u043d \u0432\u0435\u0440\u043d\u0451\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u043e\u043d\u043e \u0441\u0442\u0430\u043d\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u0447\u0438. \u0418\u043d\u0430\u0447\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435.</p>"},{"location":"ru/api/plugins/errors/#_4","title":"\ud83d\udd27 \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438","text":"<pre><code>from qtasks.exc import TaskPluginTriggerError\n\n@app.task(echo=True)\nasync def test_task(self: AsyncTask):\n    self.ctx.plugin_error(message=\"\u041d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\")\n    # \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430: raise TaskPluginTriggerError(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e\")\n</code></pre>"},{"location":"ru/api/plugins/errors/#_5","title":"\ud83d\udd0c \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432 \u043f\u043b\u0430\u0433\u0438\u043d\u0435","text":"<pre><code>class TestPlugin(BasePlugin):\n    def __init__(self, name=None):\n        super().__init__(name)\n        self.handlers = {\n            \"task_executor_run_task_trigger_error\": self.task_trigger_error\n        }\n\n    async def start(self, *args, **kwargs):\n        return super().start(*args, **kwargs)\n\n    async def stop(self, *args, **kwargs):\n        return super().stop(*args, **kwargs)\n\n    async def trigger(self, name, **kwargs):\n        handler = self.handlers.get(name)\n        if handler:\n            return handler(**kwargs)\n        return None\n\n    def task_trigger_error(self, **kwargs):\n        print(kwargs)\n        return 123\n</code></pre>"},{"location":"ru/api/plugins/errors/#_6","title":"\ud83d\udcd8 \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>\ud83d\udcc4 \u0422\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432</li> <li>\u26a0\ufe0f \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f</li> </ul> <p>\u0421\u0438\u0441\u0442\u0435\u043c\u0430 <code>plugin_error</code> \u0434\u0430\u0451\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043d\u0430\u0434 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0442\u043e\u0447\u043a\u0430 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"ru/api/plugins/triggers/","title":"\u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432","text":"<p>QTasks \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0438\u0431\u043a\u0438\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432. \u042d\u0442\u0438 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442:</p> <ul> <li>\u0418\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447</li> <li>\u0417\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439</li> <li>\u0420\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0431\u0435\u0437 \u0432\u043c\u0435\u0448\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443</li> </ul>"},{"location":"ru/api/plugins/triggers/#_2","title":"\ud83d\udcd8 \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u0428\u0430\u0431\u043b\u043e\u043d: <code>{\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442}_{\u0444\u0443\u043d\u043a\u0446\u0438\u044f}_{\u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435}</code></li> <li>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 <code>QueueTasks</code> \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a <code>qtasks</code></li> <li>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \u043f\u0435\u0440\u0432\u044b\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0434\u0451\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>self</code>), \u0434\u0430\u043b\u0435\u0435 \u2014 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430</li> </ul>"},{"location":"ru/api/plugins/triggers/#return","title":"\ud83d\udccc \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 <code>return</code>","text":"<ul> <li><code>new_args</code> / <code>new_model</code> / <code>new_data</code> / <code>new_result</code> \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442</li> <li>\u0415\u0441\u043b\u0438 <code>return</code> \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u043b\u0438 <code>None</code>, \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439</li> <li>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043b\u0430\u0433\u0438\u043d \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e. \u0415\u0441\u043b\u0438 \u0443 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u043b\u0430\u0433\u0438\u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - <code>None</code>, \u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u043b\u0438 \u0441\u0430\u043c\u043e\u0435 \u043f\u0435\u0440\u0432\u043e\u0435.</li> <li>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0432\u0448\u0438\u0439 \u043f\u043b\u0430\u0433\u0438\u043d \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u043d\u0430 \u0437\u0430\u043c\u0435\u043d\u0443</li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440: \u0435\u0441\u043b\u0438 <code>new_args</code>, \u0442\u043e \u0432 \u043d\u0451\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f <code>{\"args\": (123,), \"kw\": {\"test\": 123}}</code>. \u0415\u0441\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0435\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0440\u0430\u0432\u0435\u043d <code>None</code>, \u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0432\u044b\u0448\u0435.</p>"},{"location":"ru/api/plugins/triggers/#_3","title":"\ud83d\udd37 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":""},{"location":"ru/api/plugins/triggers/#queuetasks-qtasks","title":"\ud83d\udd39 QueueTasks (<code>qtasks</code>)","text":"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 Return \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>qtasks_add_task_before_broker</code> <code>new_args: dict</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0443 <code>qtasks_add_task_after_broker</code> \u2014 \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0443 <code>qtasks_get</code> <code>new_result: Task</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 <code>qtasks_stop</code> \u2014 \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f <code>qtasks_ping</code> \u2014 \u041f\u0438\u043d\u0433\u0443\u0435\u0442 global_config <code>qtasks_flush_all</code> \u2014 \u0421\u0431\u0440\u043e\u0441 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449"},{"location":"ru/api/plugins/triggers/#broker","title":"\ud83d\udd39 Broker","text":"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 Return \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>broker_listen_start</code> \u2014 \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f <code>broker_add_worker</code> <code>new_args: dict</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430 <code>broker_add_before</code> <code>new_model: TaskStatusNewSchema</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0438\u0441\u044c\u044e \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 <code>broker_add_after</code> \u2014 \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 <code>broker_get</code> <code>new_task: Task</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 <code>broker_update</code> <code>new_kw: dict</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 kwargs \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 <code>broker_start</code> \u2014 \u0417\u0430\u043f\u0443\u0441\u043a \u0431\u0440\u043e\u043a\u0435\u0440\u0430 <code>broker_stop</code> \u2014 \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 <code>broker_remove_finished_task</code> <code>new_model</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 <code>broker_running_older_tasks</code> \u2014 \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0441\u0442\u0430\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 <code>broker_flush_all</code> \u2014 \u0421\u0431\u0440\u043e\u0441 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439"},{"location":"ru/api/plugins/triggers/#globalconfig","title":"\ud83d\udd39 GlobalConfig","text":"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 Return \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>global_config_set</code> <code>new_data: dict</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0435\u0440\u0435\u0434 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>global_config_get</code> <code>new_result</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>global_config_get_all</code> <code>new_result</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 <code>global_config_get_match</code> <code>new_result</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443 <code>global_config_start</code> \u2014 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <code>global_config_stop</code> \u2014 \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <code>global_config_set_status</code> \u2014 \u0421\u0438\u0433\u043d\u0430\u043b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430"},{"location":"ru/api/plugins/triggers/#taskexecutor","title":"\ud83d\udd39 TaskExecutor","text":"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 Return \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>task_executor_args_replace</code> <code>new_args: Tuple[list, dict]</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 args \u0438 kwargs \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f <code>task_executor_middlewares_execute</code> \u2014 \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0430\u043c\u0438 <code>task_executor_run_task</code> <code>new_result</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 <code>task_executor_run_task_gen</code> <code>new_results</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 <code>task_executor_run_task_trigger_error</code> <code>new_result</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f <code>TaskPluginTriggerError</code> <code>task_executor_decode</code> <code>new_result</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430"},{"location":"ru/api/plugins/triggers/#starter","title":"\ud83d\udd39 Starter","text":"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 Return \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>starter_start</code> \u2014 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 Starter <code>starter_stop</code> \u2014 \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 Starter"},{"location":"ru/api/plugins/triggers/#storage","title":"\ud83d\udd39 Storage","text":"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 Return \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>storage_add</code> <code>new_data</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0435\u0440\u0435\u0434 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 <code>storage_get</code> <code>new_result: Task</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 <code>storage_get_all</code> <code>new_results: List[Task]</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 <code>storage_update</code> <code>new_kw: dict</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 kwargs \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 <code>storage_remove_finished_task</code> \u2014 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 <code>storage_start</code> \u2014 \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <code>storage_stop</code> \u2014 \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <code>storage_add_process</code> <code>new_data</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 <code>storage_running_older_tasks</code> <code>new_data</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447 <code>storage_delete_finished_tasks</code> \u2014 \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 <code>storage_flush_all</code> \u2014 \u0421\u0431\u0440\u043e\u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430"},{"location":"ru/api/plugins/triggers/#worker","title":"\ud83d\udd39 Worker","text":"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 Return \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>worker_execute_before</code> <code>new_model</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c <code>worker_execute_after</code> \u2014 \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 <code>worker_add</code> <code>new_data</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 <code>worker_start</code> \u2014 \u0417\u0430\u043f\u0443\u0441\u043a \u0432\u043e\u0440\u043a\u0435\u0440\u0430 <code>worker_stop</code> \u2014 \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 <code>worker_run_task_before</code> <code>new_data</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 <code>worker_task_error_retry</code> <code>plugin_result</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 TaskStatusErrorSchema \u043f\u0440\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0435 <code>worker_remove_finished_task</code> <code>new_data</code> \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u0442 TaskPrioritySchema \u0438 TaskStatus... \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 <p>\u042d\u0442\u043e \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438\u043b\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043f\u043e\u0432\u0435\u0440\u0445 QTasks.</p>"},{"location":"ru/api/registries/async_task_decorator/","title":"AsyncTask","text":"<p>Async Task.</p>"},{"location":"ru/api/registries/async_task_decorator/#qtasks.registries.async_task_decorator.AsyncTask","title":"<code>AsyncTask</code>","text":"<p>               Bases: <code>Generic[P, R]</code></p> <p><code>AsyncTask</code> - \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c <code>@app.task</code> \u0438 <code>@shared_task</code>.</p>"},{"location":"ru/api/registries/async_task_decorator/#qtasks.registries.async_task_decorator.AsyncTask--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>import asyncio\nfrom qtasks import QueueTasks\n\napp = QueueTasks()\n\n@app.task(\"test\")\nasync def test():\n    print(\"\u042d\u0442\u043e \u0442\u0435\u0441\u0442!\")\n\nasyncio.run(await test.add_task())\n</code></pre> Source code in <code>src/qtasks/registries/async_task_decorator.py</code> <pre><code>class AsyncTask(Generic[P, R]):\n    \"\"\"`AsyncTask` - \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c `@app.task` \u0438 `@shared_task`.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    import asyncio\n    from qtasks import QueueTasks\n\n    app = QueueTasks()\n\n    @app.task(\"test\")\n    async def test():\n        print(\"\u042d\u0442\u043e \u0442\u0435\u0441\u0442!\")\n\n    asyncio.run(await test.add_task())\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        task_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                    \"\"\"\n            ),\n        ] = None,\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                    \"\"\"\n            ),\n        ] = None,\n        echo: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                    \"\"\"\n            ),\n        ] = False,\n        max_time: Annotated[\n            Union[float, None],\n            Doc(\n                \"\"\"\n                    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            ),\n        ] = None,\n        retry: Annotated[\n            Union[int, None],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        retry_on_exc: Annotated[\n            Union[List[Type[Exception]], None],\n            Doc(\n                \"\"\"\n                    \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        decode: Annotated[\n            Union[Callable, None],\n            Doc(\n                \"\"\"\n                    \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        tags: Annotated[\n            Union[List[str], None],\n            Doc(\n                \"\"\"\n                    \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        description: Annotated[\n            Union[str, None],\n            Doc(\n                \"\"\"\n                    \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        generate_handler: Annotated[\n            Union[Callable, None],\n            Doc(\n                \"\"\"\n                    \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        executor: Annotated[\n            Type[\"BaseTaskExecutor\"],\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_before: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_after: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        extra: Annotated[\n            Dict[str, Any],\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n                    \"\"\"\n            ),\n        ] = None,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self.task_name = task_name\n        self.priority = priority\n\n        self.echo = echo\n\n        self.max_time = max_time\n\n        self.retry = retry\n        self.retry_on_exc = retry_on_exc\n\n        self.decode = decode\n        self.tags = tags\n        self.description = description\n\n        self.executor = executor\n        self.middlewares_before = middlewares_before or []\n        self.middlewares_after = middlewares_after or []\n\n        self.extra = extra or {}\n\n        self._app = app\n\n        self.ctx = AsyncContext(\n            task_name=task_name,\n            generate_handler=generate_handler,\n            executor=executor,\n            app=app,\n        )\n\n    async def add_task(\n        self,\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ]\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n            kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncTask`.\n            task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 `None`.\n        \"\"\"\n        if not self._app:\n            self._update_app()\n\n        if priority is None:\n            priority = self.priority\n        return await self._app.add_task(\n            *args,\n            task_name=task_name or self.task_name,\n            priority=priority,\n            timeout=timeout,\n            **kwargs\n        )\n\n    def _update_app(self) -&gt; \"QueueTasks\":\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\"\"\"\n        if not self._app:\n            import qtasks._state\n\n            if qtasks._state.app_main is None:\n                raise ImportError(\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c app!\")\n            self._app = qtasks._state.app_main\n        return\n</code></pre>"},{"location":"ru/api/registries/async_task_decorator/#qtasks.registries.async_task_decorator.AsyncTask.__init__","title":"<code>__init__(task_name=None, priority=None, echo=False, max_time=None, retry=None, retry_on_exc=None, decode=None, tags=None, description=None, generate_handler=None, executor=None, middlewares_before=None, middlewares_after=None, extra=None, app=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>echo</code> <code>bool</code> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> <code>False</code> <code>max_time</code> <code>float</code> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>retry</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>retry_on_exc</code> <code>List[Type[Exception]]</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>decode</code> <code>Callable</code> <p>\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>tags</code> <code>List[str]</code> <p>\u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>description</code> <code>str</code> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>generate_handler</code> <code>Callable</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>executor</code> <code>Type[BaseTaskExecutor]</code> <p>\u041a\u043b\u0430\u0441\u0441 <code>BaseTaskExecutor</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>middlewares_before</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <code>middlewares_after</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <code>app</code> <code>QueueTasks</code> <p><code>QueueTasks</code> \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/registries/async_task_decorator.py</code> <pre><code>def __init__(\n    self,\n    task_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                \"\"\"\n        ),\n    ] = None,\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                \"\"\"\n        ),\n    ] = None,\n    echo: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                \"\"\"\n        ),\n    ] = False,\n    max_time: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n                \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        ),\n    ] = None,\n    retry: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    retry_on_exc: Annotated[\n        Union[List[Type[Exception]], None],\n        Doc(\n            \"\"\"\n                \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    decode: Annotated[\n        Union[Callable, None],\n        Doc(\n            \"\"\"\n                \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    tags: Annotated[\n        Union[List[str], None],\n        Doc(\n            \"\"\"\n                \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    description: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n                \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    generate_handler: Annotated[\n        Union[Callable, None],\n        Doc(\n            \"\"\"\n                \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    executor: Annotated[\n        Type[\"BaseTaskExecutor\"],\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_before: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_after: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    extra: Annotated[\n        Dict[str, Any],\n        Doc(\n            \"\"\"\n                \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n                \"\"\"\n        ),\n    ] = None,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c AsyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n        max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self.task_name = task_name\n    self.priority = priority\n\n    self.echo = echo\n\n    self.max_time = max_time\n\n    self.retry = retry\n    self.retry_on_exc = retry_on_exc\n\n    self.decode = decode\n    self.tags = tags\n    self.description = description\n\n    self.executor = executor\n    self.middlewares_before = middlewares_before or []\n    self.middlewares_after = middlewares_after or []\n\n    self.extra = extra or {}\n\n    self._app = app\n\n    self.ctx = AsyncContext(\n        task_name=task_name,\n        generate_handler=generate_handler,\n        executor=executor,\n        app=app,\n    )\n</code></pre>"},{"location":"ru/api/registries/async_task_decorator/#qtasks.registries.async_task_decorator.AsyncTask.add_task","title":"<code>add_task(*args, priority=None, timeout=None, task_name=None, **kwargs)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>{}</code>.</p> <code>{}</code> <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>qtasks.results.SyncTask</code>.</p> <code>None</code> <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 <code>None</code>.</p> Source code in <code>src/qtasks/registries/async_task_decorator.py</code> <pre><code>async def add_task(\n    self,\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ]\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n        kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncTask`.\n        task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 `None`.\n    \"\"\"\n    if not self._app:\n        self._update_app()\n\n    if priority is None:\n        priority = self.priority\n    return await self._app.add_task(\n        *args,\n        task_name=task_name or self.task_name,\n        priority=priority,\n        timeout=timeout,\n        **kwargs\n    )\n</code></pre>"},{"location":"ru/api/registries/sync_task_decorator/","title":"SyncTask","text":"<p>Sync Task.</p>"},{"location":"ru/api/registries/sync_task_decorator/#qtasks.registries.sync_task_decorator.SyncTask","title":"<code>SyncTask</code>","text":"<p>               Bases: <code>Generic[P, R]</code></p> <p><code>SyncTask</code> - \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c <code>@app.task</code> \u0438 <code>@shared_task</code>.</p>"},{"location":"ru/api/registries/sync_task_decorator/#qtasks.registries.sync_task_decorator.SyncTask--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\n\napp = QueueTasks()\n\n@app.task(\"test\")\ndef test():\n    print(\"\u042d\u0442\u043e \u0442\u0435\u0441\u0442!\")\n\ntest.add_task()\n</code></pre> Source code in <code>src/qtasks/registries/sync_task_decorator.py</code> <pre><code>class SyncTask(Generic[P, R]):\n    \"\"\"`SyncTask` - \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c `@app.task` \u0438 `@shared_task`.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n\n    app = QueueTasks()\n\n    @app.task(\"test\")\n    def test():\n        print(\"\u042d\u0442\u043e \u0442\u0435\u0441\u0442!\")\n\n    test.add_task()\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        task_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                    \"\"\"\n            ),\n        ] = None,\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                    \"\"\"\n            ),\n        ] = None,\n        echo: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                    \"\"\"\n            ),\n        ] = False,\n        max_time: Annotated[\n            Union[float, None],\n            Doc(\n                \"\"\"\n                    \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            ),\n        ] = None,\n        retry: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        retry_on_exc: Annotated[\n            List[Type[Exception]],\n            Doc(\n                \"\"\"\n                    \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        decode: Annotated[\n            Callable,\n            Doc(\n                \"\"\"\n                    \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n            )\n        ] = None,\n        tags: Annotated[\n            List[str],\n            Doc(\n                \"\"\"\n                    \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n            )\n        ] = None,\n        generate_handler: Annotated[\n            Callable,\n            Doc(\n                \"\"\"\n                    \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        executor: Annotated[\n            Type[\"BaseTaskExecutor\"],\n            Doc(\n                \"\"\"\n                    \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_before: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        middlewares_after: Annotated[\n            List[\"TaskMiddleware\"],\n            Doc(\n                \"\"\"\n                    \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                    \"\"\"\n            ),\n        ] = None,\n        extra: Annotated[\n            Dict[str, Any],\n            Doc(\n                \"\"\"\n                    \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n                    \"\"\"\n            ),\n        ] = None,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n            max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n            app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self.task_name = task_name\n        self.priority = priority\n\n        self.echo = echo\n\n        self.max_time = max_time\n\n        self.retry = retry\n        self.retry_on_exc = retry_on_exc\n\n        self.decode = decode\n        self.tags = tags\n        self.description = description\n\n        self.executor = executor\n        self.middlewares_before = middlewares_before or []\n        self.middlewares_after = middlewares_after or []\n\n        self.extra = extra or {}\n\n        self._app = app\n\n        self.ctx = SyncContext(\n            task_name=task_name,\n            generate_handler=generate_handler,\n            executor=executor,\n            app=app,\n        )\n\n    def add_task(\n        self,\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n            kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncTask`.\n            task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 `None`.\n        \"\"\"\n        if not self._app:\n            self._update_app()\n\n        if priority is None:\n            priority = self.priority\n\n        return self._app.add_task(\n            *args,\n            task_name=task_name or self.task_name,\n            priority=priority,\n            timeout=timeout,\n            **kwargs\n        )\n\n    def _update_app(self) -&gt; \"QueueTasks\":\n        if not self._app:\n            import qtasks._state\n\n            if qtasks._state.app_main is None:\n                raise ImportError(\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c app!\")\n            self._app = qtasks._state.app_main\n        return\n</code></pre>"},{"location":"ru/api/registries/sync_task_decorator/#qtasks.registries.sync_task_decorator.SyncTask.__init__","title":"<code>__init__(task_name=None, priority=None, echo=False, max_time=None, retry=None, retry_on_exc=None, decode=None, tags=None, description=None, generate_handler=None, executor=None, middlewares_before=None, middlewares_after=None, extra=None, app=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>echo</code> <code>bool</code> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> <code>False</code> <code>max_time</code> <code>float</code> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>retry</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>retry_on_exc</code> <code>List[Type[Exception]]</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>decode</code> <code>Callable</code> <p>\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>tags</code> <code>List[str]</code> <p>\u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>description</code> <code>str</code> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>generate_handler</code> <code>Callable</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>executor</code> <code>Type[BaseTaskExecutor]</code> <p>\u041a\u043b\u0430\u0441\u0441 <code>BaseTaskExecutor</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>middlewares_before</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <code>middlewares_after</code> <code>List[TaskMiddleware]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>None</code> <code>app</code> <code>QueueTasks</code> <p><code>QueueTasks</code> \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/registries/sync_task_decorator.py</code> <pre><code>def __init__(\n    self,\n    task_name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `func.__name__`.\n                \"\"\"\n        ),\n    ] = None,\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `config.default_task_priority`.\n                \"\"\"\n        ),\n    ] = None,\n    echo: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n                \"\"\"\n        ),\n    ] = False,\n    max_time: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n                \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        ),\n    ] = None,\n    retry: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    retry_on_exc: Annotated[\n        List[Type[Exception]],\n        Doc(\n            \"\"\"\n                \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    decode: Annotated[\n        Callable,\n        Doc(\n            \"\"\"\n                \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n            \"\"\"\n        )\n    ] = None,\n    tags: Annotated[\n        List[str],\n        Doc(\n            \"\"\"\n                \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            \"\"\"\n        )\n    ] = None,\n    generate_handler: Annotated[\n        Callable,\n        Doc(\n            \"\"\"\n                \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    executor: Annotated[\n        Type[\"BaseTaskExecutor\"],\n        Doc(\n            \"\"\"\n                \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_before: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    middlewares_after: Annotated[\n        List[\"TaskMiddleware\"],\n        Doc(\n            \"\"\"\n                \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n                \"\"\"\n        ),\n    ] = None,\n    extra: Annotated[\n        Dict[str, Any],\n        Doc(\n            \"\"\"\n                \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n                \"\"\"\n        ),\n    ] = None,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        echo (bool, optional): \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SyncTask \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n        max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        executor (Type[\"BaseTaskExecutor\"], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        middlewares_before (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        middlewares_after (List[\"TaskMiddleware\"], optional): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self.task_name = task_name\n    self.priority = priority\n\n    self.echo = echo\n\n    self.max_time = max_time\n\n    self.retry = retry\n    self.retry_on_exc = retry_on_exc\n\n    self.decode = decode\n    self.tags = tags\n    self.description = description\n\n    self.executor = executor\n    self.middlewares_before = middlewares_before or []\n    self.middlewares_after = middlewares_after or []\n\n    self.extra = extra or {}\n\n    self._app = app\n\n    self.ctx = SyncContext(\n        task_name=task_name,\n        generate_handler=generate_handler,\n        executor=executor,\n        app=app,\n    )\n</code></pre>"},{"location":"ru/api/registries/sync_task_decorator/#qtasks.registries.sync_task_decorator.SyncTask.add_task","title":"<code>add_task(*args, priority=None, timeout=None, task_name=None, **kwargs)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>{}</code>.</p> <code>{}</code> <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>qtasks.results.SyncTask</code>.</p> <code>None</code> <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 <code>None</code>.</p> Source code in <code>src/qtasks/registries/sync_task_decorator.py</code> <pre><code>def add_task(\n    self,\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n        kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncTask`.\n        task_name (str, optional): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 `None`.\n    \"\"\"\n    if not self._app:\n        self._update_app()\n\n    if priority is None:\n        priority = self.priority\n\n    return self._app.add_task(\n        *args,\n        task_name=task_name or self.task_name,\n        priority=priority,\n        timeout=timeout,\n        **kwargs\n    )\n</code></pre>"},{"location":"ru/api/results/async_result/","title":"AsyncResult","text":"<p>Async Result.</p>"},{"location":"ru/api/results/async_result/#qtasks.results.async_result.AsyncResult","title":"<code>AsyncResult</code>","text":"<p><code>AsyncResult</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/results/async_result/#qtasks.results.async_result.AsyncResult--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>import asyncio\n\nfrom qtasks import QueueTasks\nfrom qtasks.results import AsyncResult\n\napp = QueueTasks()\n\nasync def main():\n    task = await app.add_task(task_name=\"test\")\n    result = await AsyncResult(uuid=task.uuid).result(timeout=50)\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/qtasks/results/async_result.py</code> <pre><code>class AsyncResult:\n    \"\"\"`AsyncResult` - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    import asyncio\n\n    from qtasks import QueueTasks\n    from qtasks.results import AsyncResult\n\n    app = QueueTasks()\n\n    async def main():\n        task = await app.add_task(task_name=\"test\")\n        result = await AsyncResult(uuid=task.uuid).result(timeout=50)\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        app: Annotated[\n            Optional[\"QueueTasks\"],\n            Doc(\n                \"\"\"\n                    `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\n        Args:\n            uuid (UUID | str, optional): UUID \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        \"\"\"\n        self._app = app\n        self._update_state()\n        self.log = (\n            log.with_subname(\"AsyncResult\", default_level=self._app.config.logs_default_level_client)\n            if log\n            else Logger(\n                name=self._app.name,\n                subname=\"AsyncResult\",\n                default_level=self._app.config.logs_default_level_client,\n                format=self._app.config.logs_format,\n            )\n        )\n        self._stop_event = asyncio.Event()\n\n        self.uuid = uuid\n\n    async def result(\n        self,\n        timeout: Annotated[\n            float,\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n                    \"\"\"\n            ),\n        ] = 100,\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n\n        Returns:\n            Task | None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None.\n        \"\"\"\n        self._stop_event.clear()\n        try:\n            result = await asyncio.wait_for(self._execute_task(), timeout)\n            self.log.debug(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {result.uuid} \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430!\")\n            return result\n        except asyncio.TimeoutError:\n            self.log.warning(f\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c {timeout} \u0441\u0435\u043a\u0443\u043d\u0434!\")\n            self._stop_event.set()\n            return None\n\n    async def _execute_task(self) -&gt; Union[\"Task\", None]:\n        uuid = self.uuid\n        while True:\n            if self._stop_event.is_set():\n                break\n\n            task = await self._app.get(uuid=uuid)\n            if hasattr(task, \"retry\") and task.retry &gt; 0 and hasattr(task, \"retry_child_uuid\"):\n                uuid = task.retry_child_uuid\n                continue\n            if not task or task.status not in self._app.config.result_statuses_end:\n                await asyncio.sleep(self._app.config.result_time_interval)\n                continue\n            return task\n\n    def _update_state(self) -&gt; \"QueueTasks\":\n        import qtasks._state\n\n        if not self._app:\n            if qtasks._state.app_main is None:\n                raise ImportError(\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c app!\")\n            self._app = qtasks._state.app_main\n</code></pre>"},{"location":"ru/api/results/async_result/#qtasks.results.async_result.AsyncResult.__init__","title":"<code>__init__(uuid=None, app=None, log=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>app</code> <code>QueueTasks</code> <p><code>QueueTasks</code> \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> Source code in <code>src/qtasks/results/async_result.py</code> <pre><code>def __init__(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    app: Annotated[\n        Optional[\"QueueTasks\"],\n        Doc(\n            \"\"\"\n                `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\n    Args:\n        uuid (UUID | str, optional): UUID \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n    \"\"\"\n    self._app = app\n    self._update_state()\n    self.log = (\n        log.with_subname(\"AsyncResult\", default_level=self._app.config.logs_default_level_client)\n        if log\n        else Logger(\n            name=self._app.name,\n            subname=\"AsyncResult\",\n            default_level=self._app.config.logs_default_level_client,\n            format=self._app.config.logs_format,\n        )\n    )\n    self._stop_event = asyncio.Event()\n\n    self.uuid = uuid\n</code></pre>"},{"location":"ru/api/results/async_result/#qtasks.results.async_result.AsyncResult.result","title":"<code>result(timeout=100)</code>  <code>async</code>","text":"<p>\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>100</code>.</p> <code>100</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task | None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/results/async_result.py</code> <pre><code>async def result(\n    self,\n    timeout: Annotated[\n        float,\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n                \"\"\"\n        ),\n    ] = 100,\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n\n    Returns:\n        Task | None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None.\n    \"\"\"\n    self._stop_event.clear()\n    try:\n        result = await asyncio.wait_for(self._execute_task(), timeout)\n        self.log.debug(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {result.uuid} \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430!\")\n        return result\n    except asyncio.TimeoutError:\n        self.log.warning(f\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c {timeout} \u0441\u0435\u043a\u0443\u043d\u0434!\")\n        self._stop_event.set()\n        return None\n</code></pre>"},{"location":"ru/api/results/sync_result/","title":"SyncResult","text":"<p>Sync Result.</p>"},{"location":"ru/api/results/sync_result/#qtasks.results.sync_result.SyncResult","title":"<code>SyncResult</code>","text":"<p><code>SyncResult</code> - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/results/sync_result/#qtasks.results.sync_result.SyncResult--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.results import SyncResult\n\napp = QueueTasks()\n\ntask = app.add_task(task_name=\"test\")\nresult = SyncResult(uuid=task.uuid).result(timeout=50)\n</code></pre> Source code in <code>src/qtasks/results/sync_result.py</code> <pre><code>class SyncResult:\n    \"\"\"`SyncResult` - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n\n    from qtasks import QueueTasks\n    from qtasks.results import SyncResult\n\n    app = QueueTasks()\n\n    task = app.add_task(task_name=\"test\")\n    result = SyncResult(uuid=task.uuid).result(timeout=50)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        app: Annotated[\n            Optional[\"QueueTasks\"],\n            Doc(\n                \"\"\"\n                    `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\n        Args:\n            uuid (UUID | str, optional): UUID \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        \"\"\"\n        self._app = app\n        self._update_state()\n        self.log = (\n            log.with_subname(\"SyncResult\", default_level=self._app.config.logs_default_level_client)\n            if log\n            else Logger(\n                name=self._app.name,\n                subname=\"SyncResult\",\n                default_level=self._app.config.logs_default_level_client,\n                format=self._app.config.logs_format,\n            )\n        )\n        self._stop_event = threading.Event()\n\n        self.uuid = uuid\n\n    def result(\n        self,\n        timeout: Annotated[\n            float,\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n                    \"\"\"\n            ),\n        ] = 100,\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n\n        Returns:\n            Task | None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None.\n        \"\"\"\n        self._stop_event.clear()\n        with ThreadPoolExecutor(max_workers=1) as executor:\n            future = executor.submit(self._execute_task)\n            try:\n                result = future.result(timeout=timeout)\n                self.log.debug(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {result.uuid} \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430!\")\n                return result\n            except TimeoutError:\n                self.log.warning(f\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c {timeout} \u0441\u0435\u043a\u0443\u043d\u0434!\")\n                self._stop_event.set()\n                return None\n\n    def _execute_task(self) -&gt; Union[\"Task\", None]:\n        uuid = self.uuid\n        while True:\n            if self._stop_event.is_set():\n                break\n\n            task = self._app.get(uuid=uuid)\n            if hasattr(task, \"retry\") and hasattr(task, \"retry_child_uuid\"):\n                uuid = task.retry_child_uuid\n                continue\n            if not task or task.status not in self._app.config.result_statuses_end:\n                time.sleep(self._app.config.result_time_interval)\n                continue\n\n            return task\n\n    def _update_state(self) -&gt; \"QueueTasks\":\n        import qtasks._state\n\n        if not self._app:\n            if qtasks._state.app_main is None:\n                raise ImportError(\"\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c app!\")\n            self._app = qtasks._state.app_main\n</code></pre>"},{"location":"ru/api/results/sync_result/#qtasks.results.sync_result.SyncResult.__init__","title":"<code>__init__(uuid=None, app=None, log=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>app</code> <code>QueueTasks</code> <p><code>QueueTasks</code> \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> Source code in <code>src/qtasks/results/sync_result.py</code> <pre><code>def __init__(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    app: Annotated[\n        Optional[\"QueueTasks\"],\n        Doc(\n            \"\"\"\n                `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks._state.app_main`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\n    Args:\n        uuid (UUID | str, optional): UUID \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        app (QueueTasks, optional): `QueueTasks` \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n    \"\"\"\n    self._app = app\n    self._update_state()\n    self.log = (\n        log.with_subname(\"SyncResult\", default_level=self._app.config.logs_default_level_client)\n        if log\n        else Logger(\n            name=self._app.name,\n            subname=\"SyncResult\",\n            default_level=self._app.config.logs_default_level_client,\n            format=self._app.config.logs_format,\n        )\n    )\n    self._stop_event = threading.Event()\n\n    self.uuid = uuid\n</code></pre>"},{"location":"ru/api/results/sync_result/#qtasks.results.sync_result.SyncResult.result","title":"<code>result(timeout=100)</code>","text":"<p>\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>100</code>.</p> <code>100</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task | None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/results/sync_result.py</code> <pre><code>def result(\n    self,\n    timeout: Annotated[\n        float,\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n                \"\"\"\n        ),\n    ] = 100,\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `100`.\n\n    Returns:\n        Task | None: \u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 None.\n    \"\"\"\n    self._stop_event.clear()\n    with ThreadPoolExecutor(max_workers=1) as executor:\n        future = executor.submit(self._execute_task)\n        try:\n            result = future.result(timeout=timeout)\n            self.log.debug(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {result.uuid} \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430!\")\n            return result\n        except TimeoutError:\n            self.log.warning(f\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c {timeout} \u0441\u0435\u043a\u0443\u043d\u0434!\")\n            self._stop_event.set()\n            return None\n</code></pre>"},{"location":"ru/api/schemas/global_config/","title":"GlobalConfig","text":"<p>Global Config Schema.</p>"},{"location":"ru/api/schemas/global_config/#qtasks.schemas.global_config.GlobalConfigSchema","title":"<code>GlobalConfigSchema</code>  <code>dataclass</code>","text":"<p><code>GlobalConfigSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 <code>GlobalConfig.name</code>.</p> required <code>status</code> <code>str</code> <p>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 <code>GlobalConfig.status</code>.</p> required Source code in <code>src/qtasks/schemas/global_config.py</code> <pre><code>@dataclass\nclass GlobalConfigSchema:\n    \"\"\"`GlobalConfigSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        name (str): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 `GlobalConfig.name`.\n        status (str): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 `GlobalConfig.status`.\n    \"\"\"\n\n    name: str\n    status: str\n</code></pre>"},{"location":"ru/api/schemas/inits/","title":"Inits","text":"<p>Init Inits.</p>"},{"location":"ru/api/schemas/inits/#qtasks.schemas.inits.InitsExecSchema","title":"<code>InitsExecSchema</code>  <code>dataclass</code>","text":"<p><code>InitsExecSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f.</p> required <code>func</code> <code>FunctionType</code> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p> required <code>awaiting</code> <code>bool</code> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: False</p> <code>False</code> Source code in <code>src/qtasks/schemas/inits.py</code> <pre><code>@dataclass\nclass InitsExecSchema:\n    \"\"\"`InitsExecSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f.\n        func (FunctionType): \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.\n\n        awaiting (bool): \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: False\n    \"\"\"\n\n    name: str\n    func: FunctionType\n\n    awaiting: bool = False\n</code></pre>"},{"location":"ru/api/schemas/queueconfig/","title":"QueueConfig","text":"<p>QueueConfig Schema.</p>"},{"location":"ru/api/schemas/queueconfig/#qtasks.configs.config.QueueConfig","title":"<code>QueueConfig</code>  <code>dataclass</code>","text":"<p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.</p> <p>Attributes:</p> Name Type Description <code>max_tasks_process</code> <code>int</code> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 10</p> <code>running_older_tasks</code> <code>bool</code> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u043e\u0448\u043b\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: False</p> <code>delete_finished_tasks</code> <code>bool</code> <p>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: False</p> <code>default_task_priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 0</p> <code>logs_default_level_server</code> <code>int</code> <p>\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: logging.INFO (20)</p> <code>logs_default_level_client</code> <code>int | None</code> <p>\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: logging.INFO (20)</p> <code>logs_format</code> <code>str</code> <p>\u0424\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"%(asctime)s [%(name)s: %(levelname)s] %(message)s\"</p> Source code in <code>src/qtasks/configs/config.py</code> <pre><code>@dataclass\nclass QueueConfig:\n    \"\"\"\n    \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.\n\n    Attributes:\n        max_tasks_process (int): \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 10\n        running_older_tasks (bool): \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u043e\u0448\u043b\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: False\n        delete_finished_tasks (bool): \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: False\n\n        default_task_priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 0\n\n        logs_default_level_server (int): \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: logging.INFO (20)\n        logs_default_level_client (int | None): \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: logging.INFO (20)\n        logs_format (str): \u0424\u043e\u0440\u043c\u0430\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"%(asctime)s [%(name)s: %(levelname)s] %(message)s\"\n    \"\"\"\n\n    max_tasks_process: int = 10\n    running_older_tasks: bool = False\n    delete_finished_tasks: bool = True\n\n    default_task_priority: int = 0\n\n    global_config_status_ttl = 20\n    global_config_status_set_periodic = 17\n\n    logs_default_level_server: int = logging.INFO\n    logs_default_level_client: int = logging.INFO\n    logs_format: str = \"%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s\"\n\n    result_time_interval: float = 1.0\n    result_statuses_end: List[str] = field(\n        default_factory=lambda: [\n            TaskStatusEnum.SUCCESS.value,\n            TaskStatusEnum.ERROR.value,\n            TaskStatusEnum.CANCEL.value\n        ]\n    )\n\n    _callbacks: List[Callable[[\"QueueConfig\", str, Any], None]] = field(\n        default_factory=list, init=False, repr=False\n    )\n    _dynamic_fields: Dict[str, Any] = field(\n        default_factory=dict, init=False, repr=False\n    )\n\n    def subscribe(self, callback: Callable[[\"QueueConfig\", str, Any], None]):\n        \"\"\"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435.\"\"\"\n        self._callbacks.append(callback)\n\n    def _notify(self, key: str, value: Any):\n        for callback in self._callbacks:\n            callback(self, key, value)\n\n    def __getattr__(self, item):\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430.\"\"\"\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043b\u044f\n        if item in self._dynamic_fields:\n            return self._dynamic_fields[item]\n        # \u0412\u044b\u0437\u043e\u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f dataclass\n        raise AttributeError(f\"{type(self).__name__} has no attribute '{item}'\")\n\n    def __setattr__(self, key, value):\n        \"\"\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430.\"\"\"\n        # \u0414\u043b\u044f \u043f\u043e\u043b\u0435\u0439 dataclass\n        if key in self.__annotations__:\n            object.__setattr__(self, key, value)\n            if (\n                \"_callbacks\" in self.__dict__\n            ):  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438\n                self._notify(key, value)\n        # \u0414\u043b\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432\n        elif key.startswith(\"_\"):\n            object.__setattr__(self, key, value)\n        # \u0414\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u043e\u043b\u0435\u0439\n        else:\n            dynamic_fields = object.__getattribute__(self, \"_dynamic_fields\")\n            dynamic_fields[key] = value\n            self._notify(key, value)\n</code></pre>"},{"location":"ru/api/schemas/queueconfig/#qtasks.configs.config.QueueConfig.__getattr__","title":"<code>__getattr__(item)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430.</p> Source code in <code>src/qtasks/configs/config.py</code> <pre><code>def __getattr__(self, item):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430.\"\"\"\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043b\u044f\n    if item in self._dynamic_fields:\n        return self._dynamic_fields[item]\n    # \u0412\u044b\u0437\u043e\u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f dataclass\n    raise AttributeError(f\"{type(self).__name__} has no attribute '{item}'\")\n</code></pre>"},{"location":"ru/api/schemas/queueconfig/#qtasks.configs.config.QueueConfig.__setattr__","title":"<code>__setattr__(key, value)</code>","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430.</p> Source code in <code>src/qtasks/configs/config.py</code> <pre><code>def __setattr__(self, key, value):\n    \"\"\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430.\"\"\"\n    # \u0414\u043b\u044f \u043f\u043e\u043b\u0435\u0439 dataclass\n    if key in self.__annotations__:\n        object.__setattr__(self, key, value)\n        if (\n            \"_callbacks\" in self.__dict__\n        ):  # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438\n            self._notify(key, value)\n    # \u0414\u043b\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432\n    elif key.startswith(\"_\"):\n        object.__setattr__(self, key, value)\n    # \u0414\u043b\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u043e\u043b\u0435\u0439\n    else:\n        dynamic_fields = object.__getattribute__(self, \"_dynamic_fields\")\n        dynamic_fields[key] = value\n        self._notify(key, value)\n</code></pre>"},{"location":"ru/api/schemas/queueconfig/#qtasks.configs.config.QueueConfig.subscribe","title":"<code>subscribe(callback)</code>","text":"<p>\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435.</p> Source code in <code>src/qtasks/configs/config.py</code> <pre><code>def subscribe(self, callback: Callable[[\"QueueConfig\", str, Any], None]):\n    \"\"\"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435.\"\"\"\n    self._callbacks.append(callback)\n</code></pre>"},{"location":"ru/api/schemas/task_exec/","title":"TaskExec","text":"<p>TaskPriority and TaskExec Schema.</p>"},{"location":"ru/api/schemas/task_exec/#qtasks.schemas.task_exec.TaskExecSchema","title":"<code>TaskExecSchema</code>  <code>dataclass</code>","text":"<p><code>TaskExecSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.</p> required <code>name</code> <code>str</code> <p>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.</p> required <code>func</code> <code>FunctionType</code> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>awaiting</code> <code>bool</code> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code></p> <code>False</code> <code>generating</code> <code>str | Literal[False]</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code></p> <code>False</code> <code>echo</code> <code>bool</code> <p>\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 self \u0432 \u0437\u0430\u0434\u0430\u0447\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code></p> <code>False</code> <code>max_time</code> <code>float</code> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code></p> <code>None</code> <code>retry</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code></p> <code>None</code> <code>retry_on_exc</code> <code>List[Type[Exception]]</code> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code></p> <code>None</code> <code>decode</code> <code>Callable</code> <p>\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code></p> <code>None</code> <code>tags</code> <code>List[str]</code> <p>\u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code></p> <code>None</code> <code>description</code> <code>str</code> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>generate_handler</code> <code>Callable</code> <p>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code></p> <code>None</code> <code>executor</code> <code>Type[BaseTaskExecutor]</code> <p>\u041a\u043b\u0430\u0441\u0441 <code>BaseTaskExecutor</code>. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>SyncTaskExecutor</code>|<code>AsyncTaskExecutor</code>.</p> <code>None</code> <code>middlewares_before</code> <code>List[Type[TaskMiddleware]]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>list()</code> <code>middlewares_after</code> <code>List[Type[TaskMiddleware]]</code> <p>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432</code>.</p> <code>list()</code> <code>extra</code> <code>Dict[str, Any]</code> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c</code>.</p> <code>dict()</code> Source code in <code>src/qtasks/schemas/task_exec.py</code> <pre><code>@dataclass\nclass TaskExecSchema:\n    \"\"\"`TaskExecSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.\n        name (str): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.\n\n        func (FunctionType): \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        awaiting (bool): \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`\n        generating (str|Literal[False]): \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`\n\n        echo (bool): \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 self \u0432 \u0437\u0430\u0434\u0430\u0447\u0443. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`\n\n        max_time (float, optional): \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`\n\n        retry (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`\n        retry_on_exc (List[Type[Exception]], optional): \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`\n\n        decode (Callable, optional): \u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`\n        tags (List[str], optional): \u0422\u0435\u0433\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`\n        description (str, optional): \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n\n        generate_handler (Callable, optional): \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`\n\n        executor (Type[BaseTaskExecutor], optional): \u041a\u043b\u0430\u0441\u0441 `BaseTaskExecutor`. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `SyncTaskExecutor`|`AsyncTaskExecutor`.\n        middlewares_before (List[Type[TaskMiddleware]]): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u0434\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n        middlewares_after (List[Type[TaskMiddleware]]): \u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432`.\n\n        extra (Dict[str, Any]): \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `\u041f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c`.\n\n    \"\"\"\n\n    priority: int\n    name: str\n\n    func: FunctionType\n    awaiting: bool = False\n    generating: Union[str, Literal[False]] = False\n\n    echo: bool = False\n\n    max_time: Union[float, None] = None\n\n    retry: Union[int, None] = None\n    retry_on_exc: Union[List[Type[Exception]], None] = None\n\n    decode: Union[Callable, None] = None\n    tags: Union[List[str], None] = None\n    description: Union[str, None] = None\n\n    generate_handler: Union[Callable, None] = None\n\n    executor: Union[Type[\"BaseTaskExecutor\"], None] = None\n    middlewares_before: List[Type[\"TaskMiddleware\"]] = field(default_factory=list)\n    middlewares_after: List[Type[\"TaskMiddleware\"]] = field(default_factory=list)\n\n    extra: dict = field(default_factory=dict)\n\n    def add_middlewares_before(self, middlewares: List[Type[\"TaskMiddleware\"]]) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043a \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            middlewares (List[Type[TaskMiddleware]]): \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.\n        \"\"\"\n        self.middlewares_before.extend(middlewares)\n\n    def add_middlewares_after(self, middlewares: List[Type[\"TaskMiddleware\"]]) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043a \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            middlewares (List[Type[TaskMiddleware]]): \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.\n        \"\"\"\n        self.middlewares_after.extend(middlewares)\n</code></pre>"},{"location":"ru/api/schemas/task_exec/#qtasks.schemas.task_exec.TaskExecSchema.add_middlewares_after","title":"<code>add_middlewares_after(middlewares)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043a \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>middlewares</code> <code>List[Type[TaskMiddleware]]</code> <p>\u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.</p> required Source code in <code>src/qtasks/schemas/task_exec.py</code> <pre><code>def add_middlewares_after(self, middlewares: List[Type[\"TaskMiddleware\"]]) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043a \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        middlewares (List[Type[TaskMiddleware]]): \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.\n    \"\"\"\n    self.middlewares_after.extend(middlewares)\n</code></pre>"},{"location":"ru/api/schemas/task_exec/#qtasks.schemas.task_exec.TaskExecSchema.add_middlewares_before","title":"<code>add_middlewares_before(middlewares)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043a \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>middlewares</code> <code>List[Type[TaskMiddleware]]</code> <p>\u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.</p> required Source code in <code>src/qtasks/schemas/task_exec.py</code> <pre><code>def add_middlewares_before(self, middlewares: List[Type[\"TaskMiddleware\"]]) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043a \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        middlewares (List[Type[TaskMiddleware]]): \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0438\u0434\u043b\u0432\u0430\u0440\u0435\u0439.\n    \"\"\"\n    self.middlewares_before.extend(middlewares)\n</code></pre>"},{"location":"ru/api/schemas/task_exec/#qtasks.schemas.task_exec.TaskPrioritySchema","title":"<code>TaskPrioritySchema</code>  <code>dataclass</code>","text":"<p><code>TaskPrioritySchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.</p> required <code>uuid</code> <code>UUID</code> <p>UUID.</p> required <code>name</code> <code>str</code> <p>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.</p> required <code>args</code> <code>Tuple[str]</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 args.</p> <code>list()</code> <code>kwargs</code> <code>Dict[str, str]</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 kwargs.</p> <code>dict()</code> <code>created_at</code> <code>float</code> <p>\u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>timestamp</code>.</p> <code>0.0</code> <code>updated_at</code> <code>float</code> <p>\u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>timestamp</code>.</p> <code>0.0</code> Source code in <code>src/qtasks/schemas/task_exec.py</code> <pre><code>@dataclass(order=True)\nclass TaskPrioritySchema:\n    \"\"\"`TaskPrioritySchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.\n        uuid (UUID): UUID.\n        name (str): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.\n\n        args (Tuple[str]): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 args.\n        kwargs (Dict[str, str]): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 kwargs.\n\n        created_at (float): \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 `timestamp`.\n        updated_at (float): \u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 `timestamp`.\n    \"\"\"\n\n    priority: int\n    uuid: UUID = field(compare=False)\n    name: str = field(compare=False)\n\n    args: list = field(default_factory=list, compare=False)\n    kwargs: dict = field(default_factory=dict, compare=False)\n\n    created_at: float = 0.0\n    updated_at: float = 0.0\n</code></pre>"},{"location":"ru/api/schemas/task_status/","title":"TaskStatus","text":"<p>Task Status Schema.</p>"},{"location":"ru/api/schemas/task_status/#qtasks.schemas.task_status.BaseTaskStatusSchema","title":"<code>BaseTaskStatusSchema</code>  <code>dataclass</code>","text":"<p><code>BaseTaskStatusSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>\u0421\u0442\u0430\u0442\u0443\u0441.</p> required <code>task_name</code> <code>str</code> <p>\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.</p> <code>''</code> <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.</p> <code>0</code> <code>args</code> <code>Tuple[str]</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 args.</p> <code>'[]'</code> <code>kwargs</code> <code>Dict[str, str]</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 kwargs.</p> <code>'{}'</code> <code>created_at</code> <code>float</code> <p>\u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>timestamp</code>.</p> <code>0.0</code> <code>updated_at</code> <code>float</code> <p>\u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>timestamp</code>.</p> <code>time()</code> <code>returning</code> <code>str | None</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>traceback</code> <code>str | None</code> <p>\u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required Source code in <code>src/qtasks/schemas/task_status.py</code> <pre><code>@dataclass\nclass BaseTaskStatusSchema:\n    \"\"\"`BaseTaskStatusSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        status (str): \u0421\u0442\u0430\u0442\u0443\u0441.\n        task_name (str): \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435.\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442.\n        args (Tuple[str]): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 args.\n        kwargs (Dict[str, str]): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0442\u0438\u043f\u0430 kwargs.\n\n        created_at (float): \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 `timestamp`.\n        updated_at (float): \u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 `timestamp`.\n        returning (str | None): \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        traceback (str | None): \u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n\n    task_name: str = \"\"\n    priority: int = 0\n\n    args: Tuple[str] = field(default=\"[]\")\n    kwargs: Dict[str, str] = field(default=\"{}\")\n\n    created_at: float = 0.0\n    updated_at: float = field(default_factory=time)\n\n    def __post_init__(self):\n        \"\"\"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 JSON.\"\"\"\n        if not isinstance(self.args, str):\n            self.args = json.dumps(self.args)\n        if not isinstance(self.kwargs, str):\n            self.kwargs = json.dumps(self.kwargs)\n</code></pre>"},{"location":"ru/api/schemas/task_status/#qtasks.schemas.task_status.BaseTaskStatusSchema.__post_init__","title":"<code>__post_init__()</code>","text":"<p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 JSON.</p> Source code in <code>src/qtasks/schemas/task_status.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 JSON.\"\"\"\n    if not isinstance(self.args, str):\n        self.args = json.dumps(self.args)\n    if not isinstance(self.kwargs, str):\n        self.kwargs = json.dumps(self.kwargs)\n</code></pre>"},{"location":"ru/api/schemas/task_status/#qtasks.schemas.task_status.TaskStatusCancelSchema","title":"<code>TaskStatusCancelSchema</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseTaskStatusSchema</code></p> <p><code>TaskStatusCancelSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>\u0421\u0442\u0430\u0442\u0443\u0441.</p> <code>CANCEL.value</code> <code>cancel_reason</code> <code>str</code> <p>\u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.</p> <code>''</code> Source code in <code>src/qtasks/schemas/task_status.py</code> <pre><code>@dataclass\nclass TaskStatusCancelSchema(BaseTaskStatusSchema):\n    \"\"\"`TaskStatusCancelSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        status (str): \u0421\u0442\u0430\u0442\u0443\u0441.\n        cancel_reason (str): \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n\n    status: str = TaskStatusEnum.CANCEL.value\n    cancel_reason: str = \"\"\n</code></pre>"},{"location":"ru/api/schemas/task_status/#qtasks.schemas.task_status.TaskStatusErrorSchema","title":"<code>TaskStatusErrorSchema</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseTaskStatusSchema</code></p> <p><code>TaskStatusErrorSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>\u0421\u0442\u0430\u0442\u0443\u0441.</p> <code>ERROR.value</code> <code>traceback</code> <code>str</code> <p>\u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a.</p> <code>''</code> Source code in <code>src/qtasks/schemas/task_status.py</code> <pre><code>@dataclass\nclass TaskStatusErrorSchema(BaseTaskStatusSchema):\n    \"\"\"`TaskStatusErrorSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        status (str): \u0421\u0442\u0430\u0442\u0443\u0441.\n        traceback (str): \u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a.\n    \"\"\"\n\n    status: str = TaskStatusEnum.ERROR.value\n    traceback: str = \"\"\n</code></pre>"},{"location":"ru/api/schemas/task_status/#qtasks.schemas.task_status.TaskStatusNewSchema","title":"<code>TaskStatusNewSchema</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseTaskStatusSchema</code></p> <p><code>TaskStatusNewSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>\u0421\u0442\u0430\u0442\u0443\u0441.</p> <code>NEW.value</code> Source code in <code>src/qtasks/schemas/task_status.py</code> <pre><code>@dataclass\nclass TaskStatusNewSchema(BaseTaskStatusSchema):\n    \"\"\"`TaskStatusNewSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        status (str): \u0421\u0442\u0430\u0442\u0443\u0441.\n    \"\"\"\n\n    status: str = TaskStatusEnum.NEW.value\n</code></pre>"},{"location":"ru/api/schemas/task_status/#qtasks.schemas.task_status.TaskStatusProcessSchema","title":"<code>TaskStatusProcessSchema</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseTaskStatusSchema</code></p> <p><code>TaskStatusProcessSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>\u0421\u0442\u0430\u0442\u0443\u0441.</p> <code>PROCESS.value</code> Source code in <code>src/qtasks/schemas/task_status.py</code> <pre><code>@dataclass\nclass TaskStatusProcessSchema(BaseTaskStatusSchema):\n    \"\"\"`TaskStatusProcessSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        status (str): \u0421\u0442\u0430\u0442\u0443\u0441.\n    \"\"\"\n\n    status: str = TaskStatusEnum.PROCESS.value\n</code></pre>"},{"location":"ru/api/schemas/task_status/#qtasks.schemas.task_status.TaskStatusSuccessSchema","title":"<code>TaskStatusSuccessSchema</code>  <code>dataclass</code>","text":"<p>               Bases: <code>BaseTaskStatusSchema</code></p> <p><code>TaskStatusSuccessSchema</code> \u0441\u0445\u0435\u043c\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>str</code> <p>\u0421\u0442\u0430\u0442\u0443\u0441.</p> <code>SUCCESS.value</code> <code>returning</code> <code>str</code> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p> <code>''</code> Source code in <code>src/qtasks/schemas/task_status.py</code> <pre><code>@dataclass\nclass TaskStatusSuccessSchema(BaseTaskStatusSchema):\n    \"\"\"`TaskStatusSuccessSchema` \u0441\u0445\u0435\u043c\u0430.\n\n    Args:\n        status (str): \u0421\u0442\u0430\u0442\u0443\u0441.\n        returning (str): \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n    \"\"\"\n\n    status: str = TaskStatusEnum.SUCCESS.value\n    returning: str = \"\"\n</code></pre>"},{"location":"ru/api/schemas/task_status_enum/","title":"TaskStatusEnums","text":"<p>Task status enums.</p>"},{"location":"ru/api/schemas/task_status_enum/#qtasks.enums.task_status.TaskStatusEnum","title":"<code>TaskStatusEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p><code>TaskStatusEnum</code> - \u0421\u0442\u0430\u0442\u0443\u0441\u044b \u0437\u0430\u0434\u0430\u0447.</p> Source code in <code>src/qtasks/enums/task_status.py</code> <pre><code>class TaskStatusEnum(Enum):\n    \"\"\"`TaskStatusEnum` - \u0421\u0442\u0430\u0442\u0443\u0441\u044b \u0437\u0430\u0434\u0430\u0447.\"\"\"\n\n    NEW = \"new\"\n    \"\"\"\u041d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430\"\"\"\n    PROCESS = \"process\"\n    \"\"\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435\"\"\"\n    SUCCESS = \"success\"\n    \"\"\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430\"\"\"\n    ERROR = \"error\"\n    \"\"\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439\"\"\"\n    CANCEL = \"cancel\"\n    \"\"\"\u0417\u0430\u0434\u0430\u0447\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430\"\"\"\n</code></pre>"},{"location":"ru/api/schemas/task_status_enum/#qtasks.enums.task_status.TaskStatusEnum.CANCEL","title":"<code>CANCEL = 'cancel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430</p>"},{"location":"ru/api/schemas/task_status_enum/#qtasks.enums.task_status.TaskStatusEnum.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439</p>"},{"location":"ru/api/schemas/task_status_enum/#qtasks.enums.task_status.TaskStatusEnum.NEW","title":"<code>NEW = 'new'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>\u041d\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430</p>"},{"location":"ru/api/schemas/task_status_enum/#qtasks.enums.task_status.TaskStatusEnum.PROCESS","title":"<code>PROCESS = 'process'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435</p>"},{"location":"ru/api/schemas/task_status_enum/#qtasks.enums.task_status.TaskStatusEnum.SUCCESS","title":"<code>SUCCESS = 'success'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430</p>"},{"location":"ru/api/schemas/test_config/","title":"TestConfig","text":"<p>Test Schema.</p>"},{"location":"ru/api/schemas/test_config/#qtasks.schemas.test.TestConfig","title":"<code>TestConfig</code>  <code>dataclass</code>","text":"<p>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.</p> <p>Attributes:</p> Name Type Description <code>worker</code> <code>bool</code> <p>\u0412\u043e\u0440\u043a\u0435\u0440.</p> <code>broker</code> <code>bool</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440.</p> <code>storage</code> <code>bool</code> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> <code>global_config</code> <code>bool</code> <p>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.</p> <code>plugins</code> <code>bool</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d\u044b.</p> Source code in <code>src/qtasks/schemas/test.py</code> <pre><code>@dataclass\nclass TestConfig:\n    \"\"\"\n    \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447.\n\n    Attributes:\n        worker (bool): \u0412\u043e\u0440\u043a\u0435\u0440.\n        broker (bool): \u0411\u0440\u043e\u043a\u0435\u0440.\n        storage (bool): \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n        global_config (bool): \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.\n        plugins (bool): \u041f\u043b\u0430\u0433\u0438\u043d\u044b.\n\n    \"\"\"\n\n    __test__ = False\n\n    worker: bool = False\n    broker: bool = False\n    storage: bool = False\n    global_config: bool = False\n    plugins: bool = False\n\n    @classmethod\n    def full(cls):\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n        return cls(\n            worker=True, broker=True, storage=True, global_config=True, plugins=True\n        )\n\n    @classmethod\n    def only_worker(cls, plugins: bool = False):\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\"\"\"\n        return cls(worker=True, plugins=plugins)\n\n    @classmethod\n    def only_broker(cls, plugins: bool = False):\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\"\"\"\n        return cls(broker=True, plugins=plugins)\n\n    @classmethod\n    def full_broker(cls):\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\"\"\"\n        return cls(broker=True, storage=True, global_config=True, plugins=True)\n</code></pre>"},{"location":"ru/api/schemas/test_config/#qtasks.schemas.test.TestConfig.full","title":"<code>full()</code>  <code>classmethod</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/schemas/test.py</code> <pre><code>@classmethod\ndef full(cls):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n    return cls(\n        worker=True, broker=True, storage=True, global_config=True, plugins=True\n    )\n</code></pre>"},{"location":"ru/api/schemas/test_config/#qtasks.schemas.test.TestConfig.full_broker","title":"<code>full_broker()</code>  <code>classmethod</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> Source code in <code>src/qtasks/schemas/test.py</code> <pre><code>@classmethod\ndef full_broker(cls):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\"\"\"\n    return cls(broker=True, storage=True, global_config=True, plugins=True)\n</code></pre>"},{"location":"ru/api/schemas/test_config/#qtasks.schemas.test.TestConfig.only_broker","title":"<code>only_broker(plugins=False)</code>  <code>classmethod</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> Source code in <code>src/qtasks/schemas/test.py</code> <pre><code>@classmethod\ndef only_broker(cls, plugins: bool = False):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\"\"\"\n    return cls(broker=True, plugins=plugins)\n</code></pre>"},{"location":"ru/api/schemas/test_config/#qtasks.schemas.test.TestConfig.only_worker","title":"<code>only_worker(plugins=False)</code>  <code>classmethod</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> Source code in <code>src/qtasks/schemas/test.py</code> <pre><code>@classmethod\ndef only_worker(cls, plugins: bool = False):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\"\"\"\n    return cls(worker=True, plugins=plugins)\n</code></pre>"},{"location":"ru/api/starters/async_starter/","title":"AsyncStarter","text":"<p>Async Starter.</p>"},{"location":"ru/api/starters/async_starter/#qtasks.starters.async_starter.AsyncStarter","title":"<code>AsyncStarter</code>","text":"<p>               Bases: <code>BaseStarter</code>, <code>AsyncPluginMixin</code></p> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p>"},{"location":"ru/api/starters/async_starter/#qtasks.starters.async_starter.AsyncStarter--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import AsyncRedisBroker\nfrom qtasks.workers import AsyncWorker\nfrom qtasks.starters import AsyncStarter\n\nbroker = AsyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\nworker = AsyncWorker(name=\"QueueTasks\", broker=broker)\n\napp = QueueTasks(worker=worker, broker=broker)\n\nstarter = AsyncStarter(name=\"QueueTasks\", worker=worker, broker=broker)\napp.run_forever(starter=starter)\n</code></pre> Source code in <code>src/qtasks/starters/async_starter.py</code> <pre><code>class AsyncStarter(BaseStarter, AsyncPluginMixin):\n    \"\"\"\n    \u0421\u0442\u0430\u0440\u0442\u0435\u0440, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import AsyncRedisBroker\n    from qtasks.workers import AsyncWorker\n    from qtasks.starters import AsyncStarter\n\n    broker = AsyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n    worker = AsyncWorker(name=\"QueueTasks\", broker=broker)\n\n    app = QueueTasks(worker=worker, broker=broker)\n\n    starter = AsyncStarter(name=\"QueueTasks\", worker=worker, broker=broker)\n    app.run_forever(starter=starter)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        worker: Annotated[\n            Optional[\"BaseWorker\"],\n            Doc(\n                \"\"\"\n                    \u0412\u043e\u0440\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(\n            name=name, broker=broker, worker=worker, log=log, config=config, events=events\n        )\n        self.events = self.events or AsyncEvents()\n\n        self._global_loop: Union[asyncio.AbstractEventLoop, None] = None\n        self._started_plugins: set[int] = set()\n\n    def start(\n        self,\n        loop: Annotated[\n            Optional[asyncio.AbstractEventLoop],\n            Doc(\n                \"\"\"\n                    \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n        plugins: Annotated[\n            Optional[Dict[str, \"BasePlugin\"]],\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d\u044b \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n        Args:\n            loop (asyncio.AbstractEventLoop, optional): \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n            plugins (Dict[str, BasePlugin] | None, optional): \u041f\u043b\u0430\u0433\u0438\u043d\u044b. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        \"\"\"\n        self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a QueueTasks...\")\n\n        if plugins:\n            self.plugins.update(plugins)\n\n        if reset_config:\n            self.update_configs(self.config)\n\n        if loop:\n            self._global_loop = loop\n        else:\n            try:\n                self._global_loop = asyncio.new_event_loop()\n                asyncio.set_event_loop(self._global_loop)\n            except RuntimeError:\n                self._global_loop = asyncio.get_event_loop()\n\n        try:\n            self._global_loop.run_until_complete(self._start(num_workers))\n        except KeyboardInterrupt:\n            self._global_loop.run_until_complete(self.stop())\n\n    async def _start(self, num_workers=4):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n        Args:\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        \"\"\"\n        await self._plugin_trigger(\"starter_start\", starter=self)\n        for plugin in [i for y in self.plugins.values() for i in y]:\n            if plugin not in self._started_plugins:\n                self._started_plugins.add(plugin)\n                await plugin.start()\n\n        await self.events.fire(\"starting\", starter=self, worker=self.worker, broker=self.broker)\n\n        worker_task = asyncio.create_task(self.worker.start(num_workers))\n        broker_task = asyncio.create_task(self.broker.start(self.worker))\n\n        with contextlib.suppress(asyncio.CancelledError):\n            await asyncio.gather(broker_task, worker_task)\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n        self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 QueueTasks...\")\n        await self._plugin_trigger(\"starter_stop\", starter=self)\n\n        if self.broker:\n            await self.broker.stop()\n        if self.worker:\n            await self.worker.stop()\n        if self.broker.storage:\n            await self.broker.storage.stop()\n        if self.broker.storage.global_config:\n            await self.broker.storage.global_config.stop()\n\n        if self._global_loop and self._global_loop.is_running():\n            self._global_loop.stop()\n\n        await self.events.fire(\"stopping\", starter=self, worker=self.worker, broker=self.broker)\n\n        for model_plugin in [i for y in self.plugins.values() for i in y]:\n            await model_plugin.stop()\n\n        for plugin in self._started_plugins:\n            await plugin.stop()\n        self._started_plugins.clear()\n</code></pre>"},{"location":"ru/api/starters/async_starter/#qtasks.starters.async_starter.AsyncStarter.__init__","title":"<code>__init__(name=None, broker=None, worker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>broker</code> <code>BaseBroker</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>worker</code> <code>BaseWorker</code> <p>\u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/starters/async_starter.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    worker: Annotated[\n        Optional[\"BaseWorker\"],\n        Doc(\n            \"\"\"\n                \u0412\u043e\u0440\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(\n        name=name, broker=broker, worker=worker, log=log, config=config, events=events\n    )\n    self.events = self.events or AsyncEvents()\n\n    self._global_loop: Union[asyncio.AbstractEventLoop, None] = None\n    self._started_plugins: set[int] = set()\n</code></pre>"},{"location":"ru/api/starters/async_starter/#qtasks.starters.async_starter.AsyncStarter.start","title":"<code>start(loop=None, num_workers=4, reset_config=True, plugins=None)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 <code>run_forever</code>.</p> <p>Parameters:</p> Name Type Description Default <code>loop</code> <code>AbstractEventLoop</code> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> <code>plugins</code> <code>Dict[str, BasePlugin] | None</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d\u044b. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> Source code in <code>src/qtasks/starters/async_starter.py</code> <pre><code>def start(\n    self,\n    loop: Annotated[\n        Optional[asyncio.AbstractEventLoop],\n        Doc(\n            \"\"\"\n                \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n    plugins: Annotated[\n        Optional[Dict[str, \"BasePlugin\"]],\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d\u044b \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n    Args:\n        loop (asyncio.AbstractEventLoop, optional): \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        plugins (Dict[str, BasePlugin] | None, optional): \u041f\u043b\u0430\u0433\u0438\u043d\u044b. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n    \"\"\"\n    self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a QueueTasks...\")\n\n    if plugins:\n        self.plugins.update(plugins)\n\n    if reset_config:\n        self.update_configs(self.config)\n\n    if loop:\n        self._global_loop = loop\n    else:\n        try:\n            self._global_loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(self._global_loop)\n        except RuntimeError:\n            self._global_loop = asyncio.get_event_loop()\n\n    try:\n        self._global_loop.run_until_complete(self._start(num_workers))\n    except KeyboardInterrupt:\n        self._global_loop.run_until_complete(self.stop())\n</code></pre>"},{"location":"ru/api/starters/async_starter/#qtasks.starters.async_starter.AsyncStarter.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p> Source code in <code>src/qtasks/starters/async_starter.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n    self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 QueueTasks...\")\n    await self._plugin_trigger(\"starter_stop\", starter=self)\n\n    if self.broker:\n        await self.broker.stop()\n    if self.worker:\n        await self.worker.stop()\n    if self.broker.storage:\n        await self.broker.storage.stop()\n    if self.broker.storage.global_config:\n        await self.broker.storage.global_config.stop()\n\n    if self._global_loop and self._global_loop.is_running():\n        self._global_loop.stop()\n\n    await self.events.fire(\"stopping\", starter=self, worker=self.worker, broker=self.broker)\n\n    for model_plugin in [i for y in self.plugins.values() for i in y]:\n        await model_plugin.stop()\n\n    for plugin in self._started_plugins:\n        await plugin.stop()\n    self._started_plugins.clear()\n</code></pre>"},{"location":"ru/api/starters/basestarter/","title":"BaseStarter - \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0421\u0442\u0430\u0440\u0442\u0435\u0440","text":"<p>Base starter.</p>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter","title":"<code>BaseStarter</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseStarter</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.</p>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.starters.base import BaseStarter\n\nclass MyStarter(BaseStarter):\n    def __init__(self, name: str = None, broker = None, worker = None):\n        super().__init__(name=name, broker = None, worker = None)\n        pass\n</code></pre> Source code in <code>src/qtasks/starters/base.py</code> <pre><code>class BaseStarter(ABC):\n    \"\"\"\n    `BaseStarter` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.starters.base import BaseStarter\n\n    class MyStarter(BaseStarter):\n        def __init__(self, name: str = None, broker = None, worker = None):\n            super().__init__(name=name, broker = None, worker = None)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        worker: Annotated[\n            Optional[\"BaseWorker\"],\n            Doc(\n                \"\"\"\n                    \u0412\u043e\u0440\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self.name = name\n        self.config = config or QueueConfig()\n        self.log = (\n            log.with_subname(\"Starter\")\n            if log\n            else Logger(\n                name=self.name,\n                subname=\"Starter\",\n                default_level=self.config.logs_default_level_server,\n                format=self.config.logs_format,\n            )\n        )\n        self.events = events\n\n        self.broker = broker\n        self.worker = worker\n\n        self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n        self.init_plugins()\n\n    @abstractmethod\n    def start(self) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\"\"\"\n\n    @abstractmethod\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n        pass\n\n    def add_plugin(\n        self,\n        plugin: Annotated[\n            \"BasePlugin\",\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d.\n                    \"\"\"\n            ),\n        ],\n        trigger_names: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n        Args:\n            plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n            trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n        \"\"\"\n        trigger_names = trigger_names or [\"Globals\"]\n\n        for name in trigger_names:\n            if name not in self.plugins:\n                self.plugins.update({name: [plugin]})\n            else:\n                self.plugins[name].append(plugin)\n        return\n\n    def update_configs(\n        self,\n        config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n                    \"\"\"\n            ),\n        ],\n    ):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n        \"\"\"\n        self.log.debug(\"\u041a\u043e\u043d\u0444\u0438\u0433 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\")\n        if self.worker:\n            self.worker.update_config(config)\n        if self.broker:\n            self.broker.update_config(config)\n            if self.broker.storage:\n                self.broker.storage.update_config(config)\n                if self.broker.storage.global_config:\n                    self.broker.storage.global_config.update_config(config)\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        pass\n</code></pre>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter.__init__","title":"<code>__init__(name=None, broker=None, worker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>broker</code> <code>BaseBroker</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>worker</code> <code>BaseWorker</code> <p>\u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/starters/base.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    worker: Annotated[\n        Optional[\"BaseWorker\"],\n        Doc(\n            \"\"\"\n                \u0412\u043e\u0440\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self.name = name\n    self.config = config or QueueConfig()\n    self.log = (\n        log.with_subname(\"Starter\")\n        if log\n        else Logger(\n            name=self.name,\n            subname=\"Starter\",\n            default_level=self.config.logs_default_level_server,\n            format=self.config.logs_format,\n        )\n    )\n    self.events = events\n\n    self.broker = broker\n    self.worker = worker\n\n    self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n    self.init_plugins()\n</code></pre>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter.add_plugin","title":"<code>add_plugin(plugin, trigger_names=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>BasePlugin</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d</p> required <code>trigger_names</code> <code>List[str]</code> <p>\u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Globals</code>.</p> <code>None</code> Source code in <code>src/qtasks/starters/base.py</code> <pre><code>def add_plugin(\n    self,\n    plugin: Annotated[\n        \"BasePlugin\",\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d.\n                \"\"\"\n        ),\n    ],\n    trigger_names: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n    Args:\n        plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n        trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n    \"\"\"\n    trigger_names = trigger_names or [\"Globals\"]\n\n    for name in trigger_names:\n        if name not in self.plugins:\n            self.plugins.update({name: [plugin]})\n        else:\n            self.plugins[name].append(plugin)\n    return\n</code></pre>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/starters/base.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter.start","title":"<code>start()</code>  <code>abstractmethod</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 <code>run_forever</code>.</p> Source code in <code>src/qtasks/starters/base.py</code> <pre><code>@abstractmethod\ndef start(self) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\"\"\"\n</code></pre>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter.stop","title":"<code>stop()</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>run_forever</code>.</p> Source code in <code>src/qtasks/starters/base.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/starters/basestarter/#qtasks.starters.base.BaseStarter.update_configs","title":"<code>update_configs(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433.</p> required Source code in <code>src/qtasks/starters/base.py</code> <pre><code>def update_configs(\n    self,\n    config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n                \"\"\"\n        ),\n    ],\n):\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c.\n\n    Args:\n        config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n    \"\"\"\n    self.log.debug(\"\u041a\u043e\u043d\u0444\u0438\u0433 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\")\n    if self.worker:\n        self.worker.update_config(config)\n    if self.broker:\n        self.broker.update_config(config)\n        if self.broker.storage:\n            self.broker.storage.update_config(config)\n            if self.broker.storage.global_config:\n                self.broker.storage.global_config.update_config(config)\n</code></pre>"},{"location":"ru/api/starters/sync_starter/","title":"SyncStarter","text":"<p>Sync Starter.</p>"},{"location":"ru/api/starters/sync_starter/#qtasks.starters.sync_starter.SyncStarter","title":"<code>SyncStarter</code>","text":"<p>               Bases: <code>BaseStarter</code>, <code>SyncPluginMixin</code></p> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p>"},{"location":"ru/api/starters/sync_starter/#qtasks.starters.sync_starter.SyncStarter--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import SyncRedisBroker\nfrom qtasks.workers import SyncWorker\nfrom qtasks.starters import SyncStarter\n\nbroker = SyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\nworker = SyncWorker(name=\"QueueTasks\", broker=broker)\n\napp = QueueTasks(worker=worker, broker=broker)\n\nstarter = SyncStarter(name=\"QueueTasks\", worker=worker, broker=broker)\napp.run_forever(starter=starter)\n</code></pre> Source code in <code>src/qtasks/starters/sync_starter.py</code> <pre><code>class SyncStarter(BaseStarter, SyncPluginMixin):\n    \"\"\"\n    \u0421\u0442\u0430\u0440\u0442\u0435\u0440, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import SyncRedisBroker\n    from qtasks.workers import SyncWorker\n    from qtasks.starters import SyncStarter\n\n    broker = SyncRedisBroker(name=\"QueueTasks\", url=\"redis://localhost:6379/2\")\n    worker = SyncWorker(name=\"QueueTasks\", broker=broker)\n\n    app = QueueTasks(worker=worker, broker=broker)\n\n    starter = SyncStarter(name=\"QueueTasks\", worker=worker, broker=broker)\n    app.run_forever(starter=starter)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        worker: Annotated[\n            Optional[\"BaseWorker\"],\n            Doc(\n                \"\"\"\n                    \u0412\u043e\u0440\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(\n            name=name, broker=broker, worker=worker, log=log, config=config, events=events\n        )\n        self.events = self.events or SyncEvents()\n\n        self._started_plugins: set[int] = set()\n\n    def start(\n        self,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n        plugins: Annotated[\n            Optional[Dict[str, \"BasePlugin\"]],\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d\u044b \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n        Args:\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n            plugins (Dict[str, BasePlugin] | None, optional): \u041f\u043b\u0430\u0433\u0438\u043d\u044b. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        \"\"\"\n        self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a QueueTasks...\")\n\n        if plugins:\n            self.plugins.update(plugins)\n\n        if reset_config:\n            self.update_configs(self.config)\n\n        try:\n            self._start(num_workers=num_workers)\n        except KeyboardInterrupt:\n            self.stop()\n\n    def _start(self, num_workers=4):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n        Args:\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        \"\"\"\n        self._plugin_trigger(\"starter_start\", starter=self)\n        for plugin in [i for y in self.plugins.values() for i in y]:\n            if plugin not in self._started_plugins:\n                self._started_plugins.add(plugin)\n                plugin.start()\n\n        self.events.fire(\"starting\", starter=self, worker=self.worker, broker=self.broker)\n\n        self.worker.start(num_workers)\n        self.broker.start(self.worker)\n\n        try:\n            while True:\n                pass  # \u0411\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\n        except KeyboardInterrupt:\n            self.stop()\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n        self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 QueueTasks...\")\n        self._plugin_trigger(\"starter_stop\", starter=self)\n\n        if self.broker:\n            self.broker.stop()\n        if self.worker:\n            self.worker.stop()\n        if self.broker.storage:\n            self.broker.storage.stop()\n        if self.broker.storage.global_config:\n            self.broker.storage.global_config.stop()\n\n        self.events.fire(\"stopping\", starter=self, worker=self.worker, broker=self.broker)\n\n        for model_plugin in [i for y in self.plugins.values() for i in y]:\n            model_plugin.stop()\n\n        for plugin in self._started_plugins:\n            plugin.stop()\n        self._started_plugins.clear()\n</code></pre>"},{"location":"ru/api/starters/sync_starter/#qtasks.starters.sync_starter.SyncStarter.__init__","title":"<code>__init__(name=None, broker=None, worker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>broker</code> <code>BaseBroker</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>worker</code> <code>BaseWorker</code> <p>\u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/starters/sync_starter.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    worker: Annotated[\n        Optional[\"BaseWorker\"],\n        Doc(\n            \"\"\"\n                \u0412\u043e\u0440\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        worker (BaseWorker, optional): \u0412\u043e\u0440\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(\n        name=name, broker=broker, worker=worker, log=log, config=config, events=events\n    )\n    self.events = self.events or SyncEvents()\n\n    self._started_plugins: set[int] = set()\n</code></pre>"},{"location":"ru/api/starters/sync_starter/#qtasks.starters.sync_starter.SyncStarter.start","title":"<code>start(num_workers=4, reset_config=True, plugins=None)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 <code>run_forever</code>.</p> <p>Parameters:</p> Name Type Description Default <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> <code>plugins</code> <code>Dict[str, BasePlugin] | None</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d\u044b. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> Source code in <code>src/qtasks/starters/sync_starter.py</code> <pre><code>def start(\n    self,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n    plugins: Annotated[\n        Optional[Dict[str, \"BasePlugin\"]],\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d\u044b \u0434\u043b\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0421\u0442\u0430\u0440\u0442\u0435\u0440\u0430. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n    Args:\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        plugins (Dict[str, BasePlugin] | None, optional): \u041f\u043b\u0430\u0433\u0438\u043d\u044b. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n    \"\"\"\n    self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a QueueTasks...\")\n\n    if plugins:\n        self.plugins.update(plugins)\n\n    if reset_config:\n        self.update_configs(self.config)\n\n    try:\n        self._start(num_workers=num_workers)\n    except KeyboardInterrupt:\n        self.stop()\n</code></pre>"},{"location":"ru/api/starters/sync_starter/#qtasks.starters.sync_starter.SyncStarter.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p> Source code in <code>src/qtasks/starters/sync_starter.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.\"\"\"\n    self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 QueueTasks...\")\n    self._plugin_trigger(\"starter_stop\", starter=self)\n\n    if self.broker:\n        self.broker.stop()\n    if self.worker:\n        self.worker.stop()\n    if self.broker.storage:\n        self.broker.storage.stop()\n    if self.broker.storage.global_config:\n        self.broker.storage.global_config.stop()\n\n    self.events.fire(\"stopping\", starter=self, worker=self.worker, broker=self.broker)\n\n    for model_plugin in [i for y in self.plugins.values() for i in y]:\n        model_plugin.stop()\n\n    for plugin in self._started_plugins:\n        plugin.stop()\n    self._started_plugins.clear()\n</code></pre>"},{"location":"ru/api/stats/async_stats/","title":"AsyncStats","text":"<p>Async Stats.</p>"},{"location":"ru/api/stats/async_stats/#qtasks.stats.async_stats.AsyncStats","title":"<code>AsyncStats</code>","text":"<p>               Bases: <code>BaseStats</code></p> <p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a.</p> Source code in <code>src/qtasks/stats/async_stats.py</code> <pre><code>class AsyncStats(BaseStats):\n    \"\"\"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a.\"\"\"\n\n    def __init__(\n        self,\n        app: \"QueueTasks\"\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n        Args:\n            app (QueueTasks): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n        \"\"\"\n        super().__init__(app=app)\n\n    def inspect(self):\n        \"\"\"\u0418\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n        Returns:\n            AsyncStatsSchema: \u0421\u0445\u0435\u043c\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n        \"\"\"\n        return InspectStats(self.app)\n</code></pre>"},{"location":"ru/api/stats/async_stats/#qtasks.stats.async_stats.AsyncStats.__init__","title":"<code>__init__(app)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> required Source code in <code>src/qtasks/stats/async_stats.py</code> <pre><code>def __init__(\n    self,\n    app: \"QueueTasks\"\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n    Args:\n        app (QueueTasks): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n    \"\"\"\n    super().__init__(app=app)\n</code></pre>"},{"location":"ru/api/stats/async_stats/#qtasks.stats.async_stats.AsyncStats.inspect","title":"<code>inspect()</code>","text":"<p>\u0418\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> <p>Returns:</p> Name Type Description <code>AsyncStatsSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> Source code in <code>src/qtasks/stats/async_stats.py</code> <pre><code>def inspect(self):\n    \"\"\"\u0418\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n    Returns:\n        AsyncStatsSchema: \u0421\u0445\u0435\u043c\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n    \"\"\"\n    return InspectStats(self.app)\n</code></pre>"},{"location":"ru/api/stats/basestats/","title":"BaseStats - \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u044e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443","text":"<p>Base Stats.</p>"},{"location":"ru/api/stats/basestats/#qtasks.stats.base.BaseStats","title":"<code>BaseStats</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a.</p> Source code in <code>src/qtasks/stats/base.py</code> <pre><code>class BaseStats(ABC):\n    \"\"\"Base \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a.\"\"\"\n\n    def __init__(\n        self,\n        app: \"QueueTasks\"\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\"\"\"\n        self.app = app\n</code></pre>"},{"location":"ru/api/stats/basestats/#qtasks.stats.base.BaseStats.__init__","title":"<code>__init__(app)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> Source code in <code>src/qtasks/stats/base.py</code> <pre><code>def __init__(\n    self,\n    app: \"QueueTasks\"\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\"\"\"\n    self.app = app\n</code></pre>"},{"location":"ru/api/stats/sync_stats/","title":"SyncStats","text":"<p>Sync Stats.</p>"},{"location":"ru/api/stats/sync_stats/#qtasks.stats.sync_stats.SyncStats","title":"<code>SyncStats</code>","text":"<p>               Bases: <code>BaseStats</code></p> <p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a.</p> Source code in <code>src/qtasks/stats/sync_stats.py</code> <pre><code>class SyncStats(BaseStats):\n    \"\"\"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a.\"\"\"\n\n    def __init__(\n        self,\n        app: \"QueueTasks\"\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n        Args:\n            app (QueueTasks): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n        \"\"\"\n        super().__init__(app=app)\n\n    def inspect(self):\n        \"\"\"\u0418\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n        Returns:\n            AsyncStatsSchema: \u0421\u0445\u0435\u043c\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n        \"\"\"\n        return InspectStats(self.app)\n</code></pre>"},{"location":"ru/api/stats/sync_stats/#qtasks.stats.sync_stats.SyncStats.__init__","title":"<code>__init__(app)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> required Source code in <code>src/qtasks/stats/sync_stats.py</code> <pre><code>def __init__(\n    self,\n    app: \"QueueTasks\"\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n    Args:\n        app (QueueTasks): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n    \"\"\"\n    super().__init__(app=app)\n</code></pre>"},{"location":"ru/api/stats/sync_stats/#qtasks.stats.sync_stats.SyncStats.inspect","title":"<code>inspect()</code>","text":"<p>\u0418\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> <p>Returns:</p> Name Type Description <code>AsyncStatsSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> Source code in <code>src/qtasks/stats/sync_stats.py</code> <pre><code>def inspect(self):\n    \"\"\"\u0418\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n    Returns:\n        AsyncStatsSchema: \u0421\u0445\u0435\u043c\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n    \"\"\"\n    return InspectStats(self.app)\n</code></pre>"},{"location":"ru/api/stats/inspect/inspect_stats/","title":"InspectStats","text":"<p>InspectStats.</p>"},{"location":"ru/api/stats/inspect/inspect_stats/#qtasks.stats.inspect.inspect.InspectStats","title":"<code>InspectStats</code>","text":"<p>               Bases: <code>UtilsInspectStats</code></p> <p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> Source code in <code>src/qtasks/stats/inspect/inspect.py</code> <pre><code>class InspectStats(UtilsInspectStats):\n    \"\"\"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\"\"\"\n\n    def __init__(\n        self,\n        app: \"QueueTasks\"\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n        Args:\n            app (QueueTasks): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n        \"\"\"\n        self._app = app\n\n    def app(self, json: bool = False):\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n\n        Args:\n            json (bool, optional): \u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n\n        Returns:\n            str: \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n        \"\"\"\n        return self._app_parser(self._app, json=json)\n\n    def task(self, task_name: str, json: bool = False):\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            json (bool, optional): \u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n\n        Returns:\n            TaskExecSchema: \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if json:\n            return self._parser_json(self._app.tasks[task_name])\n        return self._tasks_parser((self._app.tasks[task_name], ))\n\n    def tasks(self, *tasks: Tuple[str], json: bool = False):\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445.\n\n        Returns:\n            List[TaskExecSchema]: \u0421\u0445\u0435\u043c\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n            json (bool, optional): \u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n        \"\"\"\n        if not tasks:\n            result = self._app.tasks.values()\n        else:\n            result = [self._app.tasks[task] for task in tasks if task in self._app.tasks]\n\n        if json:\n            return self._parser_json(result)\n\n        return self._tasks_parser(result)\n</code></pre>"},{"location":"ru/api/stats/inspect/inspect_stats/#qtasks.stats.inspect.inspect.InspectStats.__init__","title":"<code>__init__(app)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> required Source code in <code>src/qtasks/stats/inspect/inspect.py</code> <pre><code>def __init__(\n    self,\n    app: \"QueueTasks\"\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\n\n    Args:\n        app (QueueTasks): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n    \"\"\"\n    self._app = app\n</code></pre>"},{"location":"ru/api/stats/inspect/inspect_stats/#qtasks.stats.inspect.inspect.InspectStats.app","title":"<code>app(json=False)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>json</code> <code>bool</code> <p>\u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p> Source code in <code>src/qtasks/stats/inspect/inspect.py</code> <pre><code>def app(self, json: bool = False):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n\n    Args:\n        json (bool, optional): \u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n\n    Returns:\n        str: \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n    \"\"\"\n    return self._app_parser(self._app, json=json)\n</code></pre>"},{"location":"ru/api/stats/inspect/inspect_stats/#qtasks.stats.inspect.inspect.InspectStats.task","title":"<code>task(task_name, json=False)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>json</code> <code>bool</code> <p>\u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>TaskExecSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.</p> Source code in <code>src/qtasks/stats/inspect/inspect.py</code> <pre><code>def task(self, task_name: str, json: bool = False):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        json (bool, optional): \u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n\n    Returns:\n        TaskExecSchema: \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if json:\n        return self._parser_json(self._app.tasks[task_name])\n    return self._tasks_parser((self._app.tasks[task_name], ))\n</code></pre>"},{"location":"ru/api/stats/inspect/inspect_stats/#qtasks.stats.inspect.inspect.InspectStats.tasks","title":"<code>tasks(*tasks, json=False)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p> <p>Returns:</p> Name Type Description <p>List[TaskExecSchema]: \u0421\u0445\u0435\u043c\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.</p> <code>json</code> <code>(bool, optional)</code> <p>\u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>False</code>.</p> Source code in <code>src/qtasks/stats/inspect/inspect.py</code> <pre><code>def tasks(self, *tasks: Tuple[str], json: bool = False):\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445.\n\n    Returns:\n        List[TaskExecSchema]: \u0421\u0445\u0435\u043c\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.\n        json (bool, optional): \u0424\u043b\u0430\u0433 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `False`.\n    \"\"\"\n    if not tasks:\n        result = self._app.tasks.values()\n    else:\n        result = [self._app.tasks[task] for task in tasks if task in self._app.tasks]\n\n    if json:\n        return self._parser_json(result)\n\n    return self._tasks_parser(result)\n</code></pre>"},{"location":"ru/api/stats/inspect/utils_inspect_stats/","title":"UtilsInspectStats","text":"<p>BaseInspectStats.</p>"},{"location":"ru/api/stats/inspect/utils_inspect_stats/#qtasks.stats.inspect.base.UtilsInspectStats","title":"<code>UtilsInspectStats</code>","text":"<p>\u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.</p> Source code in <code>src/qtasks/stats/inspect/base.py</code> <pre><code>class UtilsInspectStats:\n    \"\"\"\u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.\"\"\"\n\n    label_width = 26\n\n    def _app_parser(self, app: \"QueueTasks\", json: bool = False):\n        \"\"\"\u041f\u0430\u0440\u0441\u0435\u0440 \u0434\u043b\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n\n        Args:\n            app (QueueTasks): \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n        Returns:\n            str: \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.\n        \"\"\"\n        lines = []\n        plugins_sum = (\n            len(app.plugins)\n            + len(app.broker.plugins)\n            + len(app.worker.plugins)\n            + (len(app.starter.plugins) if app.starter else 0)\n            + (len(app.broker.storage.plugins) if app.broker.storage else 0)\n            + (len(app.broker.storage.global_config.plugins) if app.broker.storage.global_config else 0)\n        )\n        task_info = {\n            \"\u0418\u043c\u044f\": app.name,\n            \"\u041c\u0435\u0442\u043e\u0434\": app._method,\n            \"\u0412\u0435\u0440\u0441\u0438\u044f\": app.version,\n            \"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\": str(app.config),\n            \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u0447\": len(app.tasks),\n            \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432\": len(app.routers),\n            \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432\": plugins_sum,\n            \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439\": sum(len(inits) for inits in app.events.on._events.values()),\n            \"\u0411\u0440\u043e\u043a\u0435\u0440\": app.broker.__class__.__name__,\n            \"\u0412\u043e\u0440\u043a\u0435\u0440\": app.worker.__class__.__name__,\n            \"\u0421\u0442\u0430\u0440\u0442\u0435\u0440\": app.starter.__class__.__name__ if app.starter else \"\u2014\",\n            \"\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\": app.broker.storage.__class__.__name__,\n            \"GlobalConfig\": app.broker.storage.global_config.__class__.__name__ if app.broker.storage.global_config else \"\u2014\",\n            \"\u041b\u043e\u0433\": app.log.__class__.__name__,\n        }\n\n        if json:\n            return self._parser_json(task_info)\n\n        # \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c\n        task_block = \"\\n\".join(\n            f\"{label:&lt;{self.label_width}}: {value}\" for label, value in task_info.items()\n        )\n        lines.append(task_block)\n        lines.append(\"-\" * 50)\n        return \"\\n\".join(lines)\n\n    def _parser_json(self, data: Union[Any, Tuple[Any]]) -&gt; str:\n        def formatter(d):\n            if is_dataclass(d):\n                return asdict(d)\n            return d\n        data = [formatter(d) for d in data] if isinstance(data, (tuple, list, ValuesView)) else formatter(data)\n        return json.dumps(data, ensure_ascii=False, indent=2, default=str)\n\n    def _tasks_parser(self, tasks: Tuple[TaskExecSchema]) -&gt; str:\n        \"\"\"\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.\"\"\"\n        lines = []\n\n        for task in tasks:\n            args, kwargs = self._task_get_args_kwargs(task.func)\n\n            task_info = {\n                \"\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438\": task.name,\n                \"\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\": task.priority,\n                \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\": task.description or \"\u2014\",\n                \"\u0422\u0435\u0433\u0438\": ', '.join(task.tags) if task.tags else \"\u2014\",\n                \"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c\": task.awaiting,\n                \"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f\": task.generating,\n                \"Self \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439\": task.echo,\n                \"Args\": ', '.join(args) if args else \"\u2014\",\n                \"Kwargs\": ', '.join(f\"{k}={v}\" for k, v in kwargs.items()) if kwargs else \"\u2014\",\n            }\n\n            if task.retry is not None:\n                task_info[\"\u041f\u043e\u0432\u0442\u043e\u0440\u043e\u0432\"] = task.retry\n            if task.retry_on_exc:\n                task_info[\"\u0418\u0441\u043a\u043b. \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432\"] = pformat(task.retry_on_exc)\n            if task.decode:\n                task_info[\"\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\"] = str(task.decode)\n            if task.generate_handler:\n                task_info[\"\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\"] = str(task.generate_handler)\n            if task.executor:\n                task_info[\"\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\"] = str(task.executor)\n            if task.middlewares_before:\n                task_info[\"\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u0434\u043e\"] = pformat(task.middlewares_before)\n            if task.middlewares_after:\n                task_info[\"\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043f\u043e\u0441\u043b\u0435\"] = pformat(task.middlewares_after)\n            if task.extra:\n                # \u0412\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441 \u043e\u0442\u0441\u0442\u0443\u043f\u043e\u043c\n                extra_lines = \"\\n\" + \"\\n\".join(f\" * {k}: {v}\" for k, v in task.extra.items())\n                task_info[\"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\"] = extra_lines\n\n            # \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c\n            task_block = \"\\n\".join(\n                f\"{label:&lt;{self.label_width}}: {value}\" for label, value in task_info.items()\n            )\n\n            lines.append(task_block)\n            lines.append(\"-\" * 50)\n\n        return \"\\n\".join(lines) or \"\u041d\u0435\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.\"\n\n    def _task_get_args_kwargs(self, func):\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            func (Callable): \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            tuple: \u041f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b.\n        \"\"\"\n        sig = signature(func)\n        positional_args = []\n        keyword_args = {}\n\n        for name, param in sig.parameters.items():\n            annotation = param.annotation if param.annotation is not _empty else None\n\n            type_str = f\": {annotation.__name__}\" if isinstance(annotation, type) else f\": {annotation}\" if annotation else \"\"\n\n            if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n                if param.default is param.empty:\n                    positional_args.append(f\"{name}{type_str}\")\n                else:\n                    keyword_args[f\"{name}{type_str}\"] = param.default\n            elif param.kind == param.KEYWORD_ONLY:\n                type_str = type_str or \"\"\n                keyword_args[f\"{name}{type_str}\"] = param.default if param.default is not param.empty else \"required\"\n            elif param.kind == param.VAR_POSITIONAL:\n                positional_args.append(f\"*{name}\")\n            elif param.kind == param.VAR_KEYWORD:\n                keyword_args[f\"**{name}\"] = \"...\"\n\n        return positional_args, keyword_args\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/","title":"AsyncRedisStorage","text":"<p>Async Redis storage.</p>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage","title":"<code>AsyncRedisStorage</code>","text":"<p>               Bases: <code>BaseStorage</code>, <code>AsyncPluginMixin</code></p> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0441 Redis, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage--example","title":"Example","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import AsyncRedisBroker\nfrom qtasks.storages import AsyncRedisStorage\n\nstorage = AsyncRedisStorage(name=\"QueueTasks\")\nbroker = AsyncRedisBroker(name=\"QueueTasks\", storage=storage)\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>class AsyncRedisStorage(BaseStorage, AsyncPluginMixin):\n    \"\"\"\n    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0441 Redis, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445.\n\n    ## Example\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import AsyncRedisBroker\n    from qtasks.storages import AsyncRedisStorage\n\n    storage = AsyncRedisStorage(name=\"QueueTasks\")\n    broker = AsyncRedisBroker(name=\"QueueTasks\", storage=storage)\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                    \"\"\"\n            ),\n        ] = \"redis://localhost:6379/0\",\n        queue_process: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_process`.\n                    \"\"\"\n            ),\n        ] = \"task_process\",\n        redis_connect: Annotated[\n            Optional[aioredis.Redis],\n            Doc(\n                \"\"\"\n                    \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        global_config: Annotated[\n            Optional[\"BaseGlobalConfig\"],\n            Doc(\n                \"\"\"\n                    \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n            queue_process (str, optional): \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_process\".\n            redis_connect (aioredis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            global_config (BaseGlobalConfig, optional): \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name, log=log, config=config, events=events)\n        self.url = url\n        self._queue_process = queue_process\n        self.queue_process = f\"{self.name}:{queue_process}\"\n        self.events = self.events or AsyncEvents()\n\n        self.client = redis_connect or aioredis.from_url(\n            self.url, decode_responses=True, encoding=\"utf-8\"\n        )\n        self.redis_contrib = AsyncRedisCommandQueue(redis=self.client, log=self.log)\n\n        self.global_config = global_config or AsyncRedisGlobalConfig(\n            name=self.name, redis_connect=self.client, log=self.log, config=self.config\n        )\n\n    async def add(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        task_status: Annotated[\n            TaskStatusNewSchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n        Args:\n            uuid (UUID | str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n            task_status (TaskStatusNewSchema): \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        uuid = str(uuid)\n\n        new_data = await self._plugin_trigger(\"storage_add\", storage=self, uuid=uuid, task_status=task_status, return_last=True)\n        if new_data:\n            uuid = new_data.get(\"uuid\", uuid)\n            task_status = new_data.get(\"task_status\", task_status)\n\n        await self.client.hset(f\"{self.name}:{uuid}\", mapping=task_status.__dict__)\n        return\n\n    async def get(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        loop = asyncio.get_running_loop()\n        asyncio_atexit.register(self.stop, loop=loop)\n\n        key = f\"{self.name}:{uuid}\"\n        result = await self.client.hgetall(key)\n        if not result:\n            return None\n\n        result = self._build_task(uuid=uuid, result=result)\n        new_result = await self._plugin_trigger(\"storage_get\", storage=self, result=result, return_last=True)\n        if new_result:\n            result = new_result.get(\"result\", result)\n        return result\n\n    async def get_all(self) -&gt; List[\"Task\"]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.\n        \"\"\"\n        pattern = f\"{self.name}:*\"\n\n        results: List[\"Task\"] = []\n        async for key in self.client.scan_iter(pattern):\n            name, uuid, *_ = key.split(\":\")\n            if uuid in [self._queue_process, \"task_queue\"]:\n                continue\n            if f\"{name}:{uuid}\".find(self.global_config.config_name) != -1:\n                continue\n\n            task = await self.get(uuid=uuid)\n            results.append(task)\n\n        new_results = await self._plugin_trigger(\"storage_get_all\", storage=self, results=results, return_last=True)\n        if new_results:\n            results = new_results.get(\"results\", results)\n\n        return results\n\n    async def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = await self._plugin_trigger(\"storage_update\", storage=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n        return await self.redis_contrib.execute(\n            \"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"]\n        )\n\n    async def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusSuccessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusSuccessSchema | TaskStatusErrorSchema | TaskStatusCancelSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if model.status == TaskStatusEnum.SUCCESS.value and not isinstance(\n            model.returning, (bytes, str, int, float)\n        ):\n            trace = \"Invalid input of type: 'NoneType'. Convert to a bytes, string, int or float first.\"\n            model = TaskStatusErrorSchema(\n                task_name=task_broker.name,\n                priority=task_broker.priority,\n                traceback=trace,\n                created_at=task_broker.created_at,\n                updated_at=time.time(),\n            )\n            self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n\n        await self.redis_contrib.execute(\n            \"hset\", f\"{self.name}:{task_broker.uuid}\", mapping=model.__dict__\n        )\n        await self.redis_contrib.execute(\n            \"zrem\",\n            self.queue_process,\n            f\"{task_broker.name}:{task_broker.uuid}:{task_broker.priority}\",\n        )\n\n        await self._plugin_trigger(\n            \"storage_remove_finished_task\", storage=self, task_broker=task_broker, model=model\n        )\n        return\n\n    async def start(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n        await self._plugin_trigger(\"storage_start\", storage=self)\n        if self.global_config:\n            await self.global_config.start()\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n        await self._plugin_trigger(\"storage_stop\", storage=self)\n        return await self.client.aclose()\n\n    async def add_process(\n        self,\n        task_data: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n        Args:\n            task_data (str): \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n            priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_data = await self._plugin_trigger(\"storage_add_process\", storage=self, return_last=True)\n        if new_data:\n            task_data = new_data.get(\"task_data\", task_data)\n            priority = new_data.get(\"priority\", priority)\n        await self.client.zadd(self.queue_process, {task_data: priority})\n        return\n\n    async def _running_older_tasks(self, worker: \"BaseWorker\"):\n        tasks = await self.client.zrange(self.queue_process, 0, -1)\n        for task_data in tasks:\n            task_name, uuid, priority = task_data.split(\":\")\n            name_ = f\"{self.name}:{uuid}\"\n            args, kwargs, created_at = (\n                await self.client.hget(name_, \"args\"),\n                await self.client.hget(name_, \"kwargs\"),\n                await self.client.hget(name_, \"created_at\"),\n            )\n            args, kwargs, created_at = (\n                json.loads(args) or (),\n                json.loads(kwargs) or {},\n                float(created_at),\n            )\n            new_data = await self._plugin_trigger(\"storage_running_older_tasks\", storage=self, worker=worker, return_last=True)\n            if new_data:\n                task_name = new_data.get(\"task_name\", task_name)\n                uuid = new_data.get(\"uuid\", uuid)\n                priority = new_data.get(\"priority\", priority)\n                created_at = new_data.get(\"created_at\", created_at)\n                args = new_data.get(\"args\", args)\n                kwargs = new_data.get(\"kw\", kwargs)\n\n            await worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                created_at=created_at,\n                args=args,\n                kwargs=kwargs,\n            )\n        return\n\n    async def _delete_finished_tasks(self):\n        await self._plugin_trigger(\"storage_delete_finished_tasks\", storage=self)\n        pattern = f\"{self.name}:\"\n        try:\n            tasks: List[\"Task\"] = list(\n                filter(\n                    lambda task: task.status != TaskStatusEnum.NEW.value,\n                    await self.get_all(),\n                )\n            )\n\n            tasks_hash = [pattern + str(task.uuid) for task in tasks]\n            tasks_queue = [\n                f\"{task.task_name}:{task.uuid}:{task.priority}\" for task in tasks\n            ]\n\n            if tasks_queue:\n                await self.client.zrem(self.queue_process, *tasks_queue)\n            if tasks_hash:\n                await self.client.delete(*tasks_hash)\n        except BaseException:\n            pass\n        return\n\n    async def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        loop = asyncio.get_running_loop()\n        asyncio_atexit.register(self.stop, loop=loop)\n\n        await self._plugin_trigger(\"storage_flush_all\", storage=self)\n\n        pipe = self.client.pipeline()\n\n        pattern = f\"{self.name}:*\"\n        async for key in self.client.scan_iter(pattern):\n            await self.client.delete(key)\n        await pipe.execute()\n        return\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.__init__","title":"<code>__init__(name='QueueTasks', url='redis://localhost:6379/0', queue_process='task_process', redis_connect=None, global_config=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".</p> <code>'redis://localhost:6379/0'</code> <code>queue_process</code> <code>str</code> <p>\u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_process\".</p> <code>'task_process'</code> <code>redis_connect</code> <code>Redis</code> <p>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>global_config</code> <code>BaseGlobalConfig</code> <p>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                \"\"\"\n        ),\n    ] = \"redis://localhost:6379/0\",\n    queue_process: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_process`.\n                \"\"\"\n        ),\n    ] = \"task_process\",\n    redis_connect: Annotated[\n        Optional[aioredis.Redis],\n        Doc(\n            \"\"\"\n                \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    global_config: Annotated[\n        Optional[\"BaseGlobalConfig\"],\n        Doc(\n            \"\"\"\n                \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e Redis \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n        queue_process (str, optional): \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_process\".\n        redis_connect (aioredis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        global_config (BaseGlobalConfig, optional): \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name, log=log, config=config, events=events)\n    self.url = url\n    self._queue_process = queue_process\n    self.queue_process = f\"{self.name}:{queue_process}\"\n    self.events = self.events or AsyncEvents()\n\n    self.client = redis_connect or aioredis.from_url(\n        self.url, decode_responses=True, encoding=\"utf-8\"\n    )\n    self.redis_contrib = AsyncRedisCommandQueue(redis=self.client, log=self.log)\n\n    self.global_config = global_config or AsyncRedisGlobalConfig(\n        name=self.name, redis_connect=self.client, log=self.log, config=self.config\n    )\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.add","title":"<code>add(uuid, task_status)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>task_status</code> <code>TaskStatusNewSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def add(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    task_status: Annotated[\n        TaskStatusNewSchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n    Args:\n        uuid (UUID | str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n        task_status (TaskStatusNewSchema): \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    uuid = str(uuid)\n\n    new_data = await self._plugin_trigger(\"storage_add\", storage=self, uuid=uuid, task_status=task_status, return_last=True)\n    if new_data:\n        uuid = new_data.get(\"uuid\", uuid)\n        task_status = new_data.get(\"task_status\", task_status)\n\n    await self.client.hset(f\"{self.name}:{uuid}\", mapping=task_status.__dict__)\n    return\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.add_process","title":"<code>add_process(task_data, priority)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>task_data</code> <code>str</code> <p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def add_process(\n    self,\n    task_data: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n    Args:\n        task_data (str): \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_data = await self._plugin_trigger(\"storage_add_process\", storage=self, return_last=True)\n    if new_data:\n        task_data = new_data.get(\"task_data\", task_data)\n        priority = new_data.get(\"priority\", priority)\n    await self.client.zadd(self.queue_process, {task_data: priority})\n    return\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.flush_all","title":"<code>flush_all()</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    loop = asyncio.get_running_loop()\n    asyncio_atexit.register(self.stop, loop=loop)\n\n    await self._plugin_trigger(\"storage_flush_all\", storage=self)\n\n    pipe = self.client.pipeline()\n\n    pattern = f\"{self.name}:*\"\n    async for key in self.client.scan_iter(pattern):\n        await self.client.delete(key)\n    await pipe.execute()\n    return\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.get","title":"<code>get(uuid)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def get(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    loop = asyncio.get_running_loop()\n    asyncio_atexit.register(self.stop, loop=loop)\n\n    key = f\"{self.name}:{uuid}\"\n    result = await self.client.hgetall(key)\n    if not result:\n        return None\n\n    result = self._build_task(uuid=uuid, result=result)\n    new_result = await self._plugin_trigger(\"storage_get\", storage=self, result=result, return_last=True)\n    if new_result:\n        result = new_result.get(\"result\", result)\n    return result\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.get_all","title":"<code>get_all()</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Type Description <code>List[Task]</code> <p>List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.</p> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def get_all(self) -&gt; List[\"Task\"]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.\n    \"\"\"\n    pattern = f\"{self.name}:*\"\n\n    results: List[\"Task\"] = []\n    async for key in self.client.scan_iter(pattern):\n        name, uuid, *_ = key.split(\":\")\n        if uuid in [self._queue_process, \"task_queue\"]:\n            continue\n        if f\"{name}:{uuid}\".find(self.global_config.config_name) != -1:\n            continue\n\n        task = await self.get(uuid=uuid)\n        results.append(task)\n\n    new_results = await self._plugin_trigger(\"storage_get_all\", storage=self, results=results, return_last=True)\n    if new_results:\n        results = new_results.get(\"results\", results)\n\n    return results\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusSuccessSchema | TaskStatusErrorSchema | TaskStatusCancelSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusSuccessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusSuccessSchema | TaskStatusErrorSchema | TaskStatusCancelSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if model.status == TaskStatusEnum.SUCCESS.value and not isinstance(\n        model.returning, (bytes, str, int, float)\n    ):\n        trace = \"Invalid input of type: 'NoneType'. Convert to a bytes, string, int or float first.\"\n        model = TaskStatusErrorSchema(\n            task_name=task_broker.name,\n            priority=task_broker.priority,\n            traceback=trace,\n            created_at=task_broker.created_at,\n            updated_at=time.time(),\n        )\n        self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n\n    await self.redis_contrib.execute(\n        \"hset\", f\"{self.name}:{task_broker.uuid}\", mapping=model.__dict__\n    )\n    await self.redis_contrib.execute(\n        \"zrem\",\n        self.queue_process,\n        f\"{task_broker.name}:{task_broker.uuid}:{task_broker.priority}\",\n    )\n\n    await self._plugin_trigger(\n        \"storage_remove_finished_task\", storage=self, task_broker=task_broker, model=model\n    )\n    return\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.start","title":"<code>start()</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def start(self):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n    await self._plugin_trigger(\"storage_start\", storage=self)\n    if self.global_config:\n        await self.global_config.start()\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n    await self._plugin_trigger(\"storage_stop\", storage=self)\n    return await self.client.aclose()\n</code></pre>"},{"location":"ru/api/storages/async_redisstorage/#qtasks.storages.async_redis.AsyncRedisStorage.update","title":"<code>update(**kwargs)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/storages/async_redis.py</code> <pre><code>async def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = await self._plugin_trigger(\"storage_update\", storage=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n    return await self.redis_contrib.execute(\n        \"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"]\n    )\n</code></pre>"},{"location":"ru/api/storages/basestorage/","title":"BaseStorage - \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0435 \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435","text":"<p>Base storage class.</p>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage","title":"<code>BaseStorage</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseStorage</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449.</p>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks.storages.base import BaseStorage\n\nclass MyStorage(BaseStorage):\n    def __init__(self, name: str = None):\n        super().__init__(name=name)\n        pass\n</code></pre> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>class BaseStorage(ABC):\n    \"\"\"\n    `BaseStorage` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks.storages.base import BaseStorage\n\n    class MyStorage(BaseStorage):\n        def __init__(self, name: str = None):\n            super().__init__(name=name)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f Storage.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        global_config: Annotated[\n            Optional[\"BaseGlobalConfig\"],\n            Doc(\n                \"\"\"\n                    \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            global_config (BaseGlobalConfig, optional): \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        self.name = name\n        self.global_config: Union[\"BaseGlobalConfig\", None] = global_config\n\n        self.config = config or QueueConfig()\n        self.log = (\n            log.with_subname(\"Storage\")\n            if log\n            else Logger(\n                name=self.name,\n                subname=\"Storage\",\n                default_level=self.config.logs_default_level_server,\n                format=self.config.logs_format,\n            )\n        )\n        self.events = events\n\n        self.client = None\n        self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n        self.init_plugins()\n\n    @abstractmethod\n    def add(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        task_status: Annotated[\n            TaskStatusNewSchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n        Args:\n            uuid (UUID | str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n            task_status (TaskStatusNewSchema): \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Task, None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_all(self) -&gt; List[Task]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def start(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n        pass\n\n    @abstractmethod\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n        pass\n\n    def add_plugin(\n        self,\n        plugin: Annotated[\n            \"BasePlugin\",\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d.\n                    \"\"\"\n            ),\n        ],\n        trigger_names: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n        Args:\n            plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n            trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n        \"\"\"\n        trigger_names = trigger_names or [\"Globals\"]\n\n        for name in trigger_names:\n            if name not in self.plugins:\n                self.plugins.update({name: [plugin]})\n            else:\n                self.plugins[name].append(plugin)\n        return\n\n    def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        pass\n\n    def _delete_finished_tasks(self, **kwargs) -&gt; None:\n        pass\n\n    def _running_older_tasks(self, **kwargs) -&gt; None:\n        pass\n\n    def update_config(\n        self,\n        config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n        \"\"\"\n        self.config = config\n        return\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        pass\n\n    def _build_task(self, uuid, result: dict) -&gt; Task:\n        # \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b Task\n\n        base_kwargs = dict(\n            status=result[\"status\"],\n            uuid=uuid,\n            priority=int(result[\"priority\"]),\n            task_name=result[\"task_name\"],\n            args=json.loads(result[\"args\"]),\n            kwargs=json.loads(result[\"kwargs\"]),\n            created_at=datetime.datetime.fromtimestamp(float(result[\"created_at\"])),\n            updated_at=datetime.datetime.fromtimestamp(float(result[\"updated_at\"])),\n        )\n\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439\n        task_field_names = {f.name for f in fields(Task)}\n\n        # \u0418\u0449\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438\n        extra_fields = []\n        extra_values = {}\n\n        for key, value in result.items():\n            if key not in task_field_names:\n                # \u0422\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u0430\u044f \u2014 \u043c\u043e\u0436\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c\n                field_type = self._infer_type(value)\n                extra_fields.append((key, field_type, field(default=None)))\n\n                # \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a \u0442\u0438\u043f\u0443\n                if field_type is bool:\n                    extra_values[key] = value.lower() == \"true\"\n                elif field_type is int:\n                    extra_values[key] = int(value)\n                elif field_type is float:\n                    extra_values[key] = float(value)\n                else:\n                    extra_values[key] = value\n\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 dataclass \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438\n        if extra_fields:\n            NewTask = make_dataclass(\"Task\", extra_fields, bases=(Task,))\n        else:\n            NewTask = Task\n\n        # \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b\n        task = NewTask(**base_kwargs, **extra_values)\n        if hasattr(task, \"returning\"):\n            with contextlib.suppress(BaseException):\n                task.returning = json.loads(task.returning)\n        return task\n\n    def _infer_type(self, value: str):\n        \"\"\"\u041f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438.\"\"\"\n        if value.lower() in {\"true\", \"false\"}:\n            return bool\n        try:\n            int(value)\n            return int\n        except ValueError:\n            pass\n        try:\n            float(value)\n            return float\n        except ValueError:\n            pass\n        return str\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.__init__","title":"<code>__init__(name=None, global_config=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>global_config</code> <code>BaseGlobalConfig</code> <p>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f Storage.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    global_config: Annotated[\n        Optional[\"BaseGlobalConfig\"],\n        Doc(\n            \"\"\"\n                \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        global_config (BaseGlobalConfig, optional): \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    self.name = name\n    self.global_config: Union[\"BaseGlobalConfig\", None] = global_config\n\n    self.config = config or QueueConfig()\n    self.log = (\n        log.with_subname(\"Storage\")\n        if log\n        else Logger(\n            name=self.name,\n            subname=\"Storage\",\n            default_level=self.config.logs_default_level_server,\n            format=self.config.logs_format,\n        )\n    )\n    self.events = events\n\n    self.client = None\n    self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n    self.init_plugins()\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.add","title":"<code>add(uuid, task_status)</code>  <code>abstractmethod</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>task_status</code> <code>TaskStatusNewSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/base.py</code> <pre><code>@abstractmethod\ndef add(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    task_status: Annotated[\n        TaskStatusNewSchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n    Args:\n        uuid (UUID | str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n        task_status (TaskStatusNewSchema): \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.add_plugin","title":"<code>add_plugin(plugin, trigger_names=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>BasePlugin</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d</p> required <code>trigger_names</code> <code>List[str]</code> <p>\u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Globals</code>.</p> <code>None</code> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>def add_plugin(\n    self,\n    plugin: Annotated[\n        \"BasePlugin\",\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d.\n                \"\"\"\n        ),\n    ],\n    trigger_names: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n    Args:\n        plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n        trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n    \"\"\"\n    trigger_names = trigger_names or [\"Globals\"]\n\n    for name in trigger_names:\n        if name not in self.plugins:\n            self.plugins.update({name: [plugin]})\n        else:\n            self.plugins[name].append(plugin)\n    return\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.get","title":"<code>get(uuid)</code>  <code>abstractmethod</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>@abstractmethod\ndef get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Task, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.get_all","title":"<code>get_all()</code>  <code>abstractmethod</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Type Description <code>List[Task]</code> <p>List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.</p> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>@abstractmethod\ndef get_all(self) -&gt; List[Task]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/base.py</code> <pre><code>def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.start","title":"<code>start()</code>  <code>abstractmethod</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>run_forever</code>.</p> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>@abstractmethod\ndef start(self):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.stop","title":"<code>stop()</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>run_forever</code>.</p> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.update","title":"<code>update(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/storages/base.py</code> <pre><code>@abstractmethod\ndef update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/storages/basestorage/#qtasks.storages.base.BaseStorage.update_config","title":"<code>update_config(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433.</p> required Source code in <code>src/qtasks/storages/base.py</code> <pre><code>def update_config(\n    self,\n    config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n    Args:\n        config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n    \"\"\"\n    self.config = config\n    return\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/","title":"SyncRedisStorage","text":"<p>Sync Redis storage.</p>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage","title":"<code>SyncRedisStorage</code>","text":"<p>               Bases: <code>BaseStorage</code>, <code>SyncPluginMixin</code></p> <p>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0441 Redis, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage--example","title":"Example","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.brokers import SyncRedisBroker\nfrom qtasks.storages import SyncRedisStorage\n\nstorage = SyncRedisStorage(name=\"QueueTasks\")\nbroker = SyncRedisBroker(name=\"QueueTasks\", storage=storage)\n\napp = QueueTasks(broker=broker)\n</code></pre> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>class SyncRedisStorage(BaseStorage, SyncPluginMixin):\n    \"\"\"\n    \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0441 Redis, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445.\n\n    ## Example\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.brokers import SyncRedisBroker\n    from qtasks.storages import SyncRedisStorage\n\n    storage = SyncRedisStorage(name=\"QueueTasks\")\n    broker = SyncRedisBroker(name=\"QueueTasks\", storage=storage)\n\n    app = QueueTasks(broker=broker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        url: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                    \"\"\"\n            ),\n        ] = \"redis://localhost:6379/0\",\n        queue_process: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_process`.\n                    \"\"\"\n            ),\n        ] = \"task_process\",\n        redis_connect: Annotated[\n            Optional[redis.Redis],\n            Doc(\n                \"\"\"\n                    \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        global_config: Annotated[\n            Optional[\"BaseGlobalConfig\"],\n            Doc(\n                \"\"\"\n                    \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n            queue_process (str, optional): \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_process\".\n            redis_connect (redis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            global_config (BaseGlobalConfig, optional): \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(name=name, log=log, config=config, events=events)\n        self.url = url\n        self._queue_process = queue_process\n        self.queue_process = f\"{self.name}:{queue_process}\"\n        self.events = self.events or SyncEvents()\n        self.client = redis_connect or redis.Redis.from_url(\n            self.url, decode_responses=True, encoding=\"utf-8\"\n        )\n        self.redis_contrib = SyncRedisCommandQueue(redis=self.client, log=self.log)\n\n        self.global_config = global_config or SyncRedisGlobalConfig(\n            name=self.name, redis_connect=self.client, log=self.log, config=self.config\n        )\n\n    def add(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        task_status: Annotated[\n            TaskStatusNewSchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n        Args:\n            uuid (UUID | str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n            task_status (TaskStatusNewSchema): \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        uuid = str(uuid)\n\n        new_data = self._plugin_trigger(\"storage_add\", storage=self, uuid=uuid, task_status=task_status, return_last=True)\n        if new_data:\n            uuid = new_data.get(\"uuid\", uuid)\n            task_status = new_data.get(\"task_status\", task_status)\n\n        self.client.hset(f\"{self.name}:{uuid}\", mapping=task_status.__dict__)\n        return\n\n    def get(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n        \"\"\"\n        key = f\"{self.name}:{uuid}\"\n        result = self.client.hgetall(key)\n        if not result:\n            return None\n\n        result = self._build_task(uuid=uuid, result=result)\n        new_result = self._plugin_trigger(\"storage_get\", storage=self, result=result, return_last=True)\n        if new_result:\n            result = new_result.get(\"result\", result)\n        return result\n\n    def get_all(self) -&gt; List[\"Task\"]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.\n        \"\"\"\n        pattern = f\"{self.name}:*\"\n        results: List[\"Task\"] = []\n        for key in self.client.scan_iter(pattern):\n            try:\n                _, uuid = key.split(\":\")\n                if uuid in [self._queue_process, \"task_queue\"]:\n                    continue\n                task = self.get(uuid=uuid)\n                if task:\n                    results.append(task)\n            except Exception:\n                continue\n\n        new_results = self._plugin_trigger(\"storage_get_all\", storage=self, results=results, return_last=True)\n        if new_results:\n            results = new_results.get(\"results\", results)\n\n        return results\n\n    def update(\n        self,\n        **kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n        Args:\n            kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_kw = self._plugin_trigger(\"storage_update\", storage=self, kw=kwargs, return_last=True)\n        if new_kw:\n            kwargs = new_kw.get(\"kw\", kwargs)\n\n        return self.redis_contrib.execute(\n            \"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"]\n        )\n\n    def remove_finished_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[TaskStatusSuccessSchema, TaskStatusErrorSchema],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusSuccessSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        if model.status == TaskStatusEnum.SUCCESS.value and not isinstance(\n            model.returning, (bytes, str, int, float)\n        ):\n            trace = \"Invalid input of type: 'NoneType'. Convert to a bytes, string, int or float first.\"\n            model = TaskStatusErrorSchema(\n                task_name=task_broker.name,\n                priority=task_broker.priority,\n                traceback=trace,\n                created_at=task_broker.created_at,\n                updated_at=time.time(),\n            )\n            self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n\n        self.redis_contrib.execute(\n            \"hset\", f\"{self.name}:{task_broker.uuid}\", mapping=model.__dict__\n        )\n        self.redis_contrib.execute(\n            \"zrem\",\n            self.queue_process,\n            f\"{task_broker.name}:{task_broker.uuid}:{task_broker.priority}\",\n        )\n\n        self._plugin_trigger(\n            \"storage_remove_finished_task\", storage=self, task_broker=task_broker, model=model\n        )\n        return\n\n    def start(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n        self._plugin_trigger(\"storage_start\", storage=self)\n        if self.global_config:\n            self.global_config.start()\n\n    def stop(self) -&gt; None:\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n        self._plugin_trigger(\"storage_stop\", storage=self)\n        self.client.close()\n\n    def add_process(\n        self,\n        task_data: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n        Args:\n            task_data (str): \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n            priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_data = self._plugin_trigger(\"storage_add_process\", storage=self, return_last=True)\n        if new_data:\n            task_data = new_data.get(\"task_data\", task_data)\n            priority = new_data.get(\"priority\", priority)\n\n        self.client.zadd(self.queue_process, {task_data: priority})\n        return\n\n    def _running_older_tasks(self, worker: \"BaseWorker\") -&gt; None:\n        tasks = self.client.zrange(self.queue_process, 0, -1)\n        for task_data in tasks:\n            task_name, uuid, priority = task_data.split(\":\")\n            name_ = f\"{self.name}:{uuid}\"\n            args, kwargs, created_at = (\n                self.client.hget(name_, \"args\"),\n                self.client.hget(name_, \"kwargs\"),\n                self.client.hget(name_, \"created_at\"),\n            )\n            args, kwargs, created_at = (\n                json.loads(args) or (),\n                json.loads(kwargs) or {},\n                float(created_at),\n            )\n            new_data = self._plugin_trigger(\"storage_running_older_tasks\", storage=self, worker=worker, return_last=True)\n            if new_data:\n                task_name = new_data.get(\"task_name\", task_name)\n                uuid = new_data.get(\"uuid\", uuid)\n                priority = new_data.get(\"priority\", priority)\n                created_at = new_data.get(\"created_at\", created_at)\n                args = new_data.get(\"args\", args)\n                kwargs = new_data.get(\"kw\", kwargs)\n\n            worker.add(\n                name=task_name,\n                uuid=uuid,\n                priority=int(priority),\n                created_at=created_at,\n                args=args,\n                kwargs=kwargs,\n            )\n\n    def _delete_finished_tasks(self):\n        self._plugin_trigger(\"storage_delete_finished_tasks\", storage=self)\n        pattern = f\"{self.name}:\"\n        try:\n            tasks: List[\"Task\"] = list(\n                filter(\n                    lambda task: task.status != TaskStatusEnum.NEW.value, self.get_all()\n                )\n            )\n\n            tasks_hash = [pattern + str(task.uuid) for task in tasks]\n            tasks_queue = [\n                f\"{task.task_name}:{task.uuid}:{task.priority}\" for task in tasks\n            ]\n\n            if tasks_queue:\n                self.client.zrem(self.queue_process, *tasks_queue)\n            if tasks_hash:\n                self.client.delete(*tasks_hash)\n        except BaseException:\n            pass\n        return\n\n    def flush_all(self) -&gt; None:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n        self._plugin_trigger(\"storage_flush_all\", storage=self)\n\n        pipe = self.client.pipeline()\n\n        pattern = f\"{self.name}:*\"\n        for key in self.client.scan_iter(pattern):\n            self.client.delete(key)\n        pipe.execute()\n        return\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.__init__","title":"<code>__init__(name='QueueTasks', url='redis://localhost:6379/0', queue_process='task_process', redis_connect=None, global_config=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>url</code> <code>str</code> <p>URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".</p> <code>'redis://localhost:6379/0'</code> <code>queue_process</code> <code>str</code> <p>\u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_process\".</p> <code>'task_process'</code> <code>redis_connect</code> <code>Redis</code> <p>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>global_config</code> <code>BaseGlobalConfig</code> <p>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `redis://localhost:6379/0`.\n                \"\"\"\n        ),\n    ] = \"redis://localhost:6379/0\",\n    queue_process: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `task_process`.\n                \"\"\"\n        ),\n    ] = \"task_process\",\n    redis_connect: Annotated[\n        Optional[redis.Redis],\n        Doc(\n            \"\"\"\n                \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    global_config: Annotated[\n        Optional[\"BaseGlobalConfig\"],\n        Doc(\n            \"\"\"\n                \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        url (str, optional): URL \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"redis://localhost:6379/0\".\n        queue_process (str, optional): \u0418\u043c\u044f \u043a\u0430\u043d\u0430\u043b\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"task_process\".\n        redis_connect (redis.Redis, optional): \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        global_config (BaseGlobalConfig, optional): \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(name=name, log=log, config=config, events=events)\n    self.url = url\n    self._queue_process = queue_process\n    self.queue_process = f\"{self.name}:{queue_process}\"\n    self.events = self.events or SyncEvents()\n    self.client = redis_connect or redis.Redis.from_url(\n        self.url, decode_responses=True, encoding=\"utf-8\"\n    )\n    self.redis_contrib = SyncRedisCommandQueue(redis=self.client, log=self.log)\n\n    self.global_config = global_config or SyncRedisGlobalConfig(\n        name=self.name, redis_connect=self.client, log=self.log, config=self.config\n    )\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.add","title":"<code>add(uuid, task_status)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>task_status</code> <code>TaskStatusNewSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def add(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    task_status: Annotated[\n        TaskStatusNewSchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\n\n    Args:\n        uuid (UUID | str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n        task_status (TaskStatusNewSchema): \u0421\u0445\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    uuid = str(uuid)\n\n    new_data = self._plugin_trigger(\"storage_add\", storage=self, uuid=uuid, task_status=task_status, return_last=True)\n    if new_data:\n        uuid = new_data.get(\"uuid\", uuid)\n        task_status = new_data.get(\"task_status\", task_status)\n\n    self.client.hset(f\"{self.name}:{uuid}\", mapping=task_status.__dict__)\n    return\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.add_process","title":"<code>add_process(task_data, priority)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>task_data</code> <code>str</code> <p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def add_process(\n    self,\n    task_data: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n\n    Args:\n        task_data (str): \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_data = self._plugin_trigger(\"storage_add_process\", storage=self, return_last=True)\n    if new_data:\n        task_data = new_data.get(\"task_data\", task_data)\n        priority = new_data.get(\"priority\", priority)\n\n    self.client.zadd(self.queue_process, {task_data: priority})\n    return\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.flush_all","title":"<code>flush_all()</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def flush_all(self) -&gt; None:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\"\"\"\n    self._plugin_trigger(\"storage_flush_all\", storage=self)\n\n    pipe = self.client.pipeline()\n\n    pattern = f\"{self.name}:*\"\n    for key in self.client.scan_iter(pattern):\n        self.client.delete(key)\n    pipe.execute()\n    return\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.get","title":"<code>get(uuid)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>schemas.task.Task</code>, \u0438\u043d\u0430\u0447\u0435 <code>None</code>.</p> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def get(self, uuid: Union[UUID, str]) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        uuid (UUID|str): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 `schemas.task.Task`, \u0438\u043d\u0430\u0447\u0435 `None`.\n    \"\"\"\n    key = f\"{self.name}:{uuid}\"\n    result = self.client.hgetall(key)\n    if not result:\n        return None\n\n    result = self._build_task(uuid=uuid, result=result)\n    new_result = self._plugin_trigger(\"storage_get\", storage=self, result=result, return_last=True)\n    if new_result:\n        result = new_result.get(\"result\", result)\n    return result\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.get_all","title":"<code>get_all()</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Returns:</p> Type Description <code>List[Task]</code> <p>List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.</p> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def get_all(self) -&gt; List[\"Task\"]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        List[Task]: \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u0434\u0430\u0447.\n    \"\"\"\n    pattern = f\"{self.name}:*\"\n    results: List[\"Task\"] = []\n    for key in self.client.scan_iter(pattern):\n        try:\n            _, uuid = key.split(\":\")\n            if uuid in [self._queue_process, \"task_queue\"]:\n                continue\n            task = self.get(uuid=uuid)\n            if task:\n                results.append(task)\n        except Exception:\n            continue\n\n    new_results = self._plugin_trigger(\"storage_get_all\", storage=self, results=results, return_last=True)\n    if new_results:\n        results = new_results.get(\"results\", results)\n\n    return results\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.remove_finished_task","title":"<code>remove_finished_task(task_broker, model)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusSuccessSchema | TaskStatusErrorSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def remove_finished_task(\n    self,\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[TaskStatusSuccessSchema, TaskStatusErrorSchema],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusSuccessSchema | TaskStatusErrorSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    if model.status == TaskStatusEnum.SUCCESS.value and not isinstance(\n        model.returning, (bytes, str, int, float)\n    ):\n        trace = \"Invalid input of type: 'NoneType'. Convert to a bytes, string, int or float first.\"\n        model = TaskStatusErrorSchema(\n            task_name=task_broker.name,\n            priority=task_broker.priority,\n            traceback=trace,\n            created_at=task_broker.created_at,\n            updated_at=time.time(),\n        )\n        self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n\n    self.redis_contrib.execute(\n        \"hset\", f\"{self.name}:{task_broker.uuid}\", mapping=model.__dict__\n    )\n    self.redis_contrib.execute(\n        \"zrem\",\n        self.queue_process,\n        f\"{task_broker.name}:{task_broker.uuid}:{task_broker.priority}\",\n    )\n\n    self._plugin_trigger(\n        \"storage_remove_finished_task\", storage=self, task_broker=task_broker, model=model\n    )\n    return\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.start","title":"<code>start()</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def start(self):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n    self._plugin_trigger(\"storage_start\", storage=self)\n    if self.global_config:\n        self.global_config.start()\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.</p> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435.\"\"\"\n    self._plugin_trigger(\"storage_stop\", storage=self)\n    self.client.close()\n</code></pre>"},{"location":"ru/api/storages/sync_redisstorage/#qtasks.storages.sync_redis.SyncRedisStorage.update","title":"<code>update(**kwargs)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>dict</code> <p>\u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> <code>{}</code> Source code in <code>src/qtasks/storages/sync_redis.py</code> <pre><code>def update(\n    self,\n    **kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435.\n\n    Args:\n        kwargs (dict, optional): \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_kw = self._plugin_trigger(\"storage_update\", storage=self, kw=kwargs, return_last=True)\n    if new_kw:\n        kwargs = new_kw.get(\"kw\", kwargs)\n\n    return self.redis_contrib.execute(\n        \"hset\", kwargs[\"name\"], mapping=kwargs[\"mapping\"]\n    )\n</code></pre>"},{"location":"ru/api/tests/async_testcase/","title":"AsyncTestCase","text":"<p>Async test classes.</p>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase","title":"<code>AsyncTestCase</code>","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.tests import AsyncTestCase\n\napp = QueueTasks()\n\ntest_case = AsyncTestCase(app=app)\n</code></pre> Source code in <code>src/qtasks/tests/async_testcase.py</code> <pre><code>class AsyncTestCase(BaseTestCase):\n    \"\"\"\n    \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.tests import AsyncTestCase\n\n    app = QueueTasks()\n\n    test_case = AsyncTestCase(app=app)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n                    \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u0435\u0439\u0441.\n\n        Args:\n            app (QueueTasks, Doc): \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        super().__init__(app=app, name=name)\n\n        self._global_loop: Union[asyncio.AbstractEventLoop, None] = None\n\n    def start_in_background(\n        self,\n        starter: Annotated[\n            Optional[\"BaseStarter\"],\n            Doc(\n                \"\"\"\n                    \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                    \"\"\"\n            ),\n        ] = None,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n    ):  # TODO: fix!\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c `app.run_forever()` \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.\n\n        Args:\n            starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        \"\"\"\n\n        def run_loop():\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            try:\n                loop.run_until_complete(self.start(loop=loop, num_workers=num_workers))\n            finally:\n                loop.close()\n\n        thread = threading.Thread(target=run_loop, daemon=True)\n        thread.start()\n\n    def start(\n        self,\n        loop: Annotated[\n            Optional[asyncio.AbstractEventLoop],\n            Doc(\n                \"\"\"\n                    \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        starter: Annotated[\n            Optional[\"BaseStarter\"],\n            Doc(\n                \"\"\"\n                    \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                    \"\"\"\n            ),\n        ] = None,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 `app.run_forever()`.\n\n        Args:\n            loop (asyncio.AbstractEventLoop, optional): \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        \"\"\"\n        self.app.run_forever(\n            loop=loop,\n            starter=starter,\n            num_workers=num_workers,\n            reset_config=reset_config,\n        )\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n        if self.test_config.global_config:\n            self.app.broker.storage.global_config.stop()\n\n        if self.test_config.storage:\n            self.app.broker.storage.stop()\n\n        if self.test_config.broker:\n            self.app.broker.stop()\n\n        if self.test_config.worker:\n            await self.app.worker.stop()\n        return\n\n    async def add_task(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n            kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`\n\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncResult`.\n\n        Returns:\n            Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n        \"\"\"\n        if self.test_config.broker:\n            args, kwargs = args or (), kwargs or {}\n            return await self.app.add_task(\n                *args,\n                task_name=task_name,\n                priority=priority,\n                timeout=timeout,\n                **kwargs\n            )\n        elif self.test_config.worker:\n            return await self.app.worker.add(\n                name=task_name,\n                uuid=uuid4(),\n                priority=priority,\n                created_at=time(),\n                args=args or (),\n                kwargs=kwargs or {},\n            )\n        else:\n            print(\n                f\"[AsyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0412\u043e\u0440\u043a\u0435\u0440 \u0438\u043b\u0438 \u0411\u0440\u043e\u043a\u0435\u0440!\"\n            )\n            return\n\n    async def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        if not self.test_config.broker:\n            print(f\"[AsyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0411\u0440\u043e\u043a\u0435\u0440!\")\n            return\n        return await self.app.broker.get(uuid=uuid)\n</code></pre>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase.__init__","title":"<code>__init__(app, name=None)</code>","text":"<p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u0435\u0439\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>(QueueTasks, Doc)</code> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.</p> required <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/tests/async_testcase.py</code> <pre><code>def __init__(\n    self,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n                \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u0435\u0439\u0441.\n\n    Args:\n        app (QueueTasks, Doc): \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    super().__init__(app=app, name=name)\n\n    self._global_loop: Union[asyncio.AbstractEventLoop, None] = None\n</code></pre>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase.add_task","title":"<code>add_task(task_name, *args, priority=None, timeout=None, **kwargs)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>0</code>.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>{}</code></p> <code>{}</code> <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>qtasks.results.AsyncResult</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/tests/async_testcase.py</code> <pre><code>async def add_task(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n        kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`\n\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncResult`.\n\n    Returns:\n        Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n    \"\"\"\n    if self.test_config.broker:\n        args, kwargs = args or (), kwargs or {}\n        return await self.app.add_task(\n            *args,\n            task_name=task_name,\n            priority=priority,\n            timeout=timeout,\n            **kwargs\n        )\n    elif self.test_config.worker:\n        return await self.app.worker.add(\n            name=task_name,\n            uuid=uuid4(),\n            priority=priority,\n            created_at=time(),\n            args=args or (),\n            kwargs=kwargs or {},\n        )\n    else:\n        print(\n            f\"[AsyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0412\u043e\u0440\u043a\u0435\u0440 \u0438\u043b\u0438 \u0411\u0440\u043e\u043a\u0435\u0440!\"\n        )\n        return\n</code></pre>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase.get","title":"<code>get(uuid)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0417\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/tests/async_testcase.py</code> <pre><code>async def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    if not self.test_config.broker:\n        print(f\"[AsyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0411\u0440\u043e\u043a\u0435\u0440!\")\n        return\n    return await self.app.broker.get(uuid=uuid)\n</code></pre>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase.start","title":"<code>start(loop=None, starter=None, num_workers=4, reset_config=True)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 <code>app.run_forever()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>loop</code> <code>AbstractEventLoop</code> <p>\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>starter</code> <code>BaseStarter</code> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.starters.AsyncStarter</code>.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> Source code in <code>src/qtasks/tests/async_testcase.py</code> <pre><code>def start(\n    self,\n    loop: Annotated[\n        Optional[asyncio.AbstractEventLoop],\n        Doc(\n            \"\"\"\n                \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    starter: Annotated[\n        Optional[\"BaseStarter\"],\n        Doc(\n            \"\"\"\n                \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                \"\"\"\n        ),\n    ] = None,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 `app.run_forever()`.\n\n    Args:\n        loop (asyncio.AbstractEventLoop, optional): \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 loop. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n    \"\"\"\n    self.app.run_forever(\n        loop=loop,\n        starter=starter,\n        num_workers=num_workers,\n        reset_config=reset_config,\n    )\n</code></pre>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase.start_in_background","title":"<code>start_in_background(starter=None, num_workers=4, reset_config=True)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c <code>app.run_forever()</code> \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>starter</code> <code>BaseStarter</code> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.starters.AsyncStarter</code>.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> Source code in <code>src/qtasks/tests/async_testcase.py</code> <pre><code>def start_in_background(\n    self,\n    starter: Annotated[\n        Optional[\"BaseStarter\"],\n        Doc(\n            \"\"\"\n                \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                \"\"\"\n        ),\n    ] = None,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n):  # TODO: fix!\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c `app.run_forever()` \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.\n\n    Args:\n        starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n    \"\"\"\n\n    def run_loop():\n        loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(loop)\n        try:\n            loop.run_until_complete(self.start(loop=loop, num_workers=num_workers))\n        finally:\n            loop.close()\n\n    thread = threading.Thread(target=run_loop, daemon=True)\n    thread.start()\n</code></pre>"},{"location":"ru/api/tests/async_testcase/#qtasks.tests.async_testcase.AsyncTestCase.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/tests/async_testcase.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n    if self.test_config.global_config:\n        self.app.broker.storage.global_config.stop()\n\n    if self.test_config.storage:\n        self.app.broker.storage.stop()\n\n    if self.test_config.broker:\n        self.app.broker.stop()\n\n    if self.test_config.worker:\n        await self.app.worker.stop()\n    return\n</code></pre>"},{"location":"ru/api/tests/basetests/","title":"BaseTestCase - \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u041a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>Base test case.</p>"},{"location":"ru/api/tests/basetests/#qtasks.tests.base.BaseTestCase","title":"<code>BaseTestCase</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseTestCase</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f TestCase.</p>"},{"location":"ru/api/tests/basetests/#qtasks.tests.base.BaseTestCase--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.tests.base import BaseTestCase\n\nclass MyTestCase(BaseTestCase):\n    def __init__(self, app: QueueTasks, name: str|None = None):\n        super().__init__(app=app, name=name)\n        pass\n</code></pre> Source code in <code>src/qtasks/tests/base.py</code> <pre><code>class BaseTestCase(ABC):\n    \"\"\"\n    `BaseTestCase` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f TestCase.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.tests.base import BaseTestCase\n\n    class MyTestCase(BaseTestCase):\n        def __init__(self, app: QueueTasks, name: str|None = None):\n            super().__init__(app=app, name=name)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n                    \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u0435\u0439\u0441\u0430.\"\"\"\n        self.app = app\n\n        self.name = name\n        self.config = QueueConfig()\n        self.test_config = TestConfig()\n\n    @abstractmethod\n    def start(self, **kwargs):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n        pass\n\n    @abstractmethod\n    def stop(self, **kwargs):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n        pass\n\n    def update_config(\n        self,\n        config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n        \"\"\"\n        self.config = config\n        return\n\n    def settings(self, test_config: TestConfig = None) -&gt; None:\n        \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n        Args:\n            test_config (TestConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `TestConfig()`.\n        \"\"\"\n        if test_config:\n            self.test_config = test_config\n        else:\n            test_config = self.test_config\n\n        global_config = None\n        storage = None\n\n        if not test_config.global_config:\n            global_config = AsyncTestGlobalConfig(name=self.name)\n\n        if not test_config.storage:\n            storage = AsyncTestStorage(name=self.name, global_config=global_config)\n\n        if not test_config.broker:\n            self.app.broker = AsyncTestBroker(name=self.name, storage=storage)\n\n        if not test_config.worker:\n            self.app.worker = AsyncTestWorker(name=self.name, broker=self.app.broker)\n\n        if not test_config.plugins:\n            self.app.plugins.clear()\n            self.app.broker.plugins.clear()\n            self.app.broker.storage.plugins.clear()\n            self.app.broker.storage.global_config.plugins.clear()\n            self.app.worker.plugins.clear()\n            if self.app.starter:\n                self.app.starter.plugins.clear()\n\n        return\n</code></pre>"},{"location":"ru/api/tests/basetests/#qtasks.tests.base.BaseTestCase.__init__","title":"<code>__init__(app, name=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u0435\u0439\u0441\u0430.</p> Source code in <code>src/qtasks/tests/base.py</code> <pre><code>def __init__(\n    self,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n                \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u0435\u0439\u0441\u0430.\"\"\"\n    self.app = app\n\n    self.name = name\n    self.config = QueueConfig()\n    self.test_config = TestConfig()\n</code></pre>"},{"location":"ru/api/tests/basetests/#qtasks.tests.base.BaseTestCase.settings","title":"<code>settings(test_config=None)</code>","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>Parameters:</p> Name Type Description Default <code>test_config</code> <code>TestConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>TestConfig()</code>.</p> <code>None</code> Source code in <code>src/qtasks/tests/base.py</code> <pre><code>def settings(self, test_config: TestConfig = None) -&gt; None:\n    \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n    Args:\n        test_config (TestConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `TestConfig()`.\n    \"\"\"\n    if test_config:\n        self.test_config = test_config\n    else:\n        test_config = self.test_config\n\n    global_config = None\n    storage = None\n\n    if not test_config.global_config:\n        global_config = AsyncTestGlobalConfig(name=self.name)\n\n    if not test_config.storage:\n        storage = AsyncTestStorage(name=self.name, global_config=global_config)\n\n    if not test_config.broker:\n        self.app.broker = AsyncTestBroker(name=self.name, storage=storage)\n\n    if not test_config.worker:\n        self.app.worker = AsyncTestWorker(name=self.name, broker=self.app.broker)\n\n    if not test_config.plugins:\n        self.app.plugins.clear()\n        self.app.broker.plugins.clear()\n        self.app.broker.storage.plugins.clear()\n        self.app.broker.storage.global_config.plugins.clear()\n        self.app.worker.plugins.clear()\n        if self.app.starter:\n            self.app.starter.plugins.clear()\n\n    return\n</code></pre>"},{"location":"ru/api/tests/basetests/#qtasks.tests.base.BaseTestCase.start","title":"<code>start(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/tests/base.py</code> <pre><code>@abstractmethod\ndef start(self, **kwargs):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/tests/basetests/#qtasks.tests.base.BaseTestCase.stop","title":"<code>stop(**kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/tests/base.py</code> <pre><code>@abstractmethod\ndef stop(self, **kwargs):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/tests/basetests/#qtasks.tests.base.BaseTestCase.update_config","title":"<code>update_config(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433.</p> required Source code in <code>src/qtasks/tests/base.py</code> <pre><code>def update_config(\n    self,\n    config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n    Args:\n        config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n    \"\"\"\n    self.config = config\n    return\n</code></pre>"},{"location":"ru/api/tests/sync_testcase/","title":"SyncTestCase","text":"<p>Sync test classes.</p>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase","title":"<code>SyncTestCase</code>","text":"<p>               Bases: <code>BaseTestCase</code></p> <p>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.tests import SyncTestCase\n\napp = QueueTasks()\n\ntest_case = SyncTestCase(app=app)\n</code></pre> Source code in <code>src/qtasks/tests/sync_testcase.py</code> <pre><code>class SyncTestCase(BaseTestCase):\n    \"\"\"\n    \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.tests import SyncTestCase\n\n    app = QueueTasks()\n\n    test_case = SyncTestCase(app=app)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n                    \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u0435\u0439\u0441.\n\n        Args:\n            app (QueueTasks): \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        \"\"\"\n        super().__init__(app=app, name=name)\n\n    def start_in_background(\n        self,\n        starter: Annotated[\n            Optional[\"BaseStarter\"],\n            Doc(\n                \"\"\"\n                    \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                    \"\"\"\n            ),\n        ] = None,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n    ):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c `app.run_forever()` \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.\n\n        Args:\n            starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        \"\"\"\n\n        def run():\n            self.start(\n                starter=starter, num_workers=num_workers, reset_config=reset_config\n            )\n\n        thread = threading.Thread(target=run, daemon=True)\n        thread.start()\n\n    def start(\n        self,\n        starter: Annotated[\n            Optional[\"BaseStarter\"],\n            Doc(\n                \"\"\"\n                    \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                    \"\"\"\n            ),\n        ] = None,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n        reset_config: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                    \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                    \"\"\"\n            ),\n        ] = True,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 `app.run_forever()`.\n\n        Args:\n            starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n            reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n        \"\"\"\n        self.app.run_forever(\n            starter=starter, num_workers=num_workers, reset_config=reset_config\n        )\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n        if self.test_config.global_config:\n            self.app.broker.storage.global_config.stop()\n\n        if self.test_config.storage:\n            self.app.broker.storage.stop()\n\n        if self.test_config.broker:\n            self.app.broker.stop()\n\n        if self.test_config.worker:\n            self.app.worker.stop()\n\n    def add_task(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n            kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`\n\n            timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncResult`.\n\n        Returns:\n            Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n        \"\"\"\n        if self.test_config.broker:\n            args, kwargs = args or (), kwargs or {}\n            return self.app.add_task(\n                *args,\n                task_name=task_name,\n                priority=priority,\n                timeout=timeout,\n                **kwargs\n            )\n        elif self.test_config.worker:\n            return self.app.worker.add(\n                name=task_name,\n                uuid=uuid4(),\n                priority=priority,\n                created_at=time(),\n                args=args or (),\n                kwargs=kwargs or {},\n            )\n        else:\n            print(\n                f\"[SyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0412\u043e\u0440\u043a\u0435\u0440 \u0438\u043b\u0438 \u0411\u0440\u043e\u043a\u0435\u0440!\"\n            )\n            return\n\n    def get(\n        self,\n        uuid: Annotated[\n            Union[UUID, str],\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[\"Task\", None]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n        Args:\n            uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n        Returns:\n            Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n        \"\"\"\n        if isinstance(uuid, str):\n            uuid = UUID(uuid)\n        if not self.test_config.broker:\n            print(f\"[SyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0411\u0440\u043e\u043a\u0435\u0440!\")\n            return\n        return self.app.broker.get(uuid=uuid)\n</code></pre>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase.__init__","title":"<code>__init__(app, name=None)</code>","text":"<p>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u0435\u0439\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.</p> required <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> Source code in <code>src/qtasks/tests/sync_testcase.py</code> <pre><code>def __init__(\n    self,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n                \"\"\"\n        ),\n    ],\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u0435\u0439\u0441.\n\n    Args:\n        app (QueueTasks): \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440.\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n    \"\"\"\n    super().__init__(app=app, name=name)\n</code></pre>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase.add_task","title":"<code>add_task(task_name, *args, priority=None, timeout=None, **kwargs)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>0</code>.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>{}</code></p> <code>{}</code> <code>timeout</code> <code>float</code> <p>\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>qtasks.results.SyncResult</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/tests/sync_testcase.py</code> <pre><code>def add_task(\n    self,\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n        kwargs (dict, optional): kwargs \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`\n\n        timeout (float, optional): \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.SyncResult`.\n\n    Returns:\n        Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n    \"\"\"\n    if self.test_config.broker:\n        args, kwargs = args or (), kwargs or {}\n        return self.app.add_task(\n            *args,\n            task_name=task_name,\n            priority=priority,\n            timeout=timeout,\n            **kwargs\n        )\n    elif self.test_config.worker:\n        return self.app.worker.add(\n            name=task_name,\n            uuid=uuid4(),\n            priority=priority,\n            created_at=time(),\n            args=args or (),\n            kwargs=kwargs or {},\n        )\n    else:\n        print(\n            f\"[SyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0412\u043e\u0440\u043a\u0435\u0440 \u0438\u043b\u0438 \u0411\u0440\u043e\u043a\u0435\u0440!\"\n        )\n        return\n</code></pre>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase.get","title":"<code>get(uuid)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID | str</code> <p>UUID \u0417\u0430\u0434\u0430\u0447\u0438.</p> required <p>Returns:</p> Type Description <code>Union[Task, None]</code> <p>Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.</p> Source code in <code>src/qtasks/tests/sync_testcase.py</code> <pre><code>def get(\n    self,\n    uuid: Annotated[\n        Union[UUID, str],\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[\"Task\", None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n    Args:\n        uuid (UUID|str): UUID \u0417\u0430\u0434\u0430\u0447\u0438.\n\n    Returns:\n        Task|None: \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 None.\n    \"\"\"\n    if isinstance(uuid, str):\n        uuid = UUID(uuid)\n    if not self.test_config.broker:\n        print(f\"[SyncTestCase: {self.name}] \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0411\u0440\u043e\u043a\u0435\u0440!\")\n        return\n    return self.app.broker.get(uuid=uuid)\n</code></pre>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase.start","title":"<code>start(starter=None, num_workers=4, reset_config=True)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 <code>app.run_forever()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>starter</code> <code>BaseStarter</code> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.starters.AsyncStarter</code>.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> Source code in <code>src/qtasks/tests/sync_testcase.py</code> <pre><code>def start(\n    self,\n    starter: Annotated[\n        Optional[\"BaseStarter\"],\n        Doc(\n            \"\"\"\n                \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                \"\"\"\n        ),\n    ] = None,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 `app.run_forever()`.\n\n    Args:\n        starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n    \"\"\"\n    self.app.run_forever(\n        starter=starter, num_workers=num_workers, reset_config=reset_config\n    )\n</code></pre>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase.start_in_background","title":"<code>start_in_background(starter=None, num_workers=4, reset_config=True)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c <code>app.run_forever()</code> \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.</p> <p>Parameters:</p> Name Type Description Default <code>starter</code> <code>BaseStarter</code> <p>\u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.starters.AsyncStarter</code>.</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> <code>reset_config</code> <code>bool</code> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.</p> <code>True</code> Source code in <code>src/qtasks/tests/sync_testcase.py</code> <pre><code>def start_in_background(\n    self,\n    starter: Annotated[\n        Optional[\"BaseStarter\"],\n        Doc(\n            \"\"\"\n                \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u0425\u0440\u0430\u043d\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n                \"\"\"\n        ),\n    ] = None,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n    reset_config: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n                \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `True`.\n                \"\"\"\n        ),\n    ] = True,\n):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c `app.run_forever()` \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.\n\n    Args:\n        starter (BaseStarter, optional): \u0421\u0442\u0430\u0440\u0442\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.starters.AsyncStarter`.\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        reset_config (bool, optional): \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config \u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: True.\n    \"\"\"\n\n    def run():\n        self.start(\n            starter=starter, num_workers=num_workers, reset_config=reset_config\n        )\n\n    thread = threading.Thread(target=run, daemon=True)\n    thread.start()\n</code></pre>"},{"location":"ru/api/tests/sync_testcase/#qtasks.tests.sync_testcase.SyncTestCase.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> Source code in <code>src/qtasks/tests/sync_testcase.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0435\u0439\u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\"\"\"\n    if self.test_config.global_config:\n        self.app.broker.storage.global_config.stop()\n\n    if self.test_config.storage:\n        self.app.broker.storage.stop()\n\n    if self.test_config.broker:\n        self.app.broker.stop()\n\n    if self.test_config.worker:\n        self.app.worker.stop()\n</code></pre>"},{"location":"ru/api/timers/async_timer/","title":"AsyncTimer","text":"<p>Async timer for scheduling tasks.</p>"},{"location":"ru/api/timers/async_timer/#qtasks.timers.async_timer.AsyncTimer","title":"<code>AsyncTimer</code>","text":"<p>               Bases: <code>BaseTimer</code></p> <p>\u0422\u0430\u0439\u043c\u0435\u0440, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 apscheduler, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/timers/async_timer/#qtasks.timers.async_timer.AsyncTimer--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.timers import AsyncTimer\n\napp = QueueTasks()\ntimer = AsyncTimer(app=app)\n\ntrigger = CronTrigger(second=\"*/10\") # \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u0430\u0436\u0434\u044b\u0435 10 \u0441\u0435\u043a\u0443\u043d\u0434\ntimer.add_task(task_name=\"test\", trigger=trigger)\n\ntimer.run_forever()\n</code></pre> Source code in <code>src/qtasks/timers/async_timer.py</code> <pre><code>class AsyncTimer(BaseTimer):\n    \"\"\"\n    \u0422\u0430\u0439\u043c\u0435\u0440, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 apscheduler, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.timers import AsyncTimer\n\n    app = QueueTasks()\n    timer = AsyncTimer(app=app)\n\n    trigger = CronTrigger(second=\"*/10\") # \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u0430\u0436\u0434\u044b\u0435 10 \u0441\u0435\u043a\u0443\u043d\u0434\n    timer.add_task(task_name=\"test\", trigger=trigger)\n\n    timer.run_forever()\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n                    \"\"\"\n            ),\n        ],\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.\n\n        Args:\n            app (QueueTasks): \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        \"\"\"\n        super().__init__(app=app, log=log, config=config)\n        self.app: \"QueueTasks\"\n\n        self.scheduler = AsyncIOScheduler()\n        self.tasks = {}\n\n    def add_task(\n        self,\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        trigger: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                    \u0422\u0440\u0438\u0433\u0433\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Job:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n        Returns:\n            Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.\n        \"\"\"\n        self.tasks[task_name] = trigger\n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0431\u0435\u0437 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n        return self.scheduler.add_job(\n            self._add_task_async,\n            trigger=trigger,\n            args=(task_name, priority, args, kwargs),\n        )\n\n    async def _add_task_async(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n        \"\"\"\n        task = await self.app.add_task(\n            *args, task_name=task_name, priority=priority, **kwargs\n        )\n        self.log.info(f\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 {task_name}: {task.uuid}...\")\n\n    def run_forever(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.\"\"\"\n        self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a...\")\n\n        try:\n            asyncio.run(\n                self._start_scheduler()\n            )  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435\n        except KeyboardInterrupt:\n            self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430...\")\n\n    async def _start_scheduler(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\"\"\"\n        self.scheduler.start()  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\n        while True:\n            await asyncio.sleep(1)  # \u0414\u0435\u0440\u0436\u0438\u043c \u0446\u0438\u043a\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\n</code></pre>"},{"location":"ru/api/timers/async_timer/#qtasks.timers.async_timer.AsyncTimer.__init__","title":"<code>__init__(app, log=None, config=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</p> required <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> Source code in <code>src/qtasks/timers/async_timer.py</code> <pre><code>def __init__(\n    self,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n                \"\"\"\n        ),\n    ],\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.\n\n    Args:\n        app (QueueTasks): \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n    \"\"\"\n    super().__init__(app=app, log=log, config=config)\n    self.app: \"QueueTasks\"\n\n    self.scheduler = AsyncIOScheduler()\n    self.tasks = {}\n</code></pre>"},{"location":"ru/api/timers/async_timer/#qtasks.timers.async_timer.AsyncTimer.add_task","title":"<code>add_task(*args, task_name, priority=None, timeout=None, trigger, **kwargs)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>0</code>.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Job</code> <p>Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.</p> Source code in <code>src/qtasks/timers/async_timer.py</code> <pre><code>def add_task(\n    self,\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    trigger: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n                \u0422\u0440\u0438\u0433\u0433\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ],\n) -&gt; Job:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n        kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n    Returns:\n        Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.\n    \"\"\"\n    self.tasks[task_name] = trigger\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0431\u0435\u0437 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n    return self.scheduler.add_job(\n        self._add_task_async,\n        trigger=trigger,\n        args=(task_name, priority, args, kwargs),\n    )\n</code></pre>"},{"location":"ru/api/timers/async_timer/#qtasks.timers.async_timer.AsyncTimer.run_forever","title":"<code>run_forever()</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.</p> Source code in <code>src/qtasks/timers/async_timer.py</code> <pre><code>def run_forever(self):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.\"\"\"\n    self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a...\")\n\n    try:\n        asyncio.run(\n            self._start_scheduler()\n        )  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435\n    except KeyboardInterrupt:\n        self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430...\")\n</code></pre>"},{"location":"ru/api/timers/basetimer/","title":"BaseTimer - \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0422\u0430\u0439\u043c\u0435\u0440","text":"<p>Base timer class.</p>"},{"location":"ru/api/timers/basetimer/#qtasks.timers.base.BaseTimer","title":"<code>BaseTimer</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseTimer</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0422\u0430\u0439\u043c\u0435\u0440\u043e\u0432.</p>"},{"location":"ru/api/timers/basetimer/#qtasks.timers.base.BaseTimer--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.timers.base import BaseTimer\n\nclass MyTimer(BaseTimer):\n    def __init__(self, app: QueueTasks):\n        super().__init__(app=app)\n        pass\n</code></pre> Source code in <code>src/qtasks/timers/base.py</code> <pre><code>class BaseTimer(ABC):\n    \"\"\"\n    `BaseTimer` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0422\u0430\u0439\u043c\u0435\u0440\u043e\u0432.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.timers.base import BaseTimer\n\n    class MyTimer(BaseTimer):\n        def __init__(self, app: QueueTasks):\n            super().__init__(app=app)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    \u0417\u0430\u0434\u0430\u0447\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{qtasks.QueueTasks}` \u0438\u043b\u0438 `{qtasks.asyncio.QueueTasks}`.\n                    \"\"\"\n            ),\n        ],\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.\n\n        Args:\n            app (QueueTasks): \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        \"\"\"\n        self.app = app\n        self.config = config or self.app.config\n        self.log = (\n            log.with_subname(\"Timer\")\n            if log\n            else Logger(\n                name=self.app.name,\n                subname=\"Timer\",\n                default_level=self.config.logs_default_level_server,\n                format=self.config.logs_format,\n            )\n        )\n        self.scheduler = AsyncIOScheduler()\n\n    @abstractmethod\n    def add_task(\n        self,\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        trigger: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                    \u0422\u0440\u0438\u0433\u0433\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Union[Any, None]:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            trigger (Any, optional): \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n        Returns:\n            Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.\n        \"\"\"\n        pass\n\n    def run_forever(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.\"\"\"\n        pass\n</code></pre>"},{"location":"ru/api/timers/basetimer/#qtasks.timers.base.BaseTimer.__init__","title":"<code>__init__(app, log=None, config=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</p> required <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> Source code in <code>src/qtasks/timers/base.py</code> <pre><code>def __init__(\n    self,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                \u0417\u0430\u0434\u0430\u0447\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{qtasks.QueueTasks}` \u0438\u043b\u0438 `{qtasks.asyncio.QueueTasks}`.\n                \"\"\"\n        ),\n    ],\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.\n\n    Args:\n        app (QueueTasks): \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n    \"\"\"\n    self.app = app\n    self.config = config or self.app.config\n    self.log = (\n        log.with_subname(\"Timer\")\n        if log\n        else Logger(\n            name=self.app.name,\n            subname=\"Timer\",\n            default_level=self.config.logs_default_level_server,\n            format=self.config.logs_format,\n        )\n    )\n    self.scheduler = AsyncIOScheduler()\n</code></pre>"},{"location":"ru/api/timers/basetimer/#qtasks.timers.base.BaseTimer.add_task","title":"<code>add_task(*args, task_name, priority=None, timeout=None, trigger, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>trigger</code> <code>Any</code> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>0</code>.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[Any, None]</code> <p>Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.</p> Source code in <code>src/qtasks/timers/base.py</code> <pre><code>@abstractmethod\ndef add_task(\n    self,\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    trigger: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n                \u0422\u0440\u0438\u0433\u0433\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ],\n) -&gt; Union[Any, None]:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        trigger (Any, optional): \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n        kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n    Returns:\n        Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/timers/basetimer/#qtasks.timers.base.BaseTimer.run_forever","title":"<code>run_forever()</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.</p> Source code in <code>src/qtasks/timers/base.py</code> <pre><code>def run_forever(self):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/timers/sync_timer/","title":"SyncTimer","text":"<p>Sync timer for scheduling tasks.</p>"},{"location":"ru/api/timers/sync_timer/#qtasks.timers.sync_timer.SyncTimer","title":"<code>SyncTimer</code>","text":"<p>               Bases: <code>BaseTimer</code></p> <p>\u0422\u0430\u0439\u043c\u0435\u0440, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 apscheduler, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"ru/api/timers/sync_timer/#qtasks.timers.sync_timer.SyncTimer--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.timers import SyncTimer\n\napp = QueueTasks()\ntimer = SyncTimer(app=app)\n\ntrigger = CronTrigger(second=\"*/10\") # \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u0430\u0436\u0434\u044b\u0435 10 \u0441\u0435\u043a\u0443\u043d\u0434\ntimer.add_task(task_name=\"test\", trigger=trigger)\n\ntimer.run_forever()\n</code></pre> Source code in <code>src/qtasks/timers/sync_timer.py</code> <pre><code>class SyncTimer(BaseTimer):\n    \"\"\"\n    \u0422\u0430\u0439\u043c\u0435\u0440, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 apscheduler, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.timers import SyncTimer\n\n    app = QueueTasks()\n    timer = SyncTimer(app=app)\n\n    trigger = CronTrigger(second=\"*/10\") # \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u0430\u0436\u0434\u044b\u0435 10 \u0441\u0435\u043a\u0443\u043d\u0434\n    timer.add_task(task_name=\"test\", trigger=trigger)\n\n    timer.run_forever()\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        app: Annotated[\n            \"QueueTasks\",\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n                    \"\"\"\n            ),\n        ],\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.\n\n        Args:\n            app (QueueTasks): \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n        \"\"\"\n        super().__init__(app=app, log=log, config=config)\n        self.app: \"QueueTasks\"\n        self.scheduler = BackgroundScheduler()\n        self.tasks = {}\n\n    def add_task(\n        self,\n        *args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ],\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ] = None,\n        timeout: Annotated[\n            Optional[float],\n            Doc(\n                \"\"\"\n                    \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                    \"\"\"\n            ),\n        ] = None,\n        trigger: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                    \u0422\u0440\u0438\u0433\u0433\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        **kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ]\n    ) -&gt; Job:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n        Returns:\n            Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.\n        \"\"\"\n        self.tasks[task_name] = trigger\n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443\n        return self.scheduler.add_job(\n            self._add_task_sync,\n            trigger=trigger,\n            args=(task_name, priority, args, kwargs),\n        )\n\n    def _add_task_sync(\n        self,\n        task_name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `0`.\n                    \"\"\"\n            ),\n        ] = 0,\n        args: Annotated[\n            Optional[tuple],\n            Doc(\n                \"\"\"\n                    args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                    \"\"\"\n            ),\n        ] = None,\n        kwargs: Annotated[\n            Optional[dict],\n            Doc(\n                \"\"\"\n                    kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e.\n\n        Args:\n            task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n            args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n            kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n        \"\"\"\n        task = self.app.add_task(\n            *args, task_name=task_name, priority=priority, **kwargs\n        )\n        self.log.info(f\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 {task_name}: {task.uuid}...\")\n\n    def run_forever(self):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.\"\"\"\n        self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a...\")\n\n        try:\n            self.scheduler.start()  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\n            while True:\n                sleep(1)\n                pass  # \u0414\u0435\u0440\u0436\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\n        except KeyboardInterrupt:\n            self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430...\")\n            self.scheduler.shutdown()\n</code></pre>"},{"location":"ru/api/timers/sync_timer/#qtasks.timers.sync_timer.SyncTimer.__init__","title":"<code>__init__(app, log=None, config=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QueueTasks</code> <p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.</p> required <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.logs.Logger</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.configs.config.QueueConfig</code>.</p> <code>None</code> Source code in <code>src/qtasks/timers/sync_timer.py</code> <pre><code>def __init__(\n    self,\n    app: Annotated[\n        \"QueueTasks\",\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n                \"\"\"\n        ),\n    ],\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0439\u043c\u0435\u0440\u0430.\n\n    Args:\n        app (QueueTasks): \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n    \"\"\"\n    super().__init__(app=app, log=log, config=config)\n    self.app: \"QueueTasks\"\n    self.scheduler = BackgroundScheduler()\n    self.tasks = {}\n</code></pre>"},{"location":"ru/api/timers/sync_timer/#qtasks.timers.sync_timer.SyncTimer.add_task","title":"<code>add_task(*args, task_name, priority=None, timeout=None, trigger, **kwargs)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <p>Parameters:</p> Name Type Description Default <code>task_name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>0</code>.</p> <code>None</code> <code>args</code> <code>tuple</code> <p>args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>()</code>.</p> <code>()</code> <code>kwargs</code> <code>dict</code> <p>kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>{}</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Job</code> <p>Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.</p> Source code in <code>src/qtasks/timers/sync_timer.py</code> <pre><code>def add_task(\n    self,\n    *args: Annotated[\n        Optional[tuple],\n        Doc(\n            \"\"\"\n                args \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `()`.\n                \"\"\"\n        ),\n    ],\n    task_name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430 \u0443 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ] = None,\n    timeout: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n                \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 `qtasks.results.AsyncTask`.\n                \"\"\"\n        ),\n    ] = None,\n    trigger: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n                \u0422\u0440\u0438\u0433\u0433\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    **kwargs: Annotated[\n        Optional[dict],\n        Doc(\n            \"\"\"\n                kwargs \u0437\u0430\u0434\u0430\u0447\u0438.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `{}`.\n                \"\"\"\n        ),\n    ]\n) -&gt; Job:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n    Args:\n        task_name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int, optional): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `0`.\n        args (tuple, optional): args \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `()`.\n        kwargs (dict, optional): kwags \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `{}`.\n\n    Returns:\n        Any|None: \u0417\u0430\u0434\u0430\u0447\u0430.\n    \"\"\"\n    self.tasks[task_name] = trigger\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443\n    return self.scheduler.add_job(\n        self._add_task_sync,\n        trigger=trigger,\n        args=(task_name, priority, args, kwargs),\n    )\n</code></pre>"},{"location":"ru/api/timers/sync_timer/#qtasks.timers.sync_timer.SyncTimer.run_forever","title":"<code>run_forever()</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.</p> Source code in <code>src/qtasks/timers/sync_timer.py</code> <pre><code>def run_forever(self):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0422\u0430\u0439\u043c\u0435\u0440\u0430.\"\"\"\n    self.log.info(\"\u0417\u0430\u043f\u0443\u0441\u043a...\")\n\n    try:\n        self.scheduler.start()  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\n        while True:\n            sleep(1)\n            pass  # \u0414\u0435\u0440\u0436\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\n    except KeyboardInterrupt:\n        self.log.info(\"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430...\")\n        self.scheduler.shutdown()\n</code></pre>"},{"location":"ru/api/workers/async_worker/","title":"AsyncWorker","text":"<p>Init module for async worker.</p>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker","title":"<code>AsyncWorker</code>","text":"<p>               Bases: <code>BaseWorker</code>, <code>AsyncPluginMixin</code></p> <p>\u0412\u043e\u0440\u043a\u0435\u0440, \u041f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u0411\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0438\u0445.</p>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.workers import AsyncWorker\n\nworker = AsyncWorker()\napp = QueueTasks(worker=worker)\n</code></pre> Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>class AsyncWorker(BaseWorker, AsyncPluginMixin):\n    \"\"\"\n    \u0412\u043e\u0440\u043a\u0435\u0440, \u041f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u0411\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0438\u0445.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.workers import AsyncWorker\n\n    worker = AsyncWorker()\n    app = QueueTasks(worker=worker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n        \"\"\"\n        super().__init__(name=name, broker=broker, log=log, config=config, events=events)\n        self.events = self.events or AsyncEvents()\n        self.broker = broker or AsyncRedisBroker(\n            name=self.name, log=self.log, config=self.config\n        )\n        self.queue = asyncio.PriorityQueue()\n\n        self._tasks: Dict[str, TaskExecSchema] = {}\n        self._stop_event: Optional[asyncio.Event] = None\n        self.semaphore = asyncio.Semaphore(self.config.max_tasks_process)\n        self.condition: Optional[asyncio.Condition] = None\n\n        self.task_executor = AsyncTaskExecutor\n\n    async def worker(\n        self,\n        number: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            number (int): \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        await self.events.fire(\"worker_running\", worker=self, number=number)\n\n        try:\n            while not self._stop_event.is_set():\n                async with self.condition:\n                    while self.queue.empty():\n                        await self.condition.wait()\n\n                task_broker: Union[TaskPrioritySchema, None] = await self.queue.get()\n                if task_broker is None:\n                    break\n                asyncio.create_task(self._execute_task(task_broker))\n        finally:\n            await self.events.fire(\"worker_stopping\", worker=self, number=number)\n\n    async def _execute_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        async with self.semaphore:\n            model = TaskStatusProcessSchema(\n                task_name=task_broker.name,\n                priority=task_broker.priority,\n                created_at=task_broker.created_at,\n                updated_at=time(),\n                args=task_broker.args,\n                kwargs=task_broker.kwargs,\n            )\n\n            task_func = await self._task_exists(task_broker=task_broker)\n            if not task_func:\n                self.queue.task_done()\n                return\n\n            new_model = await self._plugin_trigger(\n                \"worker_execute_before\",\n                worker=self,\n                task_broker=task_broker,\n                task_func=task_func,\n                model=model,\n                return_last=True\n            )\n            if new_model:\n                model = new_model.get(\"model\", model)\n\n            await self.broker.update(\n                name=f\"{self.name}:{task_broker.uuid}\", mapping=asdict(model)\n            )\n\n            await self.events.fire(\"task_running\", worker=self, task_func=task_func, task_broker=task_broker)\n            model = await self._run_task(task_func, task_broker)\n            await self.events.fire(\"task_stopping\", worker=self, task_func=task_func, task_broker=task_broker, model=model)\n\n            await self.remove_finished_task(task_func=task_func, task_broker=task_broker, model=model)\n\n            await self._plugin_trigger(\"worker_execute_after\", task_func=task_func, task_broker=task_broker, model=model)\n\n            self.queue.task_done()\n\n    async def add(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        uuid: Annotated[\n            UUID,\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        created_at: Annotated[\n            float,\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n                    \"\"\"\n            ),\n        ],\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ],\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            uuid (UUID): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n            created_at (float): \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n            args (tuple): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_data = await self._plugin_trigger(\n            \"worker_add\",\n            worker=self,\n            task_name=name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_data:\n            name = new_data.get(\"name\", name)\n            uuid = new_data.get(\"uuid\", uuid)\n            priority = new_data.get(\"priority\", priority)\n            args = new_data.get(\"args\", args)\n            kwargs = new_data.get(\"kw\", kwargs)\n            created_at = new_data.get(\"created_at\", created_at)\n\n        model = TaskPrioritySchema(\n            priority=priority,\n            uuid=uuid,\n            name=name,\n            args=list(args),\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n        async with self.condition:\n            await self.queue.put(model)\n            self.condition.notify_all()\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    async def start(\n        self,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        \"\"\"\n        self.num_workers = num_workers\n\n        if self.condition is None:\n            self.condition = asyncio.Condition()\n        if self._stop_event is None:\n            self._stop_event = asyncio.Event()\n        await self._plugin_trigger(\"worker_start\", worker=self)\n\n        # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432\n        loop = asyncio.get_event_loop()\n        workers = [\n            loop.create_task(self.worker(number))\n            for number in range(self.num_workers)\n        ]\n        await self._stop_event.wait()  # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n\n        # \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432\n        for worker_task in workers:\n            worker_task.cancel()\n        await asyncio.gather(*workers, return_exceptions=True)\n\n    async def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b.\"\"\"\n        await self._plugin_trigger(\"worker_stop\", worker=self)\n        self._stop_event.set()\n\n    def update_config(\n        self,\n        config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0441\u0435\u043c\u0430\u0444\u043e\u0440\u0443.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n        \"\"\"\n        self.config = config\n        self.semaphore = Semaphore(config.max_tasks_process)\n\n    async def _run_task(\n        self, task_func: TaskExecSchema, task_broker: TaskPrioritySchema\n    ) -&gt; Union[TaskStatusSuccessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema]:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `qtasks.schemas.TaskExecSchema`.\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `qtasks.schemas.TaskPrioritySchema`.\n\n        Returns:\n            Any: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        self.log.info(\n            f\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u044e \u0437\u0430\u0434\u0430\u0447\u0443 {task_broker.uuid} ({task_broker.name}), \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442: {task_broker.priority}\"\n        )\n        new_data = await self._plugin_trigger(\n            \"worker_run_task_before\",\n            worker=self,\n            task_func=task_func,\n            task_broker=task_broker,\n            return_last=True\n        )\n        if new_data:\n            task_func = new_data.get(\"task_func\", task_func)\n            task_broker = new_data.get(\"task_broker\", task_broker)\n\n        if self.task_middlewares_before:\n            task_func.add_middlewares_before(self.task_middlewares_before)\n        if self.task_middlewares_after:\n            task_func.add_middlewares_after(self.task_middlewares_after)\n\n        executor = task_func.executor if task_func.executor is not None else self.task_executor\n        executor = executor(\n            task_func=task_func,\n            task_broker=task_broker,\n            log=self.log,\n            plugins=self.plugins,\n        )\n\n        try:\n            result = await executor.execute()\n            return await self._task_success(result, task_func, task_broker)\n        except TaskCancelError as e:\n            return await self._task_cancel(e, task_func, task_broker)\n        except BaseException as e:\n            return await self._task_error(e, task_func, task_broker)\n\n    async def _task_success(self, result: Any, task_func: TaskExecSchema, task_broker: TaskPrioritySchema) -&gt; None:\n        \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        model = TaskStatusSuccessSchema(\n            task_name=task_func.name,\n            priority=task_func.priority,\n            returning=result,\n            created_at=task_broker.created_at,\n            updated_at=time(),\n            args=task_broker.args,\n            kwargs=task_broker.kwargs,\n        )\n        self.log.info(\n            f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {result}\"\n        )\n        return model\n\n    async def _task_error(self, e, task_func: TaskExecSchema, task_broker: TaskPrioritySchema) -&gt; None:\n        \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.\"\"\"\n        trace = traceback.format_exc()\n\n        # plugin: retry\n        plugin_result = None\n\n        should_retry = (\n            task_func.retry and (\n                not task_func.retry_on_exc or type(e) in task_func.retry_on_exc\n            )\n        )\n        if should_retry and task_func.retry:\n                plugin_result = await self._plugin_trigger(\n                    \"worker_task_error_retry\",\n                    broker=self.broker,\n                    task_func=task_func,\n                    task_broker=task_broker,\n                    trace=trace,\n                )\n\n        if not plugin_result:\n            model = TaskStatusErrorSchema(\n                task_name=task_func.name,\n                priority=task_func.priority,\n                traceback=trace,\n                created_at=task_broker.created_at,\n                updated_at=time(),\n                args=task_broker.args,\n                kwargs=task_broker.kwargs,\n            )\n        else:\n            model: TaskStatusErrorSchema = plugin_result.get(\"model\", model)\n\n        if plugin_result and model.retry != 0:\n            self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0430.\")\n        else:\n            self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n        return model\n\n    async def _task_cancel(self, e, task_func: TaskExecSchema, task_broker: TaskPrioritySchema) -&gt; None:\n        \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        model = TaskStatusCancelSchema(\n            task_name=task_func.name,\n            priority=task_func.priority,\n            cancel_reason=str(e),\n            created_at=task_broker.created_at,\n            updated_at=time(),\n        )\n        self.log.info(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0431\u044b\u043b\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430 \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435: {e}\")\n        return model\n\n    async def _task_exists(\n        self, task_broker: TaskPrioritySchema\n    ) -&gt; Union[TaskExecSchema, None]:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n\n        Returns:\n            TaskExecSchema|None: \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema` \u0438\u043b\u0438 `None`.\n        \"\"\"\n        try:\n            return self._tasks[task_broker.name]\n        except KeyError as e:\n            self.log.warning(f\"\u0417\u0430\u0434\u0430\u0447\u0438 {e.args[0]} \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\")\n            trace = traceback.format_exc()\n            model = TaskStatusErrorSchema(\n                task_name=task_broker.name,\n                priority=task_broker.priority,\n                traceback=trace,\n                created_at=task_broker.created_at,\n                updated_at=time(),\n            )\n            await self.remove_finished_task(task_func=None, task_broker=task_broker, model=model)\n            self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.name} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n            return None\n\n    async def remove_finished_task(\n        self,\n        task_func: Annotated[\n            Optional[TaskExecSchema],\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            )\n        ],\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_func (TaskExecSchema, optional): \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema | TaskStatusCancelSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_data = await self._plugin_trigger(\n            \"worker_remove_finished_task\",\n            worker=self,\n            broker=self.broker,\n            task_func=task_func,\n            task_broker=task_broker,\n            model=model,\n            return_last=True\n        )\n        if new_data:\n            task_broker, model = new_data.get(\"task_broker\", task_broker), new_data.get(\"model\", model)\n        await self.broker.remove_finished_task(task_broker, model)\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        self.add_plugin(AsyncRetryPlugin(), trigger_names=[\"worker_task_error_retry\"])\n        self.add_plugin(AsyncPydanticWrapperPlugin(), trigger_names=[\"task_executor_args_replace\", \"task_executor_after_execute_result_replace\"])\n        self.add_plugin(AsyncDependsPlugin(), trigger_names=[\"task_executor_args_replace\"])\n        self.add_plugin(AsyncStatePlugin(), trigger_names=[\"task_executor_args_replace\"])\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.__init__","title":"<code>__init__(name='QueueTasks', broker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>broker</code> <code>BaseBroker</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.AsyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.AsyncRedisBroker`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.AsyncEvents`.\n    \"\"\"\n    super().__init__(name=name, broker=broker, log=log, config=config, events=events)\n    self.events = self.events or AsyncEvents()\n    self.broker = broker or AsyncRedisBroker(\n        name=self.name, log=self.log, config=self.config\n    )\n    self.queue = asyncio.PriorityQueue()\n\n    self._tasks: Dict[str, TaskExecSchema] = {}\n    self._stop_event: Optional[asyncio.Event] = None\n    self.semaphore = asyncio.Semaphore(self.config.max_tasks_process)\n    self.condition: Optional[asyncio.Condition] = None\n\n    self.task_executor = AsyncTaskExecutor\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.add","title":"<code>add(name, uuid, priority, created_at, args, kwargs)</code>  <code>async</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>uuid</code> <code>UUID</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>created_at</code> <code>float</code> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.</p> required <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> required <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> required Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>async def add(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    uuid: Annotated[\n        UUID,\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    created_at: Annotated[\n        float,\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n                \"\"\"\n        ),\n    ],\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ],\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        uuid (UUID): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        created_at (float): \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n        args (tuple): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_data = await self._plugin_trigger(\n        \"worker_add\",\n        worker=self,\n        task_name=name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kw=kwargs,\n        created_at=created_at,\n        return_last=True\n    )\n    if new_data:\n        name = new_data.get(\"name\", name)\n        uuid = new_data.get(\"uuid\", uuid)\n        priority = new_data.get(\"priority\", priority)\n        args = new_data.get(\"args\", args)\n        kwargs = new_data.get(\"kw\", kwargs)\n        created_at = new_data.get(\"created_at\", created_at)\n\n    model = TaskPrioritySchema(\n        priority=priority,\n        uuid=uuid,\n        name=name,\n        args=list(args),\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n    async with self.condition:\n        await self.queue.put(model)\n        self.condition.notify_all()\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    self.add_plugin(AsyncRetryPlugin(), trigger_names=[\"worker_task_error_retry\"])\n    self.add_plugin(AsyncPydanticWrapperPlugin(), trigger_names=[\"task_executor_args_replace\", \"task_executor_after_execute_result_replace\"])\n    self.add_plugin(AsyncDependsPlugin(), trigger_names=[\"task_executor_args_replace\"])\n    self.add_plugin(AsyncStatePlugin(), trigger_names=[\"task_executor_args_replace\"])\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.remove_finished_task","title":"<code>remove_finished_task(task_func, task_broker, model)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_func</code> <code>TaskExecSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema | TaskStatusCancelSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>async def remove_finished_task(\n    self,\n    task_func: Annotated[\n        Optional[TaskExecSchema],\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        )\n    ],\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_func (TaskExecSchema, optional): \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema | TaskStatusCancelSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_data = await self._plugin_trigger(\n        \"worker_remove_finished_task\",\n        worker=self,\n        broker=self.broker,\n        task_func=task_func,\n        task_broker=task_broker,\n        model=model,\n        return_last=True\n    )\n    if new_data:\n        task_broker, model = new_data.get(\"task_broker\", task_broker), new_data.get(\"model\", model)\n    await self.broker.remove_finished_task(task_broker, model)\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.start","title":"<code>start(num_workers=4)</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>async def start(\n    self,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n    \"\"\"\n    self.num_workers = num_workers\n\n    if self.condition is None:\n        self.condition = asyncio.Condition()\n    if self._stop_event is None:\n        self._stop_event = asyncio.Event()\n    await self._plugin_trigger(\"worker_start\", worker=self)\n\n    # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432\n    loop = asyncio.get_event_loop()\n    workers = [\n        loop.create_task(self.worker(number))\n        for number in range(self.num_workers)\n    ]\n    await self._stop_event.wait()  # \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0433\u043d\u0430\u043b\u0430 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n\n    # \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432\n    for worker_task in workers:\n        worker_task.cancel()\n    await asyncio.gather(*workers, return_exceptions=True)\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b.</p> Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>async def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b.\"\"\"\n    await self._plugin_trigger(\"worker_stop\", worker=self)\n    self._stop_event.set()\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.update_config","title":"<code>update_config(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0441\u0435\u043c\u0430\u0444\u043e\u0440\u0443.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433.</p> required Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>def update_config(\n    self,\n    config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0441\u0435\u043c\u0430\u0444\u043e\u0440\u0443.\n\n    Args:\n        config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n    \"\"\"\n    self.config = config\n    self.semaphore = Semaphore(config.max_tasks_process)\n</code></pre>"},{"location":"ru/api/workers/async_worker/#qtasks.workers.async_worker.AsyncWorker.worker","title":"<code>worker(number)</code>  <code>async</code>","text":"<p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>\u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/workers/async_worker.py</code> <pre><code>async def worker(\n    self,\n    number: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        number (int): \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    await self.events.fire(\"worker_running\", worker=self, number=number)\n\n    try:\n        while not self._stop_event.is_set():\n            async with self.condition:\n                while self.queue.empty():\n                    await self.condition.wait()\n\n            task_broker: Union[TaskPrioritySchema, None] = await self.queue.get()\n            if task_broker is None:\n                break\n            asyncio.create_task(self._execute_task(task_broker))\n    finally:\n        await self.events.fire(\"worker_stopping\", worker=self, number=number)\n</code></pre>"},{"location":"ru/api/workers/baseworker/","title":"BaseWorker - \u041f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0412\u043e\u0440\u043a\u0435\u0440","text":"<p>Base worker class.</p>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker","title":"<code>BaseWorker</code>","text":"<p>               Bases: <code>ABC</code></p> <p><code>BaseWorker</code> - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0412\u043e\u0440\u043a\u0435\u0440\u043e\u0432.</p>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker--example","title":"Example","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.workers.base import BaseWorker\n\nclass MyWorker(BaseWorker):\n    def __init__(self, name: str = None, broker: BaseBroker = None):\n        super().__init__(name=name, broker=broker)\n        pass\n</code></pre> Source code in <code>src/qtasks/workers/base.py</code> <pre><code>class BaseWorker(ABC):\n    \"\"\"\n    `BaseWorker` - \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u0412\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n    ## Example\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.workers.base import BaseWorker\n\n    class MyWorker(BaseWorker):\n        def __init__(self, name: str = None, broker: BaseBroker = None):\n            super().__init__(name=name, broker=broker)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0412\u043e\u0440\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440 `qtasks.brokers.base.BaseBroker`.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        \"\"\"\n        self.name = name\n        self.broker = broker\n        self.config = config or QueueConfig()\n\n        self.log = (\n            log.with_subname(\"Worker\")\n            if log\n            else Logger(\n                name=self.name,\n                subname=\"Worker\",\n                default_level=self.config.logs_default_level_server,\n                format=self.config.logs_format,\n            )\n        )\n\n        self._tasks: Dict[str, TaskExecSchema] = {}\n        self.events: \"BaseEvents\" = events\n        self.task_middlewares_before: List[TaskMiddleware] = []\n        self.task_middlewares_after: List[TaskMiddleware] = []\n\n        self.task_executor: Type[\"BaseTaskExecutor\"] = None\n\n        self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n        self.num_workers = 0\n\n        self.init_plugins()\n\n    @abstractmethod\n    def add(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        uuid: Annotated[\n            UUID,\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        created_at: Annotated[\n            float,\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n                    \"\"\"\n            ),\n        ],\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ],\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            uuid (UUID): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n            created_at (float): \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n            args (tuple): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def start(\n        self,\n        num_workers: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n        Args:\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n        pass\n\n    def update_config(\n        self,\n        config: Annotated[\n            QueueConfig,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n        Args:\n            config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n        \"\"\"\n        self.config = config\n        return\n\n    def add_plugin(\n        self,\n        plugin: Annotated[\n            \"BasePlugin\",\n            Doc(\n                \"\"\"\n                    \u041f\u043b\u0430\u0433\u0438\u043d.\n                    \"\"\"\n            ),\n        ],\n        trigger_names: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                    \"\"\"\n            ),\n        ] = None,\n    ) -&gt; None:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n        Args:\n            plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n            trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n        \"\"\"\n        trigger_names = trigger_names or [\"Globals\"]\n\n        for name in trigger_names:\n            if name not in self.plugins:\n                self.plugins.update({name: [plugin]})\n            else:\n                self.plugins[name].append(plugin)\n        return\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        pass\n</code></pre>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker.__init__","title":"<code>__init__(name=None, broker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>broker</code> <code>BaseBroker</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.</p> <code>None</code> Source code in <code>src/qtasks/workers/base.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0412\u043e\u0440\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440 `qtasks.brokers.base.BaseBroker`.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: None.\n    \"\"\"\n    self.name = name\n    self.broker = broker\n    self.config = config or QueueConfig()\n\n    self.log = (\n        log.with_subname(\"Worker\")\n        if log\n        else Logger(\n            name=self.name,\n            subname=\"Worker\",\n            default_level=self.config.logs_default_level_server,\n            format=self.config.logs_format,\n        )\n    )\n\n    self._tasks: Dict[str, TaskExecSchema] = {}\n    self.events: \"BaseEvents\" = events\n    self.task_middlewares_before: List[TaskMiddleware] = []\n    self.task_middlewares_after: List[TaskMiddleware] = []\n\n    self.task_executor: Type[\"BaseTaskExecutor\"] = None\n\n    self.plugins: Dict[str, List[\"BasePlugin\"]] = {}\n\n    self.num_workers = 0\n\n    self.init_plugins()\n</code></pre>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker.add","title":"<code>add(name, uuid, priority, created_at, args, kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>uuid</code> <code>UUID</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>created_at</code> <code>float</code> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.</p> required <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> required <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> required Source code in <code>src/qtasks/workers/base.py</code> <pre><code>@abstractmethod\ndef add(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    uuid: Annotated[\n        UUID,\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    created_at: Annotated[\n        float,\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n                \"\"\"\n        ),\n    ],\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ],\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        uuid (UUID): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        created_at (float): \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n        args (tuple): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker.add_plugin","title":"<code>add_plugin(plugin, trigger_names=None)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.</p> <p>Parameters:</p> Name Type Description Default <code>plugin</code> <code>BasePlugin</code> <p>\u041f\u043b\u0430\u0433\u0438\u043d</p> required <code>trigger_names</code> <code>List[str]</code> <p>\u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 <code>Globals</code>.</p> <code>None</code> Source code in <code>src/qtasks/workers/base.py</code> <pre><code>def add_plugin(\n    self,\n    plugin: Annotated[\n        \"BasePlugin\",\n        Doc(\n            \"\"\"\n                \u041f\u043b\u0430\u0433\u0438\u043d.\n                \"\"\"\n        ),\n    ],\n    trigger_names: Annotated[\n        Optional[List[str]],\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n                \"\"\"\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d \u0432 \u043a\u043b\u0430\u0441\u0441.\n\n    Args:\n        plugin (BasePlugin): \u041f\u043b\u0430\u0433\u0438\u043d\n        trigger_names (List[str], optional): \u0418\u043c\u044f \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0432 `Globals`.\n    \"\"\"\n    trigger_names = trigger_names or [\"Globals\"]\n\n    for name in trigger_names:\n        if name not in self.plugins:\n            self.plugins.update({name: [plugin]})\n        else:\n            self.plugins[name].append(plugin)\n    return\n</code></pre>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/workers/base.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker.start","title":"<code>start(num_workers=None)</code>  <code>abstractmethod</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0447\u0435\u0440\u0435\u0437 <code>run_forever</code>.</p> <p>Parameters:</p> Name Type Description Default <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>None</code> Source code in <code>src/qtasks/workers/base.py</code> <pre><code>@abstractmethod\ndef start(\n    self,\n    num_workers: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u0447\u0435\u0440\u0435\u0437 `run_forever`.\n\n    Args:\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker.stop","title":"<code>stop()</code>  <code>abstractmethod</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>run_forever</code>.</p> Source code in <code>src/qtasks/workers/base.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c `QueueTasks` \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `run_forever`.\"\"\"\n    pass\n</code></pre>"},{"location":"ru/api/workers/baseworker/#qtasks.workers.base.BaseWorker.update_config","title":"<code>update_config(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433.</p> required Source code in <code>src/qtasks/workers/base.py</code> <pre><code>def update_config(\n    self,\n    config: Annotated[\n        QueueConfig,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.\n\n    Args:\n        config (QueueConfig): \u041a\u043e\u043d\u0444\u0438\u0433.\n    \"\"\"\n    self.config = config\n    return\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/","title":"SyncThreadWorker","text":"<p>Init module for sync worker.</p>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker","title":"<code>SyncThreadWorker</code>","text":"<p>               Bases: <code>BaseWorker</code>, <code>SyncPluginMixin</code></p> <p>\u0412\u043e\u0440\u043a\u0435\u0440, \u041f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u0411\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0438\u0445.</p>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker--_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from qtasks import QueueTasks\nfrom qtasks.workers import SyncThreadWorker\n\nworker = SyncThreadWorker()\napp = QueueTasks(worker=worker)\n</code></pre> Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>class SyncThreadWorker(BaseWorker, SyncPluginMixin):\n    \"\"\"\n    \u0412\u043e\u0440\u043a\u0435\u0440, \u041f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u0437 \u0411\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0438\u0445.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.workers import SyncThreadWorker\n\n    worker = SyncThreadWorker()\n    app = QueueTasks(worker=worker)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u043c.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                    \"\"\"\n            ),\n        ] = \"QueueTasks\",\n        broker: Annotated[\n            Optional[\"BaseBroker\"],\n            Doc(\n                \"\"\"\n                    \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.SyncRedisBroker`.\n                    \"\"\"\n            ),\n        ] = None,\n        log: Annotated[\n            Optional[Logger],\n            Doc(\n                \"\"\"\n                    \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                    \"\"\"\n            ),\n        ] = None,\n        config: Annotated[\n            Optional[QueueConfig],\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                    \"\"\"\n            ),\n        ] = None,\n        events: Annotated[\n            Optional[\"BaseEvents\"],\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n\n        Args:\n            name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n            broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n        \"\"\"\n        super().__init__(name=name, broker=broker, log=log, config=config, events=events)\n        self.events = self.events or SyncEvents()\n        self.broker = broker or SyncRedisBroker(\n            name=self.name, log=self.log, config=self.config\n        )\n        self.queue = PriorityQueue()\n        self._tasks: Dict[str, TaskExecSchema] = {}\n        self._stop_event = Event()\n        self.lock = Lock()\n        self.threads: List[Thread] = []\n        self.semaphore = Semaphore(self.config.max_tasks_process)\n\n        self.task_executor = SyncTaskExecutor\n\n    def worker(\n        self,\n        number: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            number (int): \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n        \"\"\"\n        self.events.fire(\"worker_running\", worker=self, number=number)\n\n        try:\n            while not self._stop_event.is_set():\n                with self.lock:\n                    if self.queue.empty():\n                        sleep(0.1)\n                        continue\n                    task_broker: TaskPrioritySchema = self.queue.get()\n\n                if task_broker is None:\n                    break\n                Thread(\n                    target=self._execute_task, args=(task_broker,), daemon=True\n                ).start()\n\n        finally:\n            self.events.fire(\"worker_stopping\", worker=self, number=number)\n\n    def _execute_task(\n        self,\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        with self.semaphore:\n            model = TaskStatusProcessSchema(\n                task_name=task_broker.name,\n                priority=task_broker.priority,\n                created_at=task_broker.created_at,\n                updated_at=time(),\n                args=task_broker.args,\n                kwargs=task_broker.kwargs,\n            )\n\n            task_func = self._task_exists(task_broker=task_broker)\n            if not task_func:\n                self.queue.task_done()\n                return\n\n            new_model = self._plugin_trigger(\n                \"worker_execute_before\",\n                worker=self,\n                task_broker=task_broker,\n                task_func=task_func,\n                model=model,\n                return_last=True\n            )\n            if new_model:\n                model = new_model.get(\"model\", model)\n\n            self.broker.update(\n                name=f\"{self.name}:{task_broker.uuid}\", mapping=asdict(model)\n            )\n\n            self.events.fire(\"task_running\", worker=self, task_func=task_func, task_broker=task_broker)\n            model = self._run_task(task_func=task_func, task_broker=task_broker)\n            self.events.fire(\"task_stopping\", worker=self, task_func=task_func, task_broker=task_broker, model=model)\n\n            self.remove_finished_task(task_func=task_func, task_broker=task_broker, model=model)\n\n            self._plugin_trigger(\"worker_execute_after\", task_func=task_func, task_broker=task_broker, model=model)\n\n            self.queue.task_done()\n\n    def add(\n        self,\n        name: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        uuid: Annotated[\n            UUID,\n            Doc(\n                \"\"\"\n                    UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        priority: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        created_at: Annotated[\n            float,\n            Doc(\n                \"\"\"\n                    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n                    \"\"\"\n            ),\n        ],\n        args: Annotated[\n            tuple,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                    \"\"\"\n            ),\n        ],\n        kwargs: Annotated[\n            dict,\n            Doc(\n                \"\"\"\n                    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; Task:\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n        Args:\n            name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n            uuid (UUID): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n            priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n            created_at (float): \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n            args (tuple): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n            kwargs (dict): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n        \"\"\"\n        new_data = self._plugin_trigger(\n            \"worker_add\",\n            worker=self,\n            task_name=name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kw=kwargs,\n            created_at=created_at,\n            return_last=True\n        )\n        if new_data:\n            name = new_data.get(\"name\", name)\n            uuid = new_data.get(\"uuid\", uuid)\n            priority = new_data.get(\"priority\", priority)\n            args = new_data.get(\"args\", args)\n            kwargs = new_data.get(\"kw\", kwargs)\n            created_at = new_data.get(\"created_at\", created_at)\n\n        model = TaskPrioritySchema(\n            priority=priority,\n            uuid=uuid,\n            name=name,\n            args=list(args),\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n        with self.lock:\n            self.queue.put(model)\n\n        return Task(\n            status=TaskStatusEnum.NEW.value,\n            task_name=name,\n            uuid=uuid,\n            priority=priority,\n            args=args,\n            kwargs=kwargs,\n            created_at=created_at,\n            updated_at=created_at,\n        )\n\n    def start(\n        self,\n        num_workers: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                    \"\"\"\n            ),\n        ] = 4,\n    ) -&gt; None:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447.\n\n        Args:\n            num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n        \"\"\"\n        self.num_workers = num_workers\n        self._plugin_trigger(\"worker_start\", worker=self)\n\n        for number in range(self.num_workers):\n            thread = Thread(target=self.worker, args=(number,), daemon=True)\n            thread.start()\n            self.threads.append(thread)\n\n    def stop(self):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b.\"\"\"\n        self._plugin_trigger(\"worker_stop\", worker=self)\n        self._stop_event.set()\n        for thread in self.threads:\n            thread.join()\n\n    def update_config(self, config: QueueConfig):\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433.\"\"\"\n        self.config = config\n        self.semaphore = Semaphore(config.max_tasks_process)\n\n    def _run_task(\n        self, task_func: TaskExecSchema, task_broker: TaskPrioritySchema\n    ) -&gt; Union[TaskStatusSuccessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema]:\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_func (TaskExecSchema): \u0421\u0445\u0435\u043c\u0430 `qtasks.schemas.TaskExecSchema`.\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `qtasks.schemas.TaskPrioritySchema`.\n\n        Returns:\n            TaskStatusSuccessSchema|TaskStatusErrorSchema: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        self.log.info(\n            f\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u044e \u0437\u0430\u0434\u0430\u0447\u0443 {task_broker.uuid} ({task_broker.name}), \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442: {task_broker.priority}\"\n        )\n\n        new_data = self._plugin_trigger(\n            \"worker_run_task_before\",\n            worker=self,\n            task_func=task_func,\n            task_broker=task_broker,\n            return_last=True\n        )\n        if new_data:\n            task_func = new_data.get(\"task_func\", task_func)\n            task_broker = new_data.get(\"task_broker\", task_broker)\n\n        if self.task_middlewares_before:\n            task_func.add_middlewares_before(self.task_middlewares_before)\n        if self.task_middlewares_after:\n            task_func.add_middlewares_after(self.task_middlewares_after)\n\n        executor = task_func.executor if task_func.executor is not None else self.task_executor\n        executor = executor(\n            task_func=task_func,\n            task_broker=task_broker,\n            log=self.log,\n            plugins=self.plugins,\n        )\n\n        try:\n            result = executor.execute()\n            return self._task_success(result, task_func, task_broker)\n        except TaskCancelError as e:\n            return self._task_cancel(e, task_func, task_broker)\n        except BaseException as e:\n            return self._task_error(e, task_func, task_broker)\n\n    def _task_success(self, result: Any, task_func: TaskExecSchema, task_broker: TaskPrioritySchema) -&gt; None:\n        \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        model = TaskStatusSuccessSchema(\n            task_name=task_func.name,\n            priority=task_func.priority,\n            returning=result,\n            created_at=task_broker.created_at,\n            updated_at=time(),\n            args=task_broker.args,\n            kwargs=task_broker.kwargs,\n        )\n        self.log.info(\n            f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {result}\"\n        )\n        return model\n\n    def _task_error(self, e, task_func: TaskExecSchema, task_broker: TaskPrioritySchema) -&gt; None:\n        \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.\"\"\"\n        trace = traceback.format_exc()\n\n        # plugin: retry\n        plugin_result = None\n\n        should_retry = (\n            task_func.retry and (\n                not task_func.retry_on_exc or type(e) in task_func.retry_on_exc\n            )\n        )\n        if should_retry and task_func.retry:\n                plugin_result = self._plugin_trigger(\n                    \"worker_task_error_retry\",\n                    broker=self.broker,\n                    task_func=task_func,\n                    task_broker=task_broker,\n                    trace=trace,\n                    return_last=True\n                )\n\n        if not plugin_result:\n            model = TaskStatusErrorSchema(\n                task_name=task_func.name,\n                priority=task_func.priority,\n                traceback=trace,\n                created_at=task_broker.created_at,\n                updated_at=time(),\n                args=task_broker.args,\n                kwargs=task_broker.kwargs,\n            )\n        else:\n            model: TaskStatusErrorSchema = plugin_result.get(\"model\", model)\n        #\n\n        self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n        return model\n\n    def _task_cancel(self, e, task_func: TaskExecSchema, task_broker: TaskPrioritySchema) -&gt; None:\n        \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438.\"\"\"\n        model = TaskStatusCancelSchema(\n            task_name=task_func.name,\n            priority=task_func.priority,\n            cancel_reason=str(e),\n            created_at=task_broker.created_at,\n            updated_at=time(),\n        )\n        self.log.info(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.uuid} \u0431\u044b\u043b\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430 \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435: {e}\")\n        return model\n\n    def _task_exists(self, task_broker: TaskPrioritySchema) -&gt; Union[TaskExecSchema, None]:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n        Args:\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 `TaskPrioritySchema`.\n\n        Returns:\n            TaskExecSchema|None: \u0421\u0445\u0435\u043c\u0430 `TaskExecSchema` \u0438\u043b\u0438 `None`.\n        \"\"\"\n        try:\n            return self._tasks[task_broker.name]\n        except KeyError as e:\n            self.log.warning(f\"\u0417\u0430\u0434\u0430\u0447\u0438 {e.args[0]} \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\")\n            trace = traceback.format_exc()\n            model = TaskStatusErrorSchema(\n                task_name=task_broker.name,\n                priority=task_broker.priority,\n                traceback=trace,\n                created_at=task_broker.created_at,\n                updated_at=time(),\n            )\n            self.remove_finished_task(task_func=None, task_broker=task_broker, model=model)\n            self.log.error(f\"\u0417\u0430\u0434\u0430\u0447\u0430 {task_broker.name} \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439:\\n{trace}\")\n            return None\n\n    def remove_finished_task(\n        self,\n        task_func: Annotated[\n            Optional[TaskExecSchema],\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            )\n        ],\n        task_broker: Annotated[\n            TaskPrioritySchema,\n            Doc(\n                \"\"\"\n                    \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n        model: Annotated[\n            Union[\n                TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n            ],\n            Doc(\n                \"\"\"\n                    \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                    \"\"\"\n            ),\n        ],\n    ) -&gt; None:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n        Args:\n            task_func (TaskExecSchema, optional): \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n            task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n            model (TaskStatusNewSchema | TaskStatusErrorSchema | TaskStatusCancelSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n        \"\"\"\n        new_data = self._plugin_trigger(\n            \"worker_remove_finished_task\",\n            worker=self,\n            broker=self.broker,\n            task_func=task_func,\n            task_broker=task_broker,\n            model=model,\n            return_last=True\n        )\n        if new_data:\n            task_broker, model = new_data.get(\"task_broker\", task_broker), new_data.get(\"model\", model)\n        self.broker.remove_finished_task(task_broker, model)\n\n    def init_plugins(self):\n        \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n        self.add_plugin(SyncRetryPlugin(), trigger_names=[\"worker_task_error_retry\"])\n        self.add_plugin(SyncPydanticWrapperPlugin(), trigger_names=[\"task_executor_args_replace\", \"task_executor_after_execute_result_replace\"])\n        self.add_plugin(SyncDependsPlugin(), trigger_names=[\"task_executor_args_replace\"])\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.__init__","title":"<code>__init__(name='QueueTasks', broker=None, log=None, config=None, events=None)</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".</p> <code>'QueueTasks'</code> <code>broker</code> <code>BaseBroker</code> <p>\u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>log</code> <code>Logger</code> <p>\u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>config</code> <code>QueueConfig</code> <p>\u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> <code>None</code> <code>events</code> <code>BaseEvents</code> <p>\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>qtasks.events.SyncEvents</code>.</p> <code>None</code> Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def __init__(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u043c.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `QueueTasks`.\n                \"\"\"\n        ),\n    ] = \"QueueTasks\",\n    broker: Annotated[\n        Optional[\"BaseBroker\"],\n        Doc(\n            \"\"\"\n                \u0411\u0440\u043e\u043a\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.brokers.SyncRedisBroker`.\n                \"\"\"\n        ),\n    ] = None,\n    log: Annotated[\n        Optional[Logger],\n        Doc(\n            \"\"\"\n                \u041b\u043e\u0433\u0433\u0435\u0440.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.logs.Logger`.\n                \"\"\"\n        ),\n    ] = None,\n    config: Annotated[\n        Optional[QueueConfig],\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043d\u0444\u0438\u0433.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.configs.config.QueueConfig`.\n                \"\"\"\n        ),\n    ] = None,\n    events: Annotated[\n        Optional[\"BaseEvents\"],\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0431\u044b\u0442\u0438\u044f.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n                \"\"\"\n        ),\n    ] = None,\n):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u0430.\n\n    Args:\n        name (str, optional): \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"QueueTasks\".\n        broker (BaseBroker, optional): \u0411\u0440\u043e\u043a\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        log (Logger, optional): \u041b\u043e\u0433\u0433\u0435\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        config (QueueConfig, optional): \u041a\u043e\u043d\u0444\u0438\u0433. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        events (BaseEvents, optional): \u0421\u043e\u0431\u044b\u0442\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `qtasks.events.SyncEvents`.\n    \"\"\"\n    super().__init__(name=name, broker=broker, log=log, config=config, events=events)\n    self.events = self.events or SyncEvents()\n    self.broker = broker or SyncRedisBroker(\n        name=self.name, log=self.log, config=self.config\n    )\n    self.queue = PriorityQueue()\n    self._tasks: Dict[str, TaskExecSchema] = {}\n    self._stop_event = Event()\n    self.lock = Lock()\n    self.threads: List[Thread] = []\n    self.semaphore = Semaphore(self.config.max_tasks_process)\n\n    self.task_executor = SyncTaskExecutor\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.add","title":"<code>add(name, uuid, priority, created_at, args, kwargs)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>uuid</code> <code>UUID</code> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>priority</code> <code>int</code> <p>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>created_at</code> <code>float</code> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.</p> required <code>args</code> <code>tuple</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.</p> required <code>kwargs</code> <code>dict</code> <p>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.</p> required Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def add(\n    self,\n    name: Annotated[\n        str,\n        Doc(\n            \"\"\"\n                \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    uuid: Annotated[\n        UUID,\n        Doc(\n            \"\"\"\n                UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    priority: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    created_at: Annotated[\n        float,\n        Doc(\n            \"\"\"\n                \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n                \"\"\"\n        ),\n    ],\n    args: Annotated[\n        tuple,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n                \"\"\"\n        ),\n    ],\n    kwargs: Annotated[\n        dict,\n        Doc(\n            \"\"\"\n                \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n                \"\"\"\n        ),\n    ],\n) -&gt; Task:\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.\n\n    Args:\n        name (str): \u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n        uuid (UUID): UUID \u0437\u0430\u0434\u0430\u0447\u0438.\n        priority (int): \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438.\n        created_at (float): \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 timestamp.\n        args (tuple): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 args.\n        kwargs (dict): \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043f\u0430 kwargs.\n    \"\"\"\n    new_data = self._plugin_trigger(\n        \"worker_add\",\n        worker=self,\n        task_name=name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kw=kwargs,\n        created_at=created_at,\n        return_last=True\n    )\n    if new_data:\n        name = new_data.get(\"name\", name)\n        uuid = new_data.get(\"uuid\", uuid)\n        priority = new_data.get(\"priority\", priority)\n        args = new_data.get(\"args\", args)\n        kwargs = new_data.get(\"kw\", kwargs)\n        created_at = new_data.get(\"created_at\", created_at)\n\n    model = TaskPrioritySchema(\n        priority=priority,\n        uuid=uuid,\n        name=name,\n        args=list(args),\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n    with self.lock:\n        self.queue.put(model)\n\n    return Task(\n        status=TaskStatusEnum.NEW.value,\n        task_name=name,\n        uuid=uuid,\n        priority=priority,\n        args=args,\n        kwargs=kwargs,\n        created_at=created_at,\n        updated_at=created_at,\n    )\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.init_plugins","title":"<code>init_plugins()</code>","text":"<p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def init_plugins(self):\n    \"\"\"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\"\"\"\n    self.add_plugin(SyncRetryPlugin(), trigger_names=[\"worker_task_error_retry\"])\n    self.add_plugin(SyncPydanticWrapperPlugin(), trigger_names=[\"task_executor_args_replace\", \"task_executor_after_execute_result_replace\"])\n    self.add_plugin(SyncDependsPlugin(), trigger_names=[\"task_executor_args_replace\"])\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.remove_finished_task","title":"<code>remove_finished_task(task_func, task_broker, model)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>self.storage.remove_finished_task</code>.</p> <p>Parameters:</p> Name Type Description Default <code>task_func</code> <code>TaskExecSchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: <code>None</code>.</p> required <code>task_broker</code> <code>TaskPrioritySchema</code> <p>\u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required <code>model</code> <code>TaskStatusNewSchema | TaskStatusErrorSchema | TaskStatusCancelSchema</code> <p>\u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> required Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def remove_finished_task(\n    self,\n    task_func: Annotated[\n        Optional[TaskExecSchema],\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        )\n    ],\n    task_broker: Annotated[\n        TaskPrioritySchema,\n        Doc(\n            \"\"\"\n                \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n    model: Annotated[\n        Union[\n            TaskStatusProcessSchema, TaskStatusErrorSchema, TaskStatusCancelSchema\n        ],\n        Doc(\n            \"\"\"\n                \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e `self.storage.remove_finished_task`.\n\n    Args:\n        task_func (TaskExecSchema, optional): \u0421\u0445\u0435\u043c\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n        task_broker (TaskPrioritySchema): \u0421\u0445\u0435\u043c\u0430 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.\n        model (TaskStatusNewSchema | TaskStatusErrorSchema | TaskStatusCancelSchema): \u041c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    new_data = self._plugin_trigger(\n        \"worker_remove_finished_task\",\n        worker=self,\n        broker=self.broker,\n        task_func=task_func,\n        task_broker=task_broker,\n        model=model,\n        return_last=True\n    )\n    if new_data:\n        task_broker, model = new_data.get(\"task_broker\", task_broker), new_data.get(\"model\", model)\n    self.broker.remove_finished_task(task_broker, model)\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.start","title":"<code>start(num_workers=4)</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>num_workers</code> <code>int</code> <p>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.</p> <code>4</code> Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def start(\n    self,\n    num_workers: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432.\n\n                \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `4`.\n                \"\"\"\n        ),\n    ] = 4,\n) -&gt; None:\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        num_workers (int, optional): \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 4.\n    \"\"\"\n    self.num_workers = num_workers\n    self._plugin_trigger(\"worker_start\", worker=self)\n\n    for number in range(self.num_workers):\n        thread = Thread(target=self.worker, args=(number,), daemon=True)\n        thread.start()\n        self.threads.append(thread)\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.stop","title":"<code>stop()</code>","text":"<p>\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b.</p> Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def stop(self):\n    \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0440\u043a\u0435\u0440\u044b.\"\"\"\n    self._plugin_trigger(\"worker_stop\", worker=self)\n    self._stop_event.set()\n    for thread in self.threads:\n        thread.join()\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.update_config","title":"<code>update_config(config)</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433.</p> Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def update_config(self, config: QueueConfig):\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433.\"\"\"\n    self.config = config\n    self.semaphore = Semaphore(config.max_tasks_process)\n</code></pre>"},{"location":"ru/api/workers/sync_threadworker/#qtasks.workers.sync_worker.SyncThreadWorker.worker","title":"<code>worker(number)</code>","text":"<p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u0434\u0430\u0447.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>\u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.</p> required Source code in <code>src/qtasks/workers/sync_worker.py</code> <pre><code>def worker(\n    self,\n    number: Annotated[\n        int,\n        Doc(\n            \"\"\"\n                \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n                \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0437\u0430\u0434\u0430\u0447.\n\n    Args:\n        number (int): \u041d\u043e\u043c\u0435\u0440 \u0412\u043e\u0440\u043a\u0435\u0440\u0430.\n    \"\"\"\n    self.events.fire(\"worker_running\", worker=self, number=number)\n\n    try:\n        while not self._stop_event.is_set():\n            with self.lock:\n                if self.queue.empty():\n                    sleep(0.1)\n                    continue\n                task_broker: TaskPrioritySchema = self.queue.get()\n\n            if task_broker is None:\n                break\n            Thread(\n                target=self._execute_task, args=(task_broker,), daemon=True\n            ).start()\n\n    finally:\n        self.events.fire(\"worker_stopping\", worker=self, number=number)\n</code></pre>"},{"location":"ru/examples/analytics/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u2192 \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430","text":"<p>\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (A)syncStats \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0441\u0431\u043e\u0440 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e <code>QTasks</code> \u0438 \u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0430\u043c. \u041e\u043d \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>QueueTasks</code> \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0438\u043d\u0442\u0440\u043e\u0441\u043f\u0435\u043a\u0446\u0438\u0438. \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0432 CLI \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0430 <code>qtasks stats</code>.</p>"},{"location":"ru/examples/analytics/#_2","title":"\ud83d\ude80 \u0413\u0434\u0435 \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f","text":"<ul> <li>\u041f\u0440\u044f\u043c\u043e \u0438\u0437 \u043a\u043e\u0434\u0430: \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>(A)syncStats</code> \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0430.</li> <li>\u0427\u0435\u0440\u0435\u0437 CLI: \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u0430\u043a <code>qtasks stats</code>.</li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u0434\u043b\u044f \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u0430):</p> <pre><code>qtasks stats inspect tasks my_task json=true\n</code></pre> <p>\u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447 (\u0432 JSON \u043f\u0440\u0438 <code>json=true</code>).</p>"},{"location":"ru/examples/analytics/#inspect","title":"\ud83d\udd0e <code>inspect()</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>inspect()</code> \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 <code>InspectStats</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0441\u043c\u043e\u0442\u0440\u0430:</p> <ul> <li><code>app(json: bool = False)</code> \u2014 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0441\u0430\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438</li> <li><code>task(task_name: str, json: bool = False)</code> \u2014 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435</li> <li><code>tasks(*tasks: Tuple[str], json: bool = False)</code> \u2014 \u0441\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0430\u043c \u0438\u043b\u0438 \u043f\u043e \u0432\u0441\u0435\u043c</li> </ul> <p>\u0412\u0441\u0435 \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0434\u0432\u0430 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0432\u044b\u0432\u043e\u0434\u0430:</p> <ul> <li>\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e): \u0432\u044b\u0440\u043e\u0432\u043d\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 + \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438</li> <li>JSON (<code>json=True</code>): \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430, \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438</li> </ul>"},{"location":"ru/examples/analytics/#appjson-bool-false","title":"\ud83e\udded <code>app(json: bool = False)</code> \u2014 \u0441\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e","text":"<p>\u0427\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435:</p> <ul> <li>\u0418\u043c\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f</li> <li>\u041c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u0430</li> <li>\u0412\u0435\u0440\u0441\u0438\u044f <code>QTasks</code></li> <li>\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f (\u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0430)</li> <li>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432</li> <li>\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 (\u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u044f\u0434\u0440\u0443, \u0431\u0440\u043e\u043a\u0435\u0440\u0443, \u0432\u043e\u0440\u043a\u0435\u0440\u0443, \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u0443, \u0441\u0442\u043e\u0440\u0438\u0434\u0436\u0443 \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438)</li> <li>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 (\u0441\u043e\u0431\u044b\u0442\u0438\u0439 <code>on</code>)</li> <li>\u041a\u043b\u0430\u0441\u0441\u044b \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432: \u0411\u0440\u043e\u043a\u0435\u0440, \u0412\u043e\u0440\u043a\u0435\u0440, \u0421\u0442\u0430\u0440\u0442\u0435\u0440 (\u0438\u043b\u0438 <code>\u2014</code>), \u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, GlobalConfig (\u0438\u043b\u0438 <code>\u2014</code>), \u041b\u043e\u0433\u0435\u0440</li> </ul> <p>\u0424\u043e\u0440\u043c\u0430\u0442 \u2014 \u0431\u043b\u043e\u0447\u043d\u044b\u0439, \u0441 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u043a \u043f\u043e \u0448\u0438\u0440\u0438\u043d\u0435 \u0438 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u043b\u0438\u043d\u0438\u0435\u0439-\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c. \u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u043e\u0440\u043c\u044b (\u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435):</p> <pre><code>\u0418\u043c\u044f                       : QueueTasks\n\u041c\u0435\u0442\u043e\u0434                     : async\n\u0412\u0435\u0440\u0441\u0438\u044f                    : 1.6.0\n\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f              : QueueConfig(max_tasks_process=10,\nrunning_older_tasks=True, delete_finished_tasks=True, default_task_priority=0,\nlogs_default_level_server=20, logs_default_level_client=20,\nlogs_format='%(asctime)s [%(name)s: %(levelname)s] (%(subname)s) %(message)s',\nresult_time_interval=0.1, result_statuses_end=['success', 'error', 'cancel'])\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0434\u0430\u0447          : 14\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432       : 1\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432       : 3\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439  : 0\n\u0411\u0440\u043e\u043a\u0435\u0440                    : AsyncRedisBroker\n\u0412\u043e\u0440\u043a\u0435\u0440                    : AsyncWorker\n\u0421\u0442\u0430\u0440\u0442\u0435\u0440                   : \u2014\n\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435                 : AsyncRedisStorage\nGlobalConfig              : AsyncRedisGlobalConfig\n\u041b\u043e\u0433                       : Logger\n--------------------------------------------------\n</code></pre> <p>\u041f\u0440\u0438 <code>json=True</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f JSON-\u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0442\u0435\u043c\u0438 \u0436\u0435 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.</p>"},{"location":"ru/examples/analytics/#tasktask_name-json-bool-false","title":"\ud83e\udde9 <code>task(task_name, json: bool = False)</code> \u2014 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043e \u0437\u0430\u0434\u0430\u0447\u0435","text":"<p>\u0427\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435: \u043e\u0434\u0438\u043d \u0431\u043b\u043e\u043a \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438:</p> <ul> <li>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438</li> <li>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442</li> <li>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 (\u0438\u043b\u0438 <code>\u2014</code>)</li> <li>\u0422\u0435\u0433\u0438 (\u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e \u0438\u043b\u0438 <code>\u2014</code>)</li> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c (\u0444\u043b\u0430\u0433 \u00abawaiting\u00bb)</li> <li>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f (<code>yield</code>-\u0440\u0435\u0436\u0438\u043c, \u0444\u043b\u0430\u0433 \u00abgenerating\u00bb)</li> <li>\u00abSelf \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439\u00bb (<code>echo</code>)</li> <li>\u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432: <code>Args</code> (\u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435) \u0438 <code>Kwargs</code> (\u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u0430\u043c\u0438)</li> </ul> <p>\u0423\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u0432 \u0437\u0430\u0434\u0430\u0447\u0435:</p> <ul> <li><code>\u041f\u043e\u0432\u0442\u043e\u0440\u043e\u0432</code> (retry)</li> <li><code>\u0418\u0441\u043a\u043b. \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432</code> (<code>retry_on_exc</code>, \u043a\u0440\u0430\u0441\u0438\u0432\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f)</li> <li><code>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</code> (<code>decode</code>)</li> <li><code>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440</code> (<code>generate_handler</code>)</li> <li><code>\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c</code> (<code>executor</code>)</li> <li><code>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u0434\u043e</code> / <code>\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043f\u043e\u0441\u043b\u0435</code></li> <li><code>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e</code> \u2014 \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u0430\u0440\u0430 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0441 \u043c\u0430\u0440\u043a\u0435\u0440\u043e\u043c <code>*</code></li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u043e\u0440\u043c\u044b (\u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435):</p> <pre><code>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438              : send_email\n\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442               : 0\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435                : \u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u0438\u0441\u0435\u043c\n\u0422\u0435\u0433\u0438                    : email, marketing\n\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c           : True\n\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f               : False\nSelf \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439      : False\nArgs                    : recipient: str, subject: str\nKwargs                  : retries: int=3, timeout: int=30\n\u041f\u043e\u0432\u0442\u043e\u0440\u043e\u0432                : 3\n\u0418\u0441\u043a\u043b. \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432      : [&lt;class 'KeyError'&gt;]\n\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u0434\u043e             : [&lt;class 'AuthMiddleware'&gt;]\n\u041c\u0438\u0434\u043b\u0432\u0430\u0440\u0438 \u043f\u043e\u0441\u043b\u0435          : [&lt;class 'MetricsMiddleware'&gt;]\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e           :\n * concurrency: 5\n * queue: high\n--------------------------------------------------\n</code></pre> <p>\u041f\u0440\u0438 <code>json=True</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0442\u0435\u043c\u0438 \u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 (\u043a\u043b\u044e\u0447\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u0435\u0442\u043a\u0430\u043c \u0432\u044b\u0448\u0435).</p> <p>\u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u2014 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 (\u0442\u0435\u043a\u0441\u0442), \u0430 \u043f\u0440\u0438 <code>json=True</code> \u2014 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0438\u043b\u0438 \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 (\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 CLI/\u043e\u0431\u0451\u0440\u0442\u043a\u0438).</p>"},{"location":"ru/examples/analytics/#taskstasks-json-bool-false","title":"\ud83d\udcda <code>tasks(*tasks, json: bool = False)</code> \u2014 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043b\u0438 \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<p>\u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e <code>task(...)</code>, \u043d\u043e \u0434\u043b\u044f \u043d\u0430\u0431\u043e\u0440\u0430 \u0437\u0430\u0434\u0430\u0447:</p> <ul> <li>\u0415\u0441\u043b\u0438 \u0438\u043c\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u2014 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f</li> <li>\u0415\u0441\u043b\u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u2014 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u0435\u0441\u044c \u0440\u0435\u0435\u0441\u0442\u0440 \u0437\u0430\u0434\u0430\u0447</li> <li>\u0411\u043b\u043e\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043b\u0438\u043d\u0438\u0435\u0439 <code>--------------------------------------------------</code></li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u043e\u0440\u043c\u044b (\u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435):</p> <pre><code>\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438              : ping\n\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442               : 0\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435                : \u2014\n\u0422\u0435\u0433\u0438                    : \u2014\n\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c           : True\n\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f               : False\nSelf \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439      : False\nArgs                    : host: str\nKwargs                  : timeout: int=5\n--------------------------------------------------\n\u0418\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438              : report_daily\n\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442               : 1\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435                : \u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u044b\u0439 \u043e\u0442\u0447\u0451\u0442\n\u0422\u0435\u0433\u0438                    : analytics\n\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c           : False\n\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f               : False\nSelf \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u0434\u0430\u0447\u0435\u0439      : False\nArgs                    : date: datetime.date\nKwargs                  : format: str=pdf\n--------------------------------------------------\n</code></pre> <p>\u041f\u0440\u0438 <code>json=True</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a JSON-\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u2014 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.</p>"},{"location":"ru/examples/analytics/#_3","title":"\ud83e\uddf1 \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u0447\u0442\u0435\u043d\u0438\u044f","text":"<p>\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043a\u0438 \u043f\u043e \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0448\u0438\u0440\u0438\u043d\u0435 (\u0447\u0435\u0440\u0435\u0437 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 <code>label_width</code>), \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0438 \u043b\u043e\u0433\u0430\u0445. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 <code>-</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u043e\u0432.</p>"},{"location":"ru/examples/analytics/#_4","title":"\u2705 \u0427\u0442\u043e \u044d\u0442\u043e \u0434\u0430\u0451\u0442 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435","text":"<ul> <li>\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0430\u0443\u0434\u0438\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432</li> <li>\u041f\u043e\u043b\u043d\u0430\u044f \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435: \u043e\u0442 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043e middleware \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439</li> <li>\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 JSON-\u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435\u043c, \u0430\u043b\u0435\u0440\u0442\u0438\u043d\u0433\u043e\u043c \u0438 \u0434\u0430\u0448\u0431\u043e\u0440\u0434\u0430\u043c\u0438</li> </ul> <p>\u042d\u0442\u0430 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u0430 \u0432 \u043f\u0440\u043e\u0434\u0435, \u043d\u0430 CI \u0438 \u0432 \u043e\u0442\u043b\u0430\u0434\u043a\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u2014 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e.</p>"},{"location":"ru/examples/echo/","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f self \u0438 self.ctx (echo=True)","text":"<p>\u041f\u0440\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0438 <code>echo=True</code>, \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442 <code>self</code> \u0442\u0438\u043f\u0430 <code>AsyncTask</code> \u0438\u043b\u0438 <code>SyncTask</code>. \u042d\u0442\u043e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f <code>self.ctx</code>, \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c.</p> <p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 <code>self</code> \u0438 <code>self.ctx</code>.</p>"},{"location":"ru/examples/echo/#_1","title":"\ud83e\udde9 \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<pre><code>@app.task(\n    echo=True, tags=[\"test\"], priority=1,\n    retry=3, retry_on_exc=[KeyError], decode=json.dumps,\n    # generate_handler=yield_func, executor=MyTaskExecutor,\n    # middlewares_before=[MyTaskMiddleware], middlewares_after=[MyTaskMiddleware],\n    test=\"test\"\n)\nasync def test_echo_ctx(self: AsyncTask):\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u043e\u0433\u0433\u0435\u0440 (\u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n    self.ctx.get_logger().info(\"\u042d\u0442\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430!\")\n\n    # \u041f\u0430\u0443\u0437\u0430 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 (\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f)\n    await self.ctx.sleep(5)\n\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e\n    self.ctx.get_logger().info(self.ctx.get_config())\n\n    # \u0412\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438\n    self.ctx.get_logger().info(\n        f\"\"\"\n            UUID: {self.ctx.task_uuid}\n            \u0418\u043c\u044f: {self.task_name}\n            \u0422\u0435\u0433\u0438: {self.tags}\n            \u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442: {self.priority}\n            \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: {self.extra}\n\n            \u041f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: {self.retry}\n            \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0430: {self.retry_on_exc}\n            \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430: {self.ctx.generate_handler}\n\n            \u0412\u044b\u0437\u0432\u0430\u043d \u043b\u0438 self: {self.echo}\n            \u0414\u0435\u043a\u043e\u0440\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: {self.decode}\n\n            TaskExecutor \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: {self.executor}\n            \u041c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u0438: {self.middlewares}\n        \"\"\"\n    )\n\n    # \u041e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e\n    self.ctx.cancel(\"\u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430\")\n    return \"Hello, world!\"\n</code></pre>"},{"location":"ru/examples/echo/#self","title":"\ud83d\udce6 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 self","text":"<ul> <li><code>self.task_name</code>, <code>self.retry</code>, <code>self.tags</code>, <code>self.echo</code> \u2014 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u0447\u0438</li> <li><code>await self.add_task(...)</code> \u2014 \u0437\u0430\u043f\u0443\u0441\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447</li> <li><code>self.decode</code>, <code>self.executor</code>, <code>self.middlewares</code> \u2014 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c \u0437\u0430\u0434\u0430\u0447\u0438</li> </ul>"},{"location":"ru/examples/echo/#selfctx","title":"\ud83e\udde0 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 self.ctx","text":"<ul> <li><code>self.ctx.get_logger()</code> \u2014 \u043b\u043e\u0433\u0433\u0435\u0440 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c</li> <li><code>self.ctx.sleep(seconds)</code> \u2014 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> <li><code>self.ctx.cancel(reason)</code> \u2014 \u043e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 <code>status=CANCEL</code></li> <li><code>self.ctx.get_config()</code>, <code>get_component(name)</code>, <code>get_task(uuid)</code>, <code>get_metadata()</code> \u2014 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e</li> </ul>"},{"location":"ru/examples/echo/#_2","title":"\u2705 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043b\u043e\u0433\u0430\u0445","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442:</p> <pre><code>Task(status='cancel', uuid=..., task_name='test_echo_ctx', ...,\ncancel_reason='\u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430')\n</code></pre> <p>\u0421\u0435\u0440\u0432\u0435\u0440:</p> <pre><code>2025-07-16 ... (test_echo_ctx) \u042d\u0442\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430!\n...\nUUID: ...\n\u0418\u043c\u044f: test_echo_ctx\n\u0422\u0435\u0433\u0438: ['test']\n...\n\u0417\u0430\u0434\u0430\u0447\u0430 ... \u0431\u044b\u043b\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430 \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435: \u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u0430\n</code></pre> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>self</code> \u0438 <code>self.ctx</code> \u0434\u0435\u043b\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439, \u0430 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c, \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 QTasks \u043d\u0430 \u0432\u0441\u0435\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445.</p>"},{"location":"ru/examples/examples/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>\u041d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f <code>QueueTasks</code>. \u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0432\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0441\u0432\u043e\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u0438 \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</p>"},{"location":"ru/examples/examples/#_2","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0451 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e.</p> <pre><code>from qtasks import QueueTasks\n\napp = QueueTasks()\n\n@app.task(name=\"print_text\")\ndef print_text(text: str):\n    print(text)\n    return text\n\nif __name__ == \"__main__\":\n    app.run_forever()\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\napp.add_task(task_name=\"print_text\", \"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\")\n# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\"\n</code></pre>"},{"location":"ru/examples/examples/#_3","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438).</p> <pre><code>from qtasks.asyncio import QueueTasks\nimport asyncio\n\napp = QueueTasks()\n\n@app.task(name=\"async_task\")\nasync def async_task(text: str):\n    await asyncio.sleep(2)\n    print(f\"\u0417\u0430\u0434\u0430\u0447\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430: {text}\")\n    return text\n\nif __name__ == \"__main__\":\n    app.run_forever()\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438\nasyncio.run(app.add_task(task_name=\"async_task\", \"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\"))\n# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \"\u0417\u0430\u0434\u0430\u0447\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\"\n</code></pre>"},{"location":"ru/examples/examples/#_4","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f RabbitMQ \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p> <pre><code>pip install qtasks[rabbitmq]\n\nfrom qtasks.asyncio import QueueTasks\nfrom qtasks.brokers import AsyncRabbitMQBroker\n\nbroker = AsyncRabbitMQBroker(url=\"amqp://guest:guest@localhost/\")\napp = QueueTasks(broker=broker)\n\n@app.task(name=\"rabbitmq_example\")\nasync def rabbitmq_example(text: str):\n    print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: {text}\")\n    return text\n\nif __name__ == \"__main__\":\n    app.run_forever()\n\n# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\nasyncio.run(app.add_task(task_name=\"rabbitmq_example\", \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 RabbitMQ\"))\n# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 RabbitMQ\"\n</code></pre>"},{"location":"ru/examples/features/","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u0447 QTasks","text":"<p>QTasks \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0433\u0438\u0431\u043a\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0438\u0445 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0437\u0430\u0434\u0430\u0447, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435.</p>"},{"location":"ru/examples/features/#shared_task","title":"\ud83d\udce6 shared_task","text":"<p><code>shared_task</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043d\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f <code>QueueTasks</code>, \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0438\u043b\u0438 \u043e\u0431\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.</p> <pre><code>@shared_task()\ndef shared_func():\n    print(\"\u041e\u0431\u0449\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430\")\n</code></pre> <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u0435 \u0436\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0447\u0442\u043e \u0438 <code>@app.task</code>, \u0432\u043a\u043b\u044e\u0447\u0430\u044f:</p> <ul> <li><code>executor</code></li> <li><code>middlewares</code></li> <li><code>generate_handler</code></li> <li><code>echo</code></li> <li><code>awaiting</code></li> </ul>"},{"location":"ru/examples/features/#router_tasks","title":"\ud83d\udd00 router_tasks","text":"<p><code>Router</code> \u2014 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447, \u043e\u0442\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u043e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e <code>QueueTasks</code>-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u044b \u0437\u0430\u0434\u0430\u0447.</p> <pre><code>from qtasks import Router\n\nrouter = Router(method=\"sync\")\n\n@router.task()\ndef example():\n    print(\"Router task\")\n</code></pre> <p>\u0412 <code>main.py</code>:</p> <pre><code>app.include_router(router)\n</code></pre>"},{"location":"ru/examples/features/#echotrue-self-asynctask","title":"\ud83d\udce3 echo=True \u0438 self: (A)SyncTask","text":"<p>\u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e <code>echo=True</code>, QTasks \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442 \u043f\u0435\u0440\u0432\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0432 \u0437\u0430\u0434\u0430\u0447\u0443 \u0435\u0451 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>self</code>:</p> <ul> <li>\u0414\u043b\u044f <code>async</code> \u2014 <code>AsyncTask</code></li> <li>\u0414\u043b\u044f <code>sync</code> \u2014 <code>SyncTask</code></li> </ul> <pre><code>@app.task(echo=True)\nasync def echo_task(self: AsyncTask):\n    print(self.task_name)\n</code></pre> <p>\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c <code>self.add_task(...)</code>, \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c <code>self.ctx</code> \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</p>"},{"location":"ru/examples/features/#selfctx-asynccontext","title":"\ud83e\udde0 self.ctx \u2014 \u044d\u0442\u043e (A)SyncContext","text":"<p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 <code>self.ctx</code> \u0434\u0430\u0451\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a:</p> <ul> <li><code>task_uuid</code></li> <li><code>get_logger()</code></li> <li><code>get_broker()</code> / <code>get_storage()</code> / <code>get_config()</code></li> <li><code>cancel()</code> \u2014 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u043c\u0435\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0438</li> </ul> <pre><code>@app.task(echo=True)\ndef show_context(self: SyncTask):\n    print(self.ctx.task_uuid)\n    self.ctx.cancel()  # \u0432\u044b\u0437\u043e\u0432\u0435\u0442 TaskCancelError \u0432\u043d\u0443\u0442\u0440\u0438 \u0437\u0430\u0434\u0430\u0447\u0438\n</code></pre> <p><code>self.ctx.cancel()</code> \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>TaskCancelError</code> \u0432\u043d\u0443\u0442\u0440\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u042d\u0442\u043e \u043f\u0435\u0440\u0435\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u043c \u0438 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u0443\u0435\u0442 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0441\u0442\u0430\u0442\u0443\u0441 <code>CANCEL</code>.</p> <p>\u042d\u0442\u043e \u0443\u043d\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430.</p>"},{"location":"ru/examples/features/#retry-retry_on_exc","title":"\ud83d\udd01 retry \u0438 retry_on_exc","text":"<p>\u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e <code>retry=N</code>, \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 <code>N</code> \u0440\u0430\u0437 \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435. \u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u043e <code>retry_on_exc=[...]</code>, \u0442\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u0430\u0445 \u043e\u0448\u0438\u0431\u043e\u043a.</p> <pre><code>@app.task(retry=5, retry_on_exc=[ZeroDivisionError])\ndef retryable():\n    1 / 0\n</code></pre>"},{"location":"ru/examples/features/#executor","title":"\u2699\ufe0f executor","text":"<p>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 <code>AsyncTaskExecutor</code> / <code>SyncTaskExecutor</code> \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439.</p> <pre><code>@shared_task(executor=MySyncTaskExecutor)\ndef custom_exec():\n    print(\"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 executor\")\n</code></pre>"},{"location":"ru/examples/features/#middlewares","title":"\ud83e\udde9 middlewares","text":"<p>\u041c\u0430\u0441\u0441\u0438\u0432 middleware'\u043e\u0432, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0432\u043d\u0443\u0442\u0440\u0438 executor'\u0430 \u0434\u043e \u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043e/\u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 \u0437\u0430\u0434\u0430\u0447\u0438.</p> <pre><code>@shared_task(middlewares_after=[MyTaskMiddleware], middlewares_before=[MyTaskMiddleware])\ndef with_mw():\n    print(\"middleware\")\n</code></pre>"},{"location":"ru/examples/features/#awaitingtrue-shared_task","title":"\ud83e\udea2 awaiting=True (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f shared_task)","text":"<p>\u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d <code>awaiting=True</code>, <code>shared_task</code> \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>AsyncTask</code>, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0430 \u043a\u0430\u043a <code>async def</code>.</p> <pre><code>@shared_task(awaiting=True)\nasync def async_shared():\n    print(\"async shared task\")\n</code></pre> <p>\u042d\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435.</p>"},{"location":"ru/examples/plugins/","title":"\u041f\u0440\u0438\u043c\u0435\u0440: \u041f\u043b\u0430\u0433\u0438\u043d\u044b","text":"<p>\u0423 <code>QTasks</code> \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043d\u0430 \u0432\u044b\u0437\u043e\u0432\u0435 \u0438\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0435 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.</p> <p>\u041f\u043e\u043c\u0438\u043c\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u043e\u0432 \u0442\u0430\u043a\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0438\u0433\u0433\u0435\u0440 \u043d\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f: <code>TaskPluginTriggerError</code>. \u0415\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0442\u0430\u043a:</p> <pre><code>raise TaskPluginTriggerError(\"\u042d\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0430\")\n</code></pre> <p>\u0438\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438:</p> <pre><code>self.ctx.plugin_error(\"\u042d\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0430\")\n</code></pre>"},{"location":"ru/examples/plugins/#_2","title":"\u2699\ufe0f \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b?","text":"<ul> <li>\u0422\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442 \u043c\u0435\u0442\u043e\u0434 <code>trigger()</code> \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.</li> <li>\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0435.</li> </ul>"},{"location":"ru/examples/plugins/#abc","title":"\ud83d\udcd0 \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u0430 (ABC)","text":"<pre><code>\"\"\"Base Plugin.\"\"\"\n\nfrom abc import ABC, abstractmethod\nfrom typing import Any, Dict, Optional, Union\nfrom typing_extensions import Annotated, Doc\n\nclass BasePlugin(ABC):\n    \"\"\"\n    `BasePlugin` \u2014 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n\n    ```python\n    from qtasks import QueueTasks\n    from qtasks.plugins.base import BasePlugin\n\n    class MyPlugin(BasePlugin):\n        def __init__(self, name: str = None):\n            super().__init__(name=name)\n            pass\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                    \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u043e \u0438\u043c\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0433\u043e\u0432 \u0434\u043b\u044f \u041f\u043b\u0430\u0433\u0438\u043d\u043e\u0432.\n\n                    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: `None`.\n                    \"\"\"\n            ),\n        ] = None,\n    ):\n        self.name: Union[str, None] = name\n        pass\n\n    @abstractmethod\n    def trigger(self, name: str, *args, **kwargs) -&gt; Union[Dict[str, Any], None]:\n        \"\"\"\u0422\u0440\u0438\u0433\u0433\u0435\u0440 \u043f\u043b\u0430\u0433\u0438\u043d\u0430.\"\"\"\n        pass\n\n    @abstractmethod\n    def start(self, *args, **kwargs):\n        \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u043b\u0430\u0433\u0438\u043d.\"\"\"\n        pass\n\n    @abstractmethod\n    def stop(self, *args, **kwargs):\n        \"\"\"\u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u043b\u0430\u0433\u0438\u043d.\"\"\"\n        pass\n</code></pre>"},{"location":"ru/examples/plugins/#_3","title":"\ud83d\udd27 \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043f\u043b\u0430\u0433\u0438\u043d\u0430","text":"<pre><code>from qtasks.plugins.base import BasePlugin\n\nclass TestPlugin(BasePlugin):\n    def __init__(self, name=None):\n        super().__init__(name)\n        self.handlers = {\n            \"task_executor_run_task_trigger_error\": self.task_trigger_error\n        }\n\n    async def start(self, *args, **kwargs):\n        return super().start(*args, **kwargs)\n\n    async def stop(self, *args, **kwargs):\n        return super().stop(*args, **kwargs)\n\n    async def trigger(self, name, **kwargs):\n        handler = self.handlers.get(name)\n        if handler:\n            return handler(**kwargs)\n        return None\n\n    def task_trigger_error(self, **kwargs):\n        print(kwargs)\n        return None\n</code></pre>"},{"location":"ru/examples/plugins/#_4","title":"\u2705 \u0418\u0442\u043e\u0433\u0438","text":"<ul> <li>\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u0432 <code>QTasks</code> \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430\u0445.</li> <li>\u041f\u043b\u0430\u0433\u0438\u043d\u044b \u043c\u043e\u0433\u0443\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u0434\u0430\u043d\u043d\u044b\u0435, \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 <code>TaskPluginTriggerError</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438/\u0438\u043b\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u0438\u0447\u0438\u043d\u043e\u0439.</li> <li>\u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043a\u0430\u043a \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u044b, \u0442\u0430\u043a \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</li> </ul>"},{"location":"ru/examples/variables/","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 \u0437\u0430\u0434\u0430\u0447","text":"<p><code>QTasks</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447:</p> <ul> <li>Depends \u2014 \u0432\u044b\u0437\u043e\u0432 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0438\u043b\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0445 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438.</li> <li>State \u2014 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u043c\u0435\u043d \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u043c\u0435\u0436\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</li> </ul>"},{"location":"ru/examples/variables/#1-depends","title":"\ud83d\udd27 \u041f\u0440\u0438\u043c\u0435\u0440 1: Depends (\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438)","text":"<p><code>Depends</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0435\u0441\u0443\u0440\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u043f\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u043c.</p> <pre><code>from qtasks.plugins import Depends\nfrom contextlib import asynccontextmanager\n\n@asynccontextmanager\nasync def get_db():\n    db = await connect_to_db()\n    yield db\n    print(\"close...\")\n    await db.disconnect()\n\n@app.task\nasync def test_depends(depends: Depends(get_db)):\n    depends.execute(...)\n    print(\"\u0412\u044b\u0437\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\")\n    return\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c:</p> <pre><code>&lt;\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443&gt;\n\u0412\u044b\u0437\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\n&lt;\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443&gt;\nclose...\n</code></pre> <p>\u0418\u0442\u043e\u0433: \u0437\u0430\u0434\u0430\u0447\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f.</p>"},{"location":"ru/examples/variables/#2-state","title":"\ud83d\udd27 \u041f\u0440\u0438\u043c\u0435\u0440 2: State (\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438)","text":"<p><code>State</code> \u2014 \u044d\u0442\u043e \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0448\u0430\u0433\u043e\u0432 \u043e\u0434\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438.</p> <pre><code>from qtasks.plugins import AsyncState\n\nclass MyState(AsyncState):\n    pass\n\n@app.task\nasync def step1(state: MyState):\n    await state.set(\"state\", \"await_phone\")\n    await state.update(step=1, prompt=\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\")\n    return \"ok\"\n\n@app.task\nasync def step2(state: MyState):\n    print(await state.get_all())\n\n    cur = await state.get(\"state\")\n    if cur != \"await_phone\":\n        return \"error\"\n    await state.update(step=2)\n    await state.delete(\"state\")\n    await state.clear()\n    return \"ok\"\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c:</p> <pre><code>{\"state\": \"await_phone\", \"step\": 1, \"prompt\": \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\"}\n</code></pre> <p>\u0418\u0442\u043e\u0433: \u043f\u0435\u0440\u0432\u044b\u0439 \u0448\u0430\u0433 \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u0432\u0442\u043e\u0440\u043e\u0439 \u0448\u0430\u0433 \u0438\u0445 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043b, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u0438 \u043e\u0447\u0438\u0441\u0442\u0438\u043b.</p>"},{"location":"ru/examples/variables/#qtasks","title":"\u2699\ufe0f \u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 <code>QTasks</code>?","text":"<ul> <li>Depends \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 TaskExecutor. \u042d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0411\u0414, API \u0438\u043b\u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c.</li> <li>State \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043a\u0430\u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 key-value \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u041e\u043d\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 <code>set</code>, <code>update</code>, <code>get</code>, <code>delete</code>, <code>clear</code>, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0447\u0442\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043e\u043c (<code>get_all</code>).</li> </ul>"},{"location":"ru/examples/variables/#_2","title":"\ud83c\udfe2 \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:</p> <ol> <li><code>step1</code> \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u0432\u043e\u0434 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430.</li> <li><code>step2</code> \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432\u0432\u0435\u0434\u0451\u043d \u0442\u0435\u043b\u0435\u0444\u043e\u043d, \u0438 \u0434\u0432\u0438\u0433\u0430\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0434\u0430\u043b\u044c\u0448\u0435.</li> </ol> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c <code>Depends</code> \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043a \u0431\u0430\u0437\u0435, \u0430 <code>State</code> \u2014 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p>"},{"location":"ru/examples/variables/#_3","title":"\u2705 \u0418\u0442\u043e\u0433\u0438","text":"<ul> <li>Depends \u2014 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 (\u0440\u0435\u0441\u0443\u0440\u0441\u044b, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u044b, \u0441\u0435\u0440\u0432\u0438\u0441\u044b).</li> <li>State \u2014 \u0434\u043b\u044f \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</li> </ul> <p>\u0412\u043c\u0435\u0441\u0442\u0435 \u043e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0438\u0431\u043a\u0438\u0435 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b: \u043e\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0411\u0414 \u0434\u043e \u0447\u0430\u0442-\u0431\u043e\u0442\u043e\u0432 \u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.</p>"},{"location":"ru/examples/yield/","title":"\u041f\u0440\u0438\u043c\u0435\u0440: \u0417\u0430\u0434\u0430\u0447\u0430-\u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 (yield)","text":"<p><code>QTasks</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 <code>yield</code>, \u043a\u0430\u043a \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439, \u0442\u0430\u043a \u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0435. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043c\u0435\u0440\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u0447\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0438\u0437 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f <code>QueueTasks</code>, \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0442\u0438\u043f\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p>"},{"location":"ru/examples/yield/#1","title":"\ud83d\udd27 \u041f\u0440\u0438\u043c\u0435\u0440 1: \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439","text":"<pre><code>async def yield_func(result):\n    print(f\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d: {result}\")\n    return result + 2\n\n@app.task(generate_handler=yield_func, echo=True)\nasync def test_yield(n: int):\n    for _ in range(n):\n        n += 1\n        yield n\n</code></pre> <p>\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: <code>5</code></p> <p>\u0412\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c:</p> <pre><code>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d: 6\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d: 7\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d: 8\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d: 9\n\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d: 10\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438: <code>[8, 9, 10, 11, 12]</code></p>"},{"location":"ru/examples/yield/#2","title":"\ud83d\udd27 \u041f\u0440\u0438\u043c\u0435\u0440 2: \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043e\u0441\u0442\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439","text":"<pre><code>def sync_handler(value):\n    print(\"SYNC:\", value)\n    return value * 2\n\n@app.task(generate_handler=sync_handler)\ndef sync_gen(n: int):\n    for i in range(n):\n        yield i + 1\n</code></pre> <p>\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: <code>5</code></p> <p>\u0412\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c:</p> <pre><code>SYNC: 1\nSYNC: 2\nSYNC: 3\nSYNC: 4\nSYNC: 5\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0434\u0430\u0447\u0438: <code>[2, 4, 6, 8, 10]</code></p>"},{"location":"ru/examples/yield/#3-id","title":"\ud83d\udd27 \u041f\u0440\u0438\u043c\u0435\u0440 3: \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438 \u0441\u0431\u043e\u0440 ID \u0447\u0435\u0440\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0438\u0441","text":"<pre><code>async def save_to_db(value):\n    db.insert({\"value\": value})\n    return value\n\n@app.task(generate_handler=save_to_db)\ndef ids():\n    for id_ in range(5):\n        yield f\"user_{id_}\"\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435: \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439.</p>"},{"location":"ru/examples/yield/#generate_handler-qtasks","title":"\u2699\ufe0f \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 generate_handler \u0432\u043d\u0443\u0442\u0440\u0438 <code>QTasks</code>?","text":"<ul> <li>\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>generate_handler</code> \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 <code>yield</code>.</li> <li>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 <code>return</code> \u0438\u0437 handler'\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a (<code>list</code>) \u0437\u0430\u0434\u0430\u0447\u0438.</li> <li>\u0415\u0441\u043b\u0438 <code>generate_handler</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d, \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>run_task_gen</code>, \u0438\u043d\u0430\u0447\u0435 \u2014 \u043e\u0431\u044b\u0447\u043d\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c.</li> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 <code>generating</code> \u0432 <code>TaskExecSchema</code> \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c.</li> </ul>"},{"location":"ru/examples/yield/#_1","title":"\ud83c\udfe2 \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u043c \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e:</p> <pre><code>async def log_notification(msg):\n    logger.info(\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e:\", msg)\n    return msg\n\n@app.task(generate_handler=log_notification)\ndef send_notifications():\n    for employee in get_employees():\n        yield f\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435: {employee.email}\"\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <ul> <li>\u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432.</li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f <code>generate_handler</code>, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0438\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443.</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439.</li> </ul> <p>\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0443\u0434\u043e\u0431\u0435\u043d \u0434\u043b\u044f:</p> <ul> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API</li> <li>\u041f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0438\u043d\u0433\u0430</li> <li>\u0417\u0430\u0434\u0430\u0447, \u0433\u0434\u0435 \u0432\u0430\u0436\u043d\u0430 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0448\u0430\u0433\u0430</li> </ul>"},{"location":"ru/examples/yield/#_2","title":"\u2705 \u0418\u0442\u043e\u0433\u0438","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0438 \u0441 <code>yield</code> + <code>generate_handler</code> \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0440\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u0435\u0442 QTasks \u0433\u0438\u0431\u043a\u0438\u043c \u0434\u043b\u044f real-time \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0442\u0440\u0438\u043c\u0438\u043d\u0433\u0430 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u043e\u0432.</p> <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043a\u0430\u043a <code>async</code>, \u0442\u0430\u043a \u0438 <code>sync</code> \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u0443\u0434\u043e\u0431\u043d\u044b\u043c \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u0442\u0438\u043b\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p>"},{"location":"ru/examples/integrations/","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>QTasks</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u0437\u0430 \u0441\u0447\u0451\u0442 \u0441\u0432\u043e\u0435\u0439 \u043e\u0431\u043b\u0435\u0433\u0447\u0451\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438. \u0415\u0451 \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 \u043b\u044e\u0431\u043e\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b:</p> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0447\u0435\u0440\u0435\u0437 <code>@app.task</code>, <code>@shared_task</code>, <code>@router.task</code></li> <li>\u0412\u044b\u0437\u043e\u0432 \u0437\u0430\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 <code>app.add_task(...)</code> \u0438\u043b\u0438 <code>this_is_func.add_task(...)</code></li> <li>\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u043a\u0430\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 <code>app.run_forever()</code>, \u043b\u0438\u0431\u043e \u0447\u0435\u0440\u0435\u0437 CLI:</li> </ul> <pre><code>qtasks -A file:app run\n</code></pre>"},{"location":"ru/examples/integrations/#_2","title":"\ud83d\udccc \u0422\u0435\u043a\u0443\u0449\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438","text":"<p>\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f: \u0441 Django. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u2192 \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u2192 Django.</p>"},{"location":"ru/examples/integrations/django/","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Django","text":"<p>\u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432 <code>QTasks</code> \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043e\u0434\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Django: <code>autodiscover_tasks</code>.</p>"},{"location":"ru/examples/integrations/django/#autodiscover_tasks","title":"\ud83d\udccc \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 autodiscover_tasks?","text":"<p>\u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>tasks.py</code>) \u0438\u0437 \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 <code>INSTALLED_APPS</code>. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 QTasks \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0443\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</p> <p>\u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:</p> <pre><code>def autodiscover_tasks(app, modules: List[str] = [\"tasks\"]):\n    \"\"\"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438\u0437 \u0432\u0441\u0435\u0445 INSTALLED_APPS,\n    \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 QTasks.\n\n    Args:\n        app (QueueTasks): \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n        modules (List[str]): \u041c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0434\u0438\u0441\u043a\u0430\u0432\u0435\u0440\u0438. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: [\"tasks\"].\n    \"\"\"\n</code></pre> <p>\ud83d\udcd6 \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0432 API \u2192 autodiscover_tasks.</p>"},{"location":"ru/examples/integrations/django/#_1","title":"\ud83d\udd27 \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c","text":"<p>\u0412 <code>settings.py</code>:</p> <pre><code>INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"myapp\",  # \u0437\u0434\u0435\u0441\u044c \u0431\u0443\u0434\u0435\u0442 tasks.py\n]\n</code></pre> <p>\u0412 <code>myapp/tasks.py</code>:</p> <pre><code>from qtasks import QueueTasks\n\napp = QueueTasks()\n\n@app.task\ndef hello(name: str):\n    return f\"Hello, {name}!\"\n</code></pre> <p>\u0412 <code>manage.py</code> \u0438\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:</p> <pre><code>from qtasks.contrib.django import autodiscover_tasks\nfrom qtasks import QueueTasks\n\napp = QueueTasks()\nautodiscover_tasks(app)\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 <code>autodiscover_tasks(app)</code> \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0437 <code>tasks.py</code> \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/examples/integrations/django/#_2","title":"\u2705 \u0418\u0442\u043e\u0433\u0438","text":"<ul> <li><code>autodiscover_tasks</code> \u0438\u0449\u0435\u0442 <code>tasks.py</code> (\u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u044b) \u0432\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 <code>INSTALLED_APPS</code>.</li> <li>\u042d\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e QTasks \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u044b Django.</li> <li>\u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u2014 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438\u0445 \u0432 <code>tasks.py</code> \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</li> </ul>"},{"location":"ru/examples/practice/freelancer/","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f QTasks \u0434\u043b\u044f \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435\u0440\u0430","text":"<p>\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a QTasks \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0430\u0436\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 API \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c QTasks \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439.</p>"},{"location":"ru/examples/practice/freelancer/#_1","title":"\ud83d\udcbc \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0432\u044b \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435\u0440, \u0441\u043e\u0437\u0434\u0430\u044e\u0449\u0438\u0439 Telegram-\u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0411\u043e\u0442 \u0434\u043e\u043b\u0436\u0435\u043d:</p> <ol> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e.</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441\u044b \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u0441 API \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</li> <li>\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u043e\u0448\u0438\u0431\u043a\u0438.</li> </ol> <p>\u0412\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0438 \u0432 \u0444\u043e\u043d\u0435, \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u0442 \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0432\u0440\u043e\u0434\u0435 Celery.</p>"},{"location":"ru/examples/practice/freelancer/#_2","title":"\ud83d\ude80 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>from qtasks.asyncio import QueueTasks\nfrom qtasks.registries import AsyncTask\nimport logging\n\napp = QueueTasks()\napp.config.logs_default_level = logging.INFO\n</code></pre>"},{"location":"ru/examples/practice/freelancer/#_3","title":"\u23f0 \u041d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438","text":"<pre><code>@app.task(name=\"send_reminder\")\nasync def send_reminder(chat_id: int, text: str):\n    await telegram_api.send_message(chat_id, text)\n</code></pre> <p>\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0442\u0430\u0439\u043c\u0435\u0440\u043e\u0432:</p> <pre><code>from qtasks.timers import AsyncTimer\nfrom apscheduler.triggers.cron import CronTrigger\n\n# \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e app \u0443\u0436\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\n\ntimer = AsyncTimer(app=app)\ntimer.add_task(\"send_reminder\", trigger=CronTrigger(minute=\"*/1\"),\nargs=(123456789, \"\u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u0440\u043e \u0437\u0430\u043a\u0430\u0437!\"))\n\ntimer.run_forever()\n</code></pre>"},{"location":"ru/examples/practice/freelancer/#_4","title":"\ud83d\udce6 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432","text":"<pre><code>@app.task(name=\"check_orders\", echo=True)\nasync def check_orders(self: AsyncTask):\n    orders = await external_api.get_orders()\n    for order in orders:\n        if order.status == \"delivered\":\n            await self.add_task(\n                \"send_reminder\",\n                order.user_id,\n                \"\u0412\u0430\u0448 \u0437\u0430\u043a\u0430\u0437 \u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d!\"\n            )\n</code></pre>"},{"location":"ru/examples/practice/freelancer/#_5","title":"\ud83d\udccb \u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043e\u043a","text":"<pre><code>@app.task(name=\"error_logger\")\ndef error_logger(message: str):\n    with open(\"errors.log\", \"a\") as f:\n        f.write(message + \"\\n\")\n</code></pre> <p>\u0412\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c:</p> <pre><code>try:\n    ...\nexcept Exception as e:\n    await self.add_task(\"error_logger\", args=(str(e),))\n</code></pre>"},{"location":"ru/examples/practice/freelancer/#qtasks_1","title":"\ud83e\udde9 \u041f\u043e\u0447\u0435\u043c\u0443 QTasks \u0443\u0434\u043e\u0431\u0435\u043d \u0434\u043b\u044f \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435\u0440\u0430?","text":"<ul> <li>\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 Redis \u0438\u043b\u0438 RabbitMQ \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.</li> <li>\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 <code>python main.py</code>, \u0431\u0435\u0437 \u0434\u043e\u043a\u0435\u0440\u043e\u0432 \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439.</li> <li>\u0413\u0438\u0431\u043a\u043e\u0441\u0442\u044c: \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c retry, middleware, \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 executor'\u044b.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>yield</code>, <code>echo</code>, \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> </ul>"},{"location":"ru/examples/practice/freelancer/#_6","title":"\u2705 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u0412\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043c\u043e\u0449\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0444\u043e\u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u0418\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0431\u043e\u0442\u043e\u0432 \u0438 API-\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u2014 \u0442\u0438\u043f\u0438\u0447\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435\u0440\u0430.</p>"},{"location":"ru/examples/practice/large_business/","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f QTasks \u0432 \u043a\u0440\u0443\u043f\u043d\u043e\u043c \u0431\u0438\u0437\u043d\u0435\u0441\u0435","text":"<p>QTasks \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044e \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447. \u042d\u0442\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0440\u043e\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0446\u0435\u043f\u043e\u0447\u0435\u043a \u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438.</p>"},{"location":"ru/examples/practice/large_business/#_1","title":"\ud83c\udfe2 \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439","text":"<p>\u041a\u0440\u0443\u043f\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0441\u044f\u0442\u043a\u0438 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432:</p> <ol> <li>\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 \u0444\u043e\u043d\u043e\u0432\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u0434\u0430\u0447.</li> <li>\u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c, \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438 (Kafka, Redis, PostgreSQL, REST, gRPC).</li> </ol>"},{"location":"ru/examples/practice/large_business/#_2","title":"\u2699\ufe0f \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0434\u0430\u0447","text":"<p>\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u0445/\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445:</p> <pre><code>py -m qtasks -A myproject.qtasks_app run --worker-id node1\npy -m qtasks -A myproject.qtasks_app run --worker-id node2\n</code></pre> <p>\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</p>"},{"location":"ru/examples/practice/large_business/#kafka","title":"\ud83d\udd00 \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Kafka \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430\u043c\u0438","text":"<pre><code>from my_kafka_broker import KafkaBroker\n\napp = QueueTasks(broker=KafkaBroker(...))\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 <code>Storage</code>, <code>GlobalConfig</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p>"},{"location":"ru/examples/practice/large_business/#taskmanager","title":"\ud83e\udde9 TaskManager \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f\u043c\u0438 \u0437\u0430\u0434\u0430\u0447","text":"<pre><code>from qtasks.components.task_manager import TaskManager\n\nclass MyManager(TaskManager):\n    def mutate(self, task):\n        if task.name == \"heavy_task\":\n            task.timeout = 120\n        return task\n\napp.config.task_manager = MyManager()\n</code></pre>"},{"location":"ru/examples/practice/large_business/#bi","title":"\ud83d\udcca \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 BI \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438","text":"<p>\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>generate_handler</code>, <code>yield</code>, <code>middlewares</code>, \u0437\u0430\u0434\u0430\u0447 \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b:</p> <pre><code>@app.task(generate_handler=send_to_bi)\ndef export_metrics():\n    for report in generate_big_reports():\n        yield report\n</code></pre>"},{"location":"ru/examples/practice/large_business/#_3","title":"\ud83e\udde0 \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433","text":"<p>\u0412 \u0441\u0432\u044f\u0437\u043a\u0435 \u0441 QTasks WebView \u043c\u043e\u0436\u043d\u043e:</p> <ul> <li>\u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u0434\u0430\u0447;</li> <li>\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0442\u0438\u043f\u0430\u043c/\u043e\u0448\u0438\u0431\u043a\u0430\u043c/\u0432\u0440\u0435\u043c\u0435\u043d\u0438;</li> <li>\u043e\u0442\u043c\u0435\u043d\u044f\u0442\u044c, \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c, \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438;</li> <li>\u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0430\u043d\u0435\u043b\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f.</li> </ul>"},{"location":"ru/examples/practice/large_business/#_4","title":"\u2705 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>QTasks \u0432 \u043a\u0440\u0443\u043f\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442:</p> <ul> <li>\u0433\u0438\u0431\u043a\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b (\u0431\u0440\u043e\u043a\u0435\u0440, storage, config);</li> <li>\u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0437\u0430\u0434\u0430\u0447;</li> <li>\u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u044f \u044f\u0434\u0440\u0430;</li> <li>\u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 BI, \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u043e\u043c, \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, Kafka, REST, gRPC \u0438 \u0434\u0440.</li> </ul> <p>\u042d\u0442\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u0442 QTasks \u0432 \u043e\u0441\u043d\u043e\u0432\u0443 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f.</p>"},{"location":"ru/examples/practice/small_business/","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f QTasks \u0434\u043b\u044f \u043c\u0430\u043b\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0430","text":"<p>\u041c\u0430\u043b\u044b\u0439 \u0431\u0438\u0437\u043d\u0435\u0441 \u0447\u0430\u0441\u0442\u043e \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438: \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f, \u043e\u0442\u0447\u0451\u0442\u044b, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 CRM, \u043e\u0431\u043c\u0435\u043d \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. QTasks \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043b\u0451\u0433\u043a\u0443\u044e, \u043d\u043e \u043c\u043e\u0449\u043d\u0443\u044e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u0442\u044f\u0436\u0451\u043b\u044b\u0445 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043d\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442.</p>"},{"location":"ru/examples/practice/small_business/#_1","title":"\ud83c\udfea \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439","text":"<p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e:</p> <ol> <li>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0435 \u0437\u0430\u043a\u0430\u0437\u0430.</li> <li>\u0421\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0443\u044e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c.</li> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 CRM.</li> </ol>"},{"location":"ru/examples/practice/small_business/#_2","title":"\ud83d\udce6 \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c","text":"<pre><code>@app.task(name=\"notify_status\")\nasync def notify_status(order_id: int):\n    order = await db.get_order(order_id)\n    await sms_api.send(order.phone, f\"\u0412\u0430\u0448 \u0437\u0430\u043a\u0430\u0437 {order.id} \u0441\u0435\u0439\u0447\u0430\u0441: {order.status}\")\n</code></pre>"},{"location":"ru/examples/practice/small_business/#_3","title":"\ud83d\udcca \u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0441 \u0442\u0430\u0439\u043c\u0435\u0440\u043e\u043c","text":"<pre><code>from qtasks.timers import AsyncTimer\nfrom apscheduler.triggers.cron import CronTrigger\n\ntimer = AsyncTimer(app=app)\n\ntimer.add_task(\"daily_report\", trigger=CronTrigger(hour=23, minute=59))\n\n@app.task(name=\"daily_report\")\nasync def daily_report():\n    stats = await db.get_today_stats()\n    await mailer.send(\"owner@shop.com\", \"\u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u044b\u0439 \u043e\u0442\u0447\u0451\u0442\", stats.format())\n</code></pre>"},{"location":"ru/examples/practice/small_business/#crm-yield-generate_handler","title":"\ud83d\udd17 \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 CRM \u0447\u0435\u0440\u0435\u0437 <code>yield</code> \u0438 <code>generate_handler</code>","text":"<pre><code>async def log_crm(result):\n    await crm_api.send_log(result)\n    return result\n\n@app.task(generate_handler=log_crm, echo=True)\nasync def export_orders():\n    for order in await db.get_exportable_orders():\n        yield order.to_dict()\n</code></pre>"},{"location":"ru/examples/practice/small_business/#_4","title":"\ud83d\udee0 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a \u0437\u0430\u0434\u0430\u0447","text":"<pre><code>@app.task(retry=3, retry_on_exc=[ConnectionError])\nasync def sync_with_crm():\n    await crm_api.sync()\n</code></pre>"},{"location":"ru/examples/practice/small_business/#qtasks_1","title":"\ud83d\udcc8 \u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 QTasks \u0434\u043b\u044f \u0431\u0438\u0437\u043d\u0435\u0441\u0430","text":"<ul> <li>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)</li> <li>\u0423\u0434\u043e\u0431\u043d\u044b\u0435 \u0442\u0430\u0439\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u044b\u0445 \u0438 \u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447</li> <li>\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u043e\u0432</li> <li>\u0413\u0438\u0431\u043a\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430: \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u043f\u043e\u0434 \u043d\u0443\u0436\u0434\u044b CRM, BI, \u0441\u043a\u043b\u0430\u0434\u043e\u0432 \u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0438</li> </ul>"},{"location":"ru/examples/practice/small_business/#_5","title":"\u2705 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e QTasks \u043c\u0430\u043b\u044b\u0439 \u0431\u0438\u0437\u043d\u0435\u0441 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e, \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e \u043c\u0435\u0440\u0435 \u0440\u043e\u0441\u0442\u0430 \u0438 \u043d\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441\u043b\u043e\u0436\u043d\u043e\u0439 DevOps-\u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b.</p>"},{"location":"ru/features/features/","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<p>QueueTasks \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u0438\u0431\u043a\u0443\u044e \u0438 \u043c\u043e\u0449\u043d\u0443\u044e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447.</p> <p>\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u044d\u0442\u043e\u0433\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0433\u0438\u043d\u044b. \u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439:</p>"},{"location":"ru/features/features/#_2","title":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438","text":"<ul> <li>\u041b\u0435\u0433\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043a\u0430\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul>"},{"location":"ru/features/features/#_3","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0431\u0440\u043e\u043a\u0435\u0440\u0430\u043c\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<ul> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: Redis, RabbitMQ, Kafka.</li> <li>\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e.</li> </ul>"},{"location":"ru/features/features/#_4","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c \u0438 \u043f\u043b\u0430\u0433\u0438\u043d\u044b","text":"<ul> <li>\u041b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432, \u0431\u0443\u0434\u044c \u0442\u043e \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438\u043b\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432.</li> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a gRPC.</li> </ul>"},{"location":"ru/features/features/#_5","title":"\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c","text":"<ul> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u043e\u0440\u043a\u0435\u0440\u043e\u0432 \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432.</li> <li>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0432\u043e\u0440\u043a\u0435\u0440\u0430\u043c\u0438.</li> </ul>"},{"location":"ru/features/features/#_6","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 \u0438 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438","text":"<ul> <li>\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u043f\u043b\u0430\u0433\u0438\u043d\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.</li> </ul>"},{"location":"ru/features/features/#_7","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438","text":"<ul> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 <code>asyncio</code>.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u0435\u0439 \u0437\u0430\u0434\u0430\u0447 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c <code>PriorityQueue</code> \u0438 \u0441\u0435\u043c\u0430\u0444\u043e\u0440\u043e\u0432.</li> </ul>"},{"location":"ru/features/features/#_8","title":"\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0430 \u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433","text":"<ul> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 <code>WebView</code> \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</li> <li>\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e <code>(A)syncStats</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438 \u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447.</li> </ul>"},{"location":"ru/features/uniqueness/","title":"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c QTasks","text":"<p>QTasks \u2014 \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 Celery \u0438\u043b\u0438 RQ, \u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0438\u0430\u043b\u044c\u043d\u043e \u0438\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c. \u0412\u043e\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442 QTasks \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c:</p>"},{"location":"ru/features/uniqueness/#_1","title":"\ud83e\uddec \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":"<ul> <li>\u0412\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b (Broker, Worker, Storage, Config, Router \u0438 \u0434\u0440.) \u2014 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c\u044b.</li> <li>\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u043d\u0443\u0436\u0434\u044b \u0431\u0435\u0437 \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u044f\u0434\u0440\u0430.</li> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043b\u0435\u0433\u043a\u043e \u0432\u043d\u0435\u0434\u0440\u044f\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0433\u0438\u043d\u044b.</li> </ul> <p>\ud83c\udd9a Celery: tightly coupled. QTasks: plug-n-play \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p>"},{"location":"ru/features/uniqueness/#yield","title":"\ud83d\udd01 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>yield</code> \u0432 \u0437\u0430\u0434\u0430\u0447\u0430\u0445","text":"<ul> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u0435 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b.</li> <li>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043c\u0435\u0440\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 <code>generate_handler</code>.</li> <li>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u2014 \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0441\u0442\u0440\u0438\u043c\u0438\u043d\u0433\u0430 \u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> </ul> <p>\ud83c\udd9a \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 <code>yield</code> \u0432\u043d\u0443\u0442\u0440\u0438 \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"ru/features/uniqueness/#echo-self","title":"\ud83e\udde0 Echo \u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u0430\u0434\u0430\u0447\u0435 \u0447\u0435\u0440\u0435\u0437 <code>self</code>","text":"<ul> <li>\u041f\u0440\u0438 <code>echo=True</code> \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u0435\u0431\u0435 (<code>self</code>) \u2014 \u043a\u0430\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 <code>AsyncTask</code> \u0438\u043b\u0438 <code>SyncTask</code>.</li> <li>\u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 (<code>self.add_task()</code>), \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043a \u043b\u043e\u0433\u0433\u0435\u0440\u0443, \u043a\u043e\u043d\u0444\u0438\u0433\u0443 \u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u0447\u0435\u0440\u0435\u0437 <code>self.ctx</code>.</li> </ul> <p>\ud83c\udd9a \u041e\u0431\u044b\u0447\u043d\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435.</p>"},{"location":"ru/features/uniqueness/#ctx","title":"\u2699\ufe0f \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 (ctx) \u0437\u0430\u0434\u0430\u0447\u0438","text":"<ul> <li> <p><code>self.ctx</code> \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442:</p> </li> <li> <p>UUID \u0437\u0430\u0434\u0430\u0447\u0438</p> </li> <li>\u043b\u043e\u0433\u0433\u0435\u0440</li> <li>\u0434\u043e\u0441\u0442\u0443\u043f \u043a Storage, Broker, Config</li> <li>\u043c\u0435\u0442\u043e\u0434 <code>cancel()</code> \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043f\u043e\u043c\u0435\u0442\u043a\u043e\u0439 CANCEL</li> </ul> <p>\u042d\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0443\u044e \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0442\u0435\u043b\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u2014 \u0431\u0435\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.</p>"},{"location":"ru/features/uniqueness/#state-depends","title":"\ud83d\udd17 State \u0438 Depends \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438","text":"<ul> <li>\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0436\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0445 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432.</li> </ul> <p>\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438.</p>"},{"location":"ru/features/uniqueness/#_2","title":"\ud83e\udde9 \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u0432 \u0438 \u0441\u0442\u0430\u0440\u0442\u0435\u0440\u043e\u0432","text":"<ul> <li>\u041b\u044e\u0431\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u0451\u0440\u043d\u0443\u0442 \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u043c.</li> <li>\u041f\u043b\u0430\u0433\u0438\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0438\u043b\u0438 \u0441\u0442\u0430\u0440\u0442\u0435\u0440.</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440: \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430, \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u2014 \u0431\u0435\u0437 \u0432\u043c\u0435\u0448\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0432 \u044f\u0434\u0440\u043e.</li> </ul> <p>\ud83c\udd9a \u0412 Celery \u0442\u0430\u043a\u043e\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u0440\u0435\u0437 monkeypatch \u0438\u043b\u0438 middleware \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430.</p>"},{"location":"ru/features/uniqueness/#_3","title":"\u23f1 \u0422\u0430\u0439\u043c\u0435\u0440\u044b \u0431\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","text":"<ul> <li>\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 <code>AsyncTimer</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e cron/interval \u043b\u043e\u0433\u0438\u043a\u0435.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>apscheduler</code>, \u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0441\u0432\u044f\u0437\u043a\u0435 \u0441 \u044f\u0434\u0440\u043e\u043c QTasks \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e.</li> </ul> <p>\ud83c\udd9a Celery \u0442\u0440\u0435\u0431\u0443\u0435\u0442 Celery Beat \u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441.</p>"},{"location":"ru/features/uniqueness/#_4","title":"\ud83d\udee0 \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043b\u0451\u0433\u043a\u0438\u0439 \u0437\u0430\u043f\u0443\u0441\u043a","text":"<ul> <li>\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u0435\u0437 Redis \u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c in-memory \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a: <code>python main.py</code> \u0438\u043b\u0438 <code>py -m qtasks -A file:app run</code></li> <li>\u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0434\u0435\u043b\u0430\u0435\u0442 QTasks \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u0434\u043b\u044f \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0438 \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435\u0440\u043e\u0432.</li> </ul>"},{"location":"ru/features/uniqueness/#_5","title":"\ud83d\ude80 \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","text":"<ul> <li>0.6\u20130.7 \u0441\u0435\u043a\u0443\u043d\u0434 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 Redis (\u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441 Celery: 1\u20133 \u0441\u0435\u043a).</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>asyncio.PriorityQueue</code>, <code>anyio.Semaphore</code> \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</li> </ul>"},{"location":"ru/features/uniqueness/#_6","title":"\ud83e\uddea \u0418\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c in-memory \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</li> <li>\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u0431\u0435\u0437 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u043e\u0440\u043a\u0435\u0440\u0430.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>pytest</code>, <code>unittest</code>, \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e <code>AsyncTestCase</code>.</li> </ul>"},{"location":"ru/features/uniqueness/#_7","title":"\ud83d\udca1 \u0410\u0434\u0430\u043f\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430","text":"<ul> <li>Junior: \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u0434\u0430\u0447.</li> <li>Middle: \u043f\u043b\u0430\u0433\u0438\u043d\u044b, middleware, TaskManager.</li> <li>Senior: \u0437\u0430\u043c\u0435\u043d\u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430, \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0430\u043c\u044f\u0442\u044c\u044e.</li> <li>Lead: \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433, \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, WebView, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0440\u043a\u0435\u0440\u0430\u043c\u0438.</li> </ul> <p>QTasks \u2014 \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u0430 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u0451\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043d\u0430 \u043b\u044e\u0431\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438.</p>"}]}